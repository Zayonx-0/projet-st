
Altimetre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b74  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008cb8  08008cb8  00009cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009164  08009164  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009164  08009164  0000a164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800916c  0800916c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800916c  0800916c  0000a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009170  08009170  0000a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009174  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  08009348  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08009348  0000b478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ed  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002089  00000000  00000000  0001a4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0001c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb9  00000000  00000000  0001d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180b7  00000000  00000000  0001e029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001081e  00000000  00000000  000360e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fbb  00000000  00000000  000468fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de8b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053f4  00000000  00000000  000de8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e3cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08008c9c 	.word	0x08008c9c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08008c9c 	.word	0x08008c9c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	@ 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d26:	2afd      	cmp	r2, #253	@ 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	@ 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmpun>:
 8001060:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001064:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001068:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800106c:	d102      	bne.n	8001074 <__aeabi_fcmpun+0x14>
 800106e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001072:	d108      	bne.n	8001086 <__aeabi_fcmpun+0x26>
 8001074:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001078:	d102      	bne.n	8001080 <__aeabi_fcmpun+0x20>
 800107a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107e:	d102      	bne.n	8001086 <__aeabi_fcmpun+0x26>
 8001080:	f04f 0000 	mov.w	r0, #0
 8001084:	4770      	bx	lr
 8001086:	f04f 0001 	mov.w	r0, #1
 800108a:	4770      	bx	lr

0800108c <__aeabi_uldivmod>:
 800108c:	b953      	cbnz	r3, 80010a4 <__aeabi_uldivmod+0x18>
 800108e:	b94a      	cbnz	r2, 80010a4 <__aeabi_uldivmod+0x18>
 8001090:	2900      	cmp	r1, #0
 8001092:	bf08      	it	eq
 8001094:	2800      	cmpeq	r0, #0
 8001096:	bf1c      	itt	ne
 8001098:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800109c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80010a0:	f000 b98c 	b.w	80013bc <__aeabi_idiv0>
 80010a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010ac:	f000 f806 	bl	80010bc <__udivmoddi4>
 80010b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b8:	b004      	add	sp, #16
 80010ba:	4770      	bx	lr

080010bc <__udivmoddi4>:
 80010bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c0:	9d08      	ldr	r5, [sp, #32]
 80010c2:	468e      	mov	lr, r1
 80010c4:	4604      	mov	r4, r0
 80010c6:	4688      	mov	r8, r1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d14a      	bne.n	8001162 <__udivmoddi4+0xa6>
 80010cc:	428a      	cmp	r2, r1
 80010ce:	4617      	mov	r7, r2
 80010d0:	d962      	bls.n	8001198 <__udivmoddi4+0xdc>
 80010d2:	fab2 f682 	clz	r6, r2
 80010d6:	b14e      	cbz	r6, 80010ec <__udivmoddi4+0x30>
 80010d8:	f1c6 0320 	rsb	r3, r6, #32
 80010dc:	fa01 f806 	lsl.w	r8, r1, r6
 80010e0:	fa20 f303 	lsr.w	r3, r0, r3
 80010e4:	40b7      	lsls	r7, r6
 80010e6:	ea43 0808 	orr.w	r8, r3, r8
 80010ea:	40b4      	lsls	r4, r6
 80010ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80010f4:	fa1f fc87 	uxth.w	ip, r7
 80010f8:	fb0e 8811 	mls	r8, lr, r1, r8
 80010fc:	fb01 f20c 	mul.w	r2, r1, ip
 8001100:	0c23      	lsrs	r3, r4, #16
 8001102:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001106:	429a      	cmp	r2, r3
 8001108:	d909      	bls.n	800111e <__udivmoddi4+0x62>
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001110:	f080 80eb 	bcs.w	80012ea <__udivmoddi4+0x22e>
 8001114:	429a      	cmp	r2, r3
 8001116:	f240 80e8 	bls.w	80012ea <__udivmoddi4+0x22e>
 800111a:	3902      	subs	r1, #2
 800111c:	443b      	add	r3, r7
 800111e:	1a9a      	subs	r2, r3, r2
 8001120:	fbb2 f0fe 	udiv	r0, r2, lr
 8001124:	fb0e 2210 	mls	r2, lr, r0, r2
 8001128:	fb00 fc0c 	mul.w	ip, r0, ip
 800112c:	b2a3      	uxth	r3, r4
 800112e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001132:	459c      	cmp	ip, r3
 8001134:	d909      	bls.n	800114a <__udivmoddi4+0x8e>
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800113c:	f080 80d7 	bcs.w	80012ee <__udivmoddi4+0x232>
 8001140:	459c      	cmp	ip, r3
 8001142:	f240 80d4 	bls.w	80012ee <__udivmoddi4+0x232>
 8001146:	443b      	add	r3, r7
 8001148:	3802      	subs	r0, #2
 800114a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800114e:	2100      	movs	r1, #0
 8001150:	eba3 030c 	sub.w	r3, r3, ip
 8001154:	b11d      	cbz	r5, 800115e <__udivmoddi4+0xa2>
 8001156:	2200      	movs	r2, #0
 8001158:	40f3      	lsrs	r3, r6
 800115a:	e9c5 3200 	strd	r3, r2, [r5]
 800115e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001162:	428b      	cmp	r3, r1
 8001164:	d905      	bls.n	8001172 <__udivmoddi4+0xb6>
 8001166:	b10d      	cbz	r5, 800116c <__udivmoddi4+0xb0>
 8001168:	e9c5 0100 	strd	r0, r1, [r5]
 800116c:	2100      	movs	r1, #0
 800116e:	4608      	mov	r0, r1
 8001170:	e7f5      	b.n	800115e <__udivmoddi4+0xa2>
 8001172:	fab3 f183 	clz	r1, r3
 8001176:	2900      	cmp	r1, #0
 8001178:	d146      	bne.n	8001208 <__udivmoddi4+0x14c>
 800117a:	4573      	cmp	r3, lr
 800117c:	d302      	bcc.n	8001184 <__udivmoddi4+0xc8>
 800117e:	4282      	cmp	r2, r0
 8001180:	f200 8108 	bhi.w	8001394 <__udivmoddi4+0x2d8>
 8001184:	1a84      	subs	r4, r0, r2
 8001186:	eb6e 0203 	sbc.w	r2, lr, r3
 800118a:	2001      	movs	r0, #1
 800118c:	4690      	mov	r8, r2
 800118e:	2d00      	cmp	r5, #0
 8001190:	d0e5      	beq.n	800115e <__udivmoddi4+0xa2>
 8001192:	e9c5 4800 	strd	r4, r8, [r5]
 8001196:	e7e2      	b.n	800115e <__udivmoddi4+0xa2>
 8001198:	2a00      	cmp	r2, #0
 800119a:	f000 8091 	beq.w	80012c0 <__udivmoddi4+0x204>
 800119e:	fab2 f682 	clz	r6, r2
 80011a2:	2e00      	cmp	r6, #0
 80011a4:	f040 80a5 	bne.w	80012f2 <__udivmoddi4+0x236>
 80011a8:	1a8a      	subs	r2, r1, r2
 80011aa:	2101      	movs	r1, #1
 80011ac:	0c03      	lsrs	r3, r0, #16
 80011ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011b2:	b280      	uxth	r0, r0
 80011b4:	b2bc      	uxth	r4, r7
 80011b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80011ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80011be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011c2:	fb04 f20c 	mul.w	r2, r4, ip
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d907      	bls.n	80011da <__udivmoddi4+0x11e>
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80011d0:	d202      	bcs.n	80011d8 <__udivmoddi4+0x11c>
 80011d2:	429a      	cmp	r2, r3
 80011d4:	f200 80e3 	bhi.w	800139e <__udivmoddi4+0x2e2>
 80011d8:	46c4      	mov	ip, r8
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80011e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80011e4:	fb02 f404 	mul.w	r4, r2, r4
 80011e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011ec:	429c      	cmp	r4, r3
 80011ee:	d907      	bls.n	8001200 <__udivmoddi4+0x144>
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80011f6:	d202      	bcs.n	80011fe <__udivmoddi4+0x142>
 80011f8:	429c      	cmp	r4, r3
 80011fa:	f200 80cd 	bhi.w	8001398 <__udivmoddi4+0x2dc>
 80011fe:	4602      	mov	r2, r0
 8001200:	1b1b      	subs	r3, r3, r4
 8001202:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001206:	e7a5      	b.n	8001154 <__udivmoddi4+0x98>
 8001208:	f1c1 0620 	rsb	r6, r1, #32
 800120c:	408b      	lsls	r3, r1
 800120e:	fa22 f706 	lsr.w	r7, r2, r6
 8001212:	431f      	orrs	r7, r3
 8001214:	fa2e fa06 	lsr.w	sl, lr, r6
 8001218:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800121c:	fbba f8f9 	udiv	r8, sl, r9
 8001220:	fa0e fe01 	lsl.w	lr, lr, r1
 8001224:	fa20 f306 	lsr.w	r3, r0, r6
 8001228:	fb09 aa18 	mls	sl, r9, r8, sl
 800122c:	fa1f fc87 	uxth.w	ip, r7
 8001230:	ea43 030e 	orr.w	r3, r3, lr
 8001234:	fa00 fe01 	lsl.w	lr, r0, r1
 8001238:	fb08 f00c 	mul.w	r0, r8, ip
 800123c:	0c1c      	lsrs	r4, r3, #16
 800123e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001242:	42a0      	cmp	r0, r4
 8001244:	fa02 f201 	lsl.w	r2, r2, r1
 8001248:	d90a      	bls.n	8001260 <__udivmoddi4+0x1a4>
 800124a:	193c      	adds	r4, r7, r4
 800124c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8001250:	f080 809e 	bcs.w	8001390 <__udivmoddi4+0x2d4>
 8001254:	42a0      	cmp	r0, r4
 8001256:	f240 809b 	bls.w	8001390 <__udivmoddi4+0x2d4>
 800125a:	f1a8 0802 	sub.w	r8, r8, #2
 800125e:	443c      	add	r4, r7
 8001260:	1a24      	subs	r4, r4, r0
 8001262:	b298      	uxth	r0, r3
 8001264:	fbb4 f3f9 	udiv	r3, r4, r9
 8001268:	fb09 4413 	mls	r4, r9, r3, r4
 800126c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001270:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001274:	45a4      	cmp	ip, r4
 8001276:	d909      	bls.n	800128c <__udivmoddi4+0x1d0>
 8001278:	193c      	adds	r4, r7, r4
 800127a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800127e:	f080 8085 	bcs.w	800138c <__udivmoddi4+0x2d0>
 8001282:	45a4      	cmp	ip, r4
 8001284:	f240 8082 	bls.w	800138c <__udivmoddi4+0x2d0>
 8001288:	3b02      	subs	r3, #2
 800128a:	443c      	add	r4, r7
 800128c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001290:	eba4 040c 	sub.w	r4, r4, ip
 8001294:	fba0 8c02 	umull	r8, ip, r0, r2
 8001298:	4564      	cmp	r4, ip
 800129a:	4643      	mov	r3, r8
 800129c:	46e1      	mov	r9, ip
 800129e:	d364      	bcc.n	800136a <__udivmoddi4+0x2ae>
 80012a0:	d061      	beq.n	8001366 <__udivmoddi4+0x2aa>
 80012a2:	b15d      	cbz	r5, 80012bc <__udivmoddi4+0x200>
 80012a4:	ebbe 0203 	subs.w	r2, lr, r3
 80012a8:	eb64 0409 	sbc.w	r4, r4, r9
 80012ac:	fa04 f606 	lsl.w	r6, r4, r6
 80012b0:	fa22 f301 	lsr.w	r3, r2, r1
 80012b4:	431e      	orrs	r6, r3
 80012b6:	40cc      	lsrs	r4, r1
 80012b8:	e9c5 6400 	strd	r6, r4, [r5]
 80012bc:	2100      	movs	r1, #0
 80012be:	e74e      	b.n	800115e <__udivmoddi4+0xa2>
 80012c0:	fbb1 fcf2 	udiv	ip, r1, r2
 80012c4:	0c01      	lsrs	r1, r0, #16
 80012c6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012ca:	b280      	uxth	r0, r0
 80012cc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012d0:	463b      	mov	r3, r7
 80012d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80012d6:	4638      	mov	r0, r7
 80012d8:	463c      	mov	r4, r7
 80012da:	46b8      	mov	r8, r7
 80012dc:	46be      	mov	lr, r7
 80012de:	2620      	movs	r6, #32
 80012e0:	eba2 0208 	sub.w	r2, r2, r8
 80012e4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012e8:	e765      	b.n	80011b6 <__udivmoddi4+0xfa>
 80012ea:	4601      	mov	r1, r0
 80012ec:	e717      	b.n	800111e <__udivmoddi4+0x62>
 80012ee:	4610      	mov	r0, r2
 80012f0:	e72b      	b.n	800114a <__udivmoddi4+0x8e>
 80012f2:	f1c6 0120 	rsb	r1, r6, #32
 80012f6:	fa2e fc01 	lsr.w	ip, lr, r1
 80012fa:	40b7      	lsls	r7, r6
 80012fc:	fa0e fe06 	lsl.w	lr, lr, r6
 8001300:	fa20 f101 	lsr.w	r1, r0, r1
 8001304:	ea41 010e 	orr.w	r1, r1, lr
 8001308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800130c:	fbbc f8fe 	udiv	r8, ip, lr
 8001310:	b2bc      	uxth	r4, r7
 8001312:	fb0e cc18 	mls	ip, lr, r8, ip
 8001316:	fb08 f904 	mul.w	r9, r8, r4
 800131a:	0c0a      	lsrs	r2, r1, #16
 800131c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001320:	40b0      	lsls	r0, r6
 8001322:	4591      	cmp	r9, r2
 8001324:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001328:	b280      	uxth	r0, r0
 800132a:	d93e      	bls.n	80013aa <__udivmoddi4+0x2ee>
 800132c:	18ba      	adds	r2, r7, r2
 800132e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001332:	d201      	bcs.n	8001338 <__udivmoddi4+0x27c>
 8001334:	4591      	cmp	r9, r2
 8001336:	d81f      	bhi.n	8001378 <__udivmoddi4+0x2bc>
 8001338:	eba2 0209 	sub.w	r2, r2, r9
 800133c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001340:	fb09 f804 	mul.w	r8, r9, r4
 8001344:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001348:	b28a      	uxth	r2, r1
 800134a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800134e:	4542      	cmp	r2, r8
 8001350:	d229      	bcs.n	80013a6 <__udivmoddi4+0x2ea>
 8001352:	18ba      	adds	r2, r7, r2
 8001354:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001358:	d2c2      	bcs.n	80012e0 <__udivmoddi4+0x224>
 800135a:	4542      	cmp	r2, r8
 800135c:	d2c0      	bcs.n	80012e0 <__udivmoddi4+0x224>
 800135e:	f1a9 0102 	sub.w	r1, r9, #2
 8001362:	443a      	add	r2, r7
 8001364:	e7bc      	b.n	80012e0 <__udivmoddi4+0x224>
 8001366:	45c6      	cmp	lr, r8
 8001368:	d29b      	bcs.n	80012a2 <__udivmoddi4+0x1e6>
 800136a:	ebb8 0302 	subs.w	r3, r8, r2
 800136e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001372:	3801      	subs	r0, #1
 8001374:	46e1      	mov	r9, ip
 8001376:	e794      	b.n	80012a2 <__udivmoddi4+0x1e6>
 8001378:	eba7 0909 	sub.w	r9, r7, r9
 800137c:	444a      	add	r2, r9
 800137e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001382:	f1a8 0c02 	sub.w	ip, r8, #2
 8001386:	fb09 f804 	mul.w	r8, r9, r4
 800138a:	e7db      	b.n	8001344 <__udivmoddi4+0x288>
 800138c:	4603      	mov	r3, r0
 800138e:	e77d      	b.n	800128c <__udivmoddi4+0x1d0>
 8001390:	46d0      	mov	r8, sl
 8001392:	e765      	b.n	8001260 <__udivmoddi4+0x1a4>
 8001394:	4608      	mov	r0, r1
 8001396:	e6fa      	b.n	800118e <__udivmoddi4+0xd2>
 8001398:	443b      	add	r3, r7
 800139a:	3a02      	subs	r2, #2
 800139c:	e730      	b.n	8001200 <__udivmoddi4+0x144>
 800139e:	f1ac 0c02 	sub.w	ip, ip, #2
 80013a2:	443b      	add	r3, r7
 80013a4:	e719      	b.n	80011da <__udivmoddi4+0x11e>
 80013a6:	4649      	mov	r1, r9
 80013a8:	e79a      	b.n	80012e0 <__udivmoddi4+0x224>
 80013aa:	eba2 0209 	sub.w	r2, r2, r9
 80013ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80013b2:	46c4      	mov	ip, r8
 80013b4:	fb09 f804 	mul.w	r8, r9, r4
 80013b8:	e7c4      	b.n	8001344 <__udivmoddi4+0x288>
 80013ba:	bf00      	nop

080013bc <__aeabi_idiv0>:
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c6:	f000 fd88 	bl	8001eda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ca:	f000 f82f 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ce:	f000 f983 	bl	80016d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013d2:	f000 f957 	bl	8001684 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013d6:	f000 f8ff 	bl	80015d8 <MX_TIM3_Init>
  MX_I2C1_Init();
 80013da:	f000 f8cf 	bl	800157c <MX_I2C1_Init>
  MX_ADC_Init();
 80013de:	f000 f873 	bl	80014c8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim3);  // <--- START TIMER EN MODE INTERRUPTION
  printf("Init OK\r\n");
 80013e2:	480f      	ldr	r0, [pc, #60]	@ (8001420 <main+0x60>)
 80013e4:	f005 f84a 	bl	800647c <puts>
  // Active le LPS22HH à 10Hz
	uint8_t reg = 0x10;              // CTRL_REG1
 80013e8:	2310      	movs	r3, #16
 80013ea:	71fb      	strb	r3, [r7, #7]
	uint8_t odr = 0x20;              // ODR = 10 Hz (bit[6:4] = 010)
 80013ec:	2320      	movs	r3, #32
 80013ee:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, adresseCapteur << 1, reg, 1, &odr, 1, 100);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	2364      	movs	r3, #100	@ 0x64
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	1dbb      	adds	r3, r7, #6
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	21ba      	movs	r1, #186	@ 0xba
 8001404:	4807      	ldr	r0, [pc, #28]	@ (8001424 <main+0x64>)
 8001406:	f001 fe83 	bl	8003110 <HAL_I2C_Mem_Write>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  scan_i2c_bus(&hi2c1);
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <main+0x64>)
 800140c:	f000 fa4c 	bl	80018a8 <scan_i2c_bus>
  printf("En attente de BTN2...\r\n");
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <main+0x68>)
 8001412:	f005 f833 	bl	800647c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8001416:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800141a:	f000 fdcd 	bl	8001fb8 <HAL_Delay>
 800141e:	e7fa      	b.n	8001416 <main+0x56>
 8001420:	08008cb8 	.word	0x08008cb8
 8001424:	20000244 	.word	0x20000244
 8001428:	08008cc4 	.word	0x08008cc4

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b092      	sub	sp, #72	@ 0x48
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2234      	movs	r2, #52	@ 0x34
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f005 f826 	bl	800648c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144e:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <SystemClock_Config+0x98>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001456:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <SystemClock_Config+0x98>)
 8001458:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800145c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800145e:	2302      	movs	r3, #2
 8001460:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001462:	2301      	movs	r3, #1
 8001464:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001466:	2310      	movs	r3, #16
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146a:	2302      	movs	r3, #2
 800146c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800146e:	2300      	movs	r3, #0
 8001470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001472:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001476:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001478:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800147c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4618      	mov	r0, r3
 8001484:	f002 fe52 	bl	800412c <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800148e:	f000 fad1 	bl	8001a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2303      	movs	r3, #3
 8001498:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2101      	movs	r1, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f96e 	bl	800478c <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014b6:	f000 fabd 	bl	8001a34 <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3748      	adds	r7, #72	@ 0x48
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80014d8:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <MX_ADC_Init+0xac>)
 80014da:	4a27      	ldr	r2, [pc, #156]	@ (8001578 <MX_ADC_Init+0xb0>)
 80014dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014de:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <MX_ADC_Init+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <MX_ADC_Init+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ea:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <MX_ADC_Init+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <MX_ADC_Init+0xac>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <MX_ADC_Init+0xac>)
 80014f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <MX_ADC_Init+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_ADC_Init+0xac>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_ADC_Init+0xac>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_ADC_Init+0xac>)
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_ADC_Init+0xac>)
 800151a:	2201      	movs	r2, #1
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_ADC_Init+0xac>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <MX_ADC_Init+0xac>)
 8001528:	2210      	movs	r2, #16
 800152a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_ADC_Init+0xac>)
 800152e:	2200      	movs	r2, #0
 8001530:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <MX_ADC_Init+0xac>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800153a:	480e      	ldr	r0, [pc, #56]	@ (8001574 <MX_ADC_Init+0xac>)
 800153c:	f000 fd5e 	bl	8001ffc <HAL_ADC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8001546:	f000 fa75 	bl	8001a34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800154a:	2301      	movs	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154e:	2301      	movs	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <MX_ADC_Init+0xac>)
 800155c:	f000 ffbc 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8001566:	f000 fa65 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001f0 	.word	0x200001f0
 8001578:	40012400 	.word	0x40012400

0800157c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_I2C1_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	@ (80015d0 <MX_I2C1_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_I2C1_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_I2C1_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_I2C1_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015ba:	f001 fc65 	bl	8002e88 <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 fa36 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000244 	.word	0x20000244
 80015d0:	40005400 	.word	0x40005400
 80015d4:	00061a80 	.word	0x00061a80

080015d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f4:	4b21      	ldr	r3, [pc, #132]	@ (800167c <MX_TIM3_Init+0xa4>)
 80015f6:	4a22      	ldr	r2, [pc, #136]	@ (8001680 <MX_TIM3_Init+0xa8>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20000;
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <MX_TIM3_Init+0xa4>)
 80015fc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001600:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001608:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <MX_TIM3_Init+0xa4>)
 800160a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800160e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800161c:	4817      	ldr	r0, [pc, #92]	@ (800167c <MX_TIM3_Init+0xa4>)
 800161e:	f003 fb7b 	bl	8004d18 <HAL_TIM_Base_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001628:	f000 fa04 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001630:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	4619      	mov	r1, r3
 8001638:	4810      	ldr	r0, [pc, #64]	@ (800167c <MX_TIM3_Init+0xa4>)
 800163a:	f003 fccb 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001644:	f000 f9f6 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	4809      	ldr	r0, [pc, #36]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001656:	f003 feb5 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001660:	f000 f9e8 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2101      	movs	r1, #1
 8001668:	201d      	movs	r0, #29
 800166a:	f001 fa16 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800166e:	201d      	movs	r0, #29
 8001670:	f001 fa2f 	bl	8002ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM3_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000298 	.word	0x20000298
 8001680:	40000400 	.word	0x40000400

08001684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <MX_USART2_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016bc:	f003 fee0 	bl	8005480 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f000 f9b5 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002d8 	.word	0x200002d8
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <MX_GPIO_Init+0xec>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a34      	ldr	r2, [pc, #208]	@ (80017c4 <MX_GPIO_Init+0xec>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <MX_GPIO_Init+0xec>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a2e      	ldr	r2, [pc, #184]	@ (80017c4 <MX_GPIO_Init+0xec>)
 800170c:	f043 0320 	orr.w	r3, r3, #32
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a28      	ldr	r2, [pc, #160]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_GPIO_Init+0xec>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a22      	ldr	r2, [pc, #136]	@ (80017c4 <MX_GPIO_Init+0xec>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2120      	movs	r1, #32
 8001752:	481d      	ldr	r0, [pc, #116]	@ (80017c8 <MX_GPIO_Init+0xf0>)
 8001754:	f001 fb68 	bl	8002e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4817      	ldr	r0, [pc, #92]	@ (80017cc <MX_GPIO_Init+0xf4>)
 8001770:	f001 f9ca 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001774:	2320      	movs	r3, #32
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	480f      	ldr	r0, [pc, #60]	@ (80017c8 <MX_GPIO_Init+0xf0>)
 800178c:	f001 f9bc 	bl	8002b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <MX_GPIO_Init+0xf0>)
 80017a8:	f001 f9ae 	bl	8002b08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2028      	movs	r0, #40	@ 0x28
 80017b2:	f001 f972 	bl	8002a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b6:	2028      	movs	r0, #40	@ 0x28
 80017b8:	f001 f98b 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	@ 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020800 	.word	0x40020800

080017d0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80017d8:	1d39      	adds	r1, r7, #4
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017de:	2201      	movs	r2, #1
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <__io_putchar+0x20>)
 80017e2:	f003 fe9d 	bl	8005520 <HAL_UART_Transmit>
    return ch;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200002d8 	.word	0x200002d8

080017f4 <lire_adc>:

uint32_t lire_adc(ADC_HandleTypeDef *hadc) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fd43 	bl	8002288 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001802:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fdca 	bl	80023a0 <HAL_ADC_PollForConversion>
    uint32_t val = HAL_ADC_GetValue(hadc);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fe57 	bl	80024c0 <HAL_ADC_GetValue>
 8001812:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(hadc);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fd97 	bl	8002348 <HAL_ADC_Stop>
    return val;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <lire_pression_LPS22HH>:

float lire_pression_LPS22HH(I2C_HandleTypeDef *hi2c) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af04      	add	r7, sp, #16
 800182a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[3] = {0};
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2100      	movs	r1, #0
 8001832:	460a      	mov	r2, r1
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	460a      	mov	r2, r1
 8001838:	709a      	strb	r2, [r3, #2]
    uint8_t reg = 0x28;  // PRESS_OUT_XL
 800183a:	2328      	movs	r3, #40	@ 0x28
 800183c:	75fb      	strb	r3, [r7, #23]

    // Lecture de 3 octets consécutifs
    if (HAL_I2C_Mem_Read(hi2c, adresseCapteur << 1, reg | 0x80, 1, buffer, 3, 100) != HAL_OK) {
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	2364      	movs	r3, #100	@ 0x64
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	2303      	movs	r3, #3
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2301      	movs	r3, #1
 8001858:	21ba      	movs	r1, #186	@ 0xba
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f001 fd52 	bl	8003304 <HAL_I2C_Mem_Read>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <lire_pression_LPS22HH+0x4c>
        printf("Erreur lecture LPS22HH\r\n");
 8001866:	480e      	ldr	r0, [pc, #56]	@ (80018a0 <lire_pression_LPS22HH+0x7c>)
 8001868:	f004 fe08 	bl	800647c <puts>
        return -1;
 800186c:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <lire_pression_LPS22HH+0x80>)
 800186e:	e013      	b.n	8001898 <lire_pression_LPS22HH+0x74>
    }

    int32_t raw_press = (int32_t)(buffer[2] << 16 | buffer[1] << 8 | buffer[0]);
 8001870:	7abb      	ldrb	r3, [r7, #10]
 8001872:	041a      	lsls	r2, r3, #16
 8001874:	7a7b      	ldrb	r3, [r7, #9]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4313      	orrs	r3, r2
 800187a:	7a3a      	ldrb	r2, [r7, #8]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]

    // Le capteur retourne une pression en 1/4096 hPa
    float pressure_hPa = raw_press / 4096.0f;
 8001880:	6938      	ldr	r0, [r7, #16]
 8001882:	f7ff f9d3 	bl	8000c2c <__aeabi_i2f>
 8001886:	4603      	mov	r3, r0
 8001888:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fad5 	bl	8000e3c <__aeabi_fdiv>
 8001892:	4603      	mov	r3, r0
 8001894:	60fb      	str	r3, [r7, #12]

    return pressure_hPa;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	08008cdc 	.word	0x08008cdc
 80018a4:	bf800000 	.word	0xbf800000

080018a8 <scan_i2c_bus>:

void scan_i2c_bus(I2C_HandleTypeDef *hi2c) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    printf("Scan I2C...\r\n");
 80018b0:	4813      	ldr	r0, [pc, #76]	@ (8001900 <scan_i2c_bus+0x58>)
 80018b2:	f004 fde3 	bl	800647c <puts>

    for (uint8_t addr = 1; addr < 127; addr++) {
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e016      	b.n	80018ea <scan_i2c_bus+0x42>
        if (HAL_I2C_IsDeviceReady(hi2c, (addr << 1), 3, 50) == HAL_OK) {
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b299      	uxth	r1, r3
 80018c4:	2332      	movs	r3, #50	@ 0x32
 80018c6:	2203      	movs	r2, #3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f001 ff4d 	bl	8003768 <HAL_I2C_IsDeviceReady>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <scan_i2c_bus+0x36>
            printf("-> Device found at 0x%02X\r\n", addr);
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	4619      	mov	r1, r3
 80018d8:	480a      	ldr	r0, [pc, #40]	@ (8001904 <scan_i2c_bus+0x5c>)
 80018da:	f004 fd67 	bl	80063ac <iprintf>
        }
        HAL_Delay(10); // 🔧 ajoute une pause
 80018de:	200a      	movs	r0, #10
 80018e0:	f000 fb6a 	bl	8001fb8 <HAL_Delay>
    for (uint8_t addr = 1; addr < 127; addr++) {
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3301      	adds	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2b7e      	cmp	r3, #126	@ 0x7e
 80018ee:	d9e5      	bls.n	80018bc <scan_i2c_bus+0x14>
    }

    printf("Scan termine.\r\n");
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <scan_i2c_bus+0x60>)
 80018f2:	f004 fdc3 	bl	800647c <puts>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	08008cf4 	.word	0x08008cf4
 8001904:	08008d04 	.word	0x08008d04
 8001908:	08008d20 	.word	0x08008d20

0800190c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800190c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001910:	b08c      	sub	sp, #48	@ 0x30
 8001912:	af04      	add	r7, sp, #16
 8001914:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a2d      	ldr	r2, [pc, #180]	@ (80019d0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d152      	bne.n	80019c6 <HAL_TIM_PeriodElapsedCallback+0xba>
    	uint32_t adc_val = lire_adc(&hadc);
 8001920:	482c      	ldr	r0, [pc, #176]	@ (80019d4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001922:	f7ff ff67 	bl	80017f4 <lire_adc>
 8001926:	61f8      	str	r0, [r7, #28]
    	float pression_niveau_mer = 1010.0f + (adc_val / 4095.0f) * 20.0f;
 8001928:	69f8      	ldr	r0, [r7, #28]
 800192a:	f7ff f97b 	bl	8000c24 <__aeabi_ui2f>
 800192e:	4603      	mov	r3, r0
 8001930:	4929      	ldr	r1, [pc, #164]	@ (80019d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fa82 	bl	8000e3c <__aeabi_fdiv>
 8001938:	4603      	mov	r3, r0
 800193a:	4928      	ldr	r1, [pc, #160]	@ (80019dc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f9c9 	bl	8000cd4 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	4926      	ldr	r1, [pc, #152]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f8bc 	bl	8000ac4 <__addsf3>
 800194c:	4603      	mov	r3, r0
 800194e:	61bb      	str	r3, [r7, #24]
        float offset = +0.0f;
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
        float pression = lire_pression_LPS22HH(&hi2c1);
 8001956:	4823      	ldr	r0, [pc, #140]	@ (80019e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001958:	f7ff ff64 	bl	8001824 <lire_pression_LPS22HH>
 800195c:	6138      	str	r0, [r7, #16]
        float pression_corrigee = pression + offset;
 800195e:	6979      	ldr	r1, [r7, #20]
 8001960:	6938      	ldr	r0, [r7, #16]
 8001962:	f7ff f8af 	bl	8000ac4 <__addsf3>
 8001966:	4603      	mov	r3, r0
 8001968:	60fb      	str	r3, [r7, #12]
        float altitude = 44330.0f * (1.0f - powf(pression_corrigee / pression_niveau_mer, 1.0f / 5.255f));
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff fa65 	bl	8000e3c <__aeabi_fdiv>
 8001972:	4603      	mov	r3, r0
 8001974:	491c      	ldr	r1, [pc, #112]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001976:	4618      	mov	r0, r3
 8001978:	f006 fcfc 	bl	8008374 <powf>
 800197c:	4603      	mov	r3, r0
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001984:	f7ff f89c 	bl	8000ac0 <__aeabi_fsub>
 8001988:	4603      	mov	r3, r0
 800198a:	4918      	ldr	r1, [pc, #96]	@ (80019ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f9a1 	bl	8000cd4 <__aeabi_fmul>
 8001992:	4603      	mov	r3, r0
 8001994:	60bb      	str	r3, [r7, #8]
        printf("Pression de reference: %.2f hPa |Pression mesuree: %.2f hPa | Altitude : %.2f m\n",pression_niveau_mer, pression_corrigee, altitude);
 8001996:	69b8      	ldr	r0, [r7, #24]
 8001998:	f7fe fd5e 	bl	8000458 <__aeabi_f2d>
 800199c:	4680      	mov	r8, r0
 800199e:	4689      	mov	r9, r1
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7fe fd59 	bl	8000458 <__aeabi_f2d>
 80019a6:	4604      	mov	r4, r0
 80019a8:	460d      	mov	r5, r1
 80019aa:	68b8      	ldr	r0, [r7, #8]
 80019ac:	f7fe fd54 	bl	8000458 <__aeabi_f2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019b8:	e9cd 4500 	strd	r4, r5, [sp]
 80019bc:	4642      	mov	r2, r8
 80019be:	464b      	mov	r3, r9
 80019c0:	480b      	ldr	r0, [pc, #44]	@ (80019f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019c2:	f004 fcf3 	bl	80063ac <iprintf>
        //printf("%.2f\n", pression);
    }
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019d0:	40000400 	.word	0x40000400
 80019d4:	200001f0 	.word	0x200001f0
 80019d8:	457ff000 	.word	0x457ff000
 80019dc:	41a00000 	.word	0x41a00000
 80019e0:	447c8000 	.word	0x447c8000
 80019e4:	20000244 	.word	0x20000244
 80019e8:	3e42dcae 	.word	0x3e42dcae
 80019ec:	472d2a00 	.word	0x472d2a00
 80019f0:	08008d30 	.word	0x08008d30

080019f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) {
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a04:	d10c      	bne.n	8001a20 <HAL_GPIO_EXTI_Callback+0x2c>
        static uint8_t start = 0;

        if (!start) {
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <HAL_GPIO_EXTI_Callback+0x34>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <HAL_GPIO_EXTI_Callback+0x2c>
            start = 1;
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_GPIO_EXTI_Callback+0x34>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
            printf("BTN2 presse -> lancement des mesures\n");
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <HAL_GPIO_EXTI_Callback+0x38>)
 8001a16:	f004 fd31 	bl	800647c <puts>
            HAL_TIM_Base_Start_IT(&htim3);  // 🔥 lancement du timer
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001a1c:	f003 f9bc 	bl	8004d98 <HAL_TIM_Base_Start_IT>
        }
    }
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000320 	.word	0x20000320
 8001a2c:	08008d84 	.word	0x08008d84
 8001a30:	20000298 	.word	0x20000298

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <Error_Handler+0x8>

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4a:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a50:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6213      	str	r3, [r2, #32]
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7a:	4a08      	ldr	r2, [pc, #32]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a8e:	2007      	movs	r0, #7
 8001a90:	f000 fff8 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	@ 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a15      	ldr	r2, [pc, #84]	@ (8001b14 <HAL_ADC_MspInit+0x74>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d123      	bne.n	8001b0a <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_ADC_MspInit+0x78>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a14      	ldr	r2, [pc, #80]	@ (8001b18 <HAL_ADC_MspInit+0x78>)
 8001ac8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_ADC_MspInit+0x78>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_ADC_MspInit+0x78>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	4a0e      	ldr	r2, [pc, #56]	@ (8001b18 <HAL_ADC_MspInit+0x78>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	61d3      	str	r3, [r2, #28]
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_ADC_MspInit+0x78>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001af2:	2302      	movs	r3, #2
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af6:	2303      	movs	r3, #3
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	@ (8001b1c <HAL_ADC_MspInit+0x7c>)
 8001b06:	f000 ffff 	bl	8002b08 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b0a:	bf00      	nop
 8001b0c:	3728      	adds	r7, #40	@ 0x28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40012400 	.word	0x40012400
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_I2C_MspInit+0x7c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d128      	bne.n	8001b94 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	4b17      	ldr	r3, [pc, #92]	@ (8001ba0 <HAL_I2C_MspInit+0x80>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a16      	ldr	r2, [pc, #88]	@ (8001ba0 <HAL_I2C_MspInit+0x80>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <HAL_I2C_MspInit+0x80>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	480b      	ldr	r0, [pc, #44]	@ (8001ba4 <HAL_I2C_MspInit+0x84>)
 8001b78:	f000 ffc6 	bl	8002b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <HAL_I2C_MspInit+0x80>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <HAL_I2C_MspInit+0x80>)
 8001b82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b86:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_I2C_MspInit+0x80>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	@ 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400

08001ba8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <HAL_TIM_Base_MspInit+0x44>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d113      	bne.n	8001be2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x48>)
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x48>)
 8001bc0:	f043 0302 	orr.w	r3, r3, #2
 8001bc4:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x48>)
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	201d      	movs	r0, #29
 8001bd8:	f000 ff5f 	bl	8002a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bdc:	201d      	movs	r0, #29
 8001bde:	f000 ff78 	bl	8002ad2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a17      	ldr	r2, [pc, #92]	@ (8001c70 <HAL_UART_MspInit+0x7c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d127      	bne.n	8001c66 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c16:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <HAL_UART_MspInit+0x80>)
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <HAL_UART_MspInit+0x80>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <HAL_UART_MspInit+0x80>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_UART_MspInit+0x80>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <HAL_UART_MspInit+0x80>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	61d3      	str	r3, [r2, #28]
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <HAL_UART_MspInit+0x80>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c46:	230c      	movs	r3, #12
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c56:	2307      	movs	r3, #7
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <HAL_UART_MspInit+0x84>)
 8001c62:	f000 ff51 	bl	8002b08 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c66:	bf00      	nop
 8001c68:	3728      	adds	r7, #40	@ 0x28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40004400 	.word	0x40004400
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <NMI_Handler+0x4>

08001c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <HardFault_Handler+0x4>

08001c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <MemManage_Handler+0x4>

08001c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <BusFault_Handler+0x4>

08001c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <UsageFault_Handler+0x4>

08001ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ccc:	f000 f958 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cd8:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <TIM3_IRQHandler+0x10>)
 8001cda:	f003 f8af 	bl	8004e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000298 	.word	0x20000298

08001ce8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001cec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001cf0:	f001 f8b2 	bl	8002e58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cf4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cf8:	f001 f8ae 	bl	8002e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return 1;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr

08001d0e <_kill>:

int _kill(int pid, int sig)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d18:	f004 fbc0 	bl	800649c <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2216      	movs	r2, #22
 8001d20:	601a      	str	r2, [r3, #0]
  return -1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_exit>:

void _exit (int status)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d36:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffe7 	bl	8001d0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <_exit+0x12>

08001d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e00a      	b.n	8001d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d56:	f3af 8000 	nop.w
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	b2ca      	uxtb	r2, r1
 8001d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf0      	blt.n	8001d56 <_read+0x12>
  }

  return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e009      	b.n	8001da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	60ba      	str	r2, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fd19 	bl	80017d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	dbf1      	blt.n	8001d90 <_write+0x12>
  }
  return len;
 8001dac:	687b      	ldr	r3, [r7, #4]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_close>:

int _close(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ddc:	605a      	str	r2, [r3, #4]
  return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <_isatty>:

int _isatty(int file)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr

08001dfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
	...

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	@ (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f004 fb28 	bl	800649c <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20014000 	.word	0x20014000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	20000324 	.word	0x20000324
 8001e80:	20000478 	.word	0x20000478

08001e84 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e90:	f7ff fff8 	bl	8001e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480b      	ldr	r0, [pc, #44]	@ (8001ec4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e96:	490c      	ldr	r1, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ed0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001eac:	4c09      	ldr	r4, [pc, #36]	@ (8001ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eba:	f004 faf5 	bl	80064a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ebe:	f7ff fa7f 	bl	80013c0 <main>
  bx lr
 8001ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ecc:	08009174 	.word	0x08009174
  ldr r2, =_sbss
 8001ed0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ed4:	20000478 	.word	0x20000478

08001ed8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_IRQHandler>

08001eda <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 fdcd 	bl	8002a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f80e 	bl	8001f0c <HAL_InitTick>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	e001      	b.n	8001f00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001efc:	f7ff fda0 	bl	8001a40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_InitTick+0x68>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d022      	beq.n	8001f66 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f20:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_InitTick+0x6c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_InitTick+0x68>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fdda 	bl	8002aee <HAL_SYSTICK_Config>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10f      	bne.n	8001f60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	d809      	bhi.n	8001f5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f46:	2200      	movs	r2, #0
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f4e:	f000 fda4 	bl	8002a9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_InitTick+0x70>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e007      	b.n	8001f6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
 8001f5e:	e004      	b.n	8001f6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	73fb      	strb	r3, [r7, #15]
 8001f64:	e001      	b.n	8001f6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000008 	.word	0x20000008
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_IncTick+0x1c>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_IncTick+0x20>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a03      	ldr	r2, [pc, #12]	@ (8001f9c <HAL_IncTick+0x1c>)
 8001f90:	6013      	str	r3, [r2, #0]
}
 8001f92:	bf00      	nop
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000328 	.word	0x20000328
 8001fa0:	20000008 	.word	0x20000008

08001fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <HAL_GetTick+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	20000328 	.word	0x20000328

08001fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fff0 	bl	8001fa4 <HAL_GetTick>
 8001fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fd0:	d004      	beq.n	8001fdc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <HAL_Delay+0x40>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fdc:	bf00      	nop
 8001fde:	f7ff ffe1 	bl	8001fa4 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d8f7      	bhi.n	8001fde <HAL_Delay+0x26>
  {
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000008 	.word	0x20000008

08001ffc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	@ 0x38
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e127      	b.n	800226c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d115      	bne.n	8002056 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002038:	4b8e      	ldr	r3, [pc, #568]	@ (8002274 <HAL_ADC_Init+0x278>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a8d      	ldr	r2, [pc, #564]	@ (8002274 <HAL_ADC_Init+0x278>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	4b8b      	ldr	r3, [pc, #556]	@ (8002274 <HAL_ADC_Init+0x278>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fd25 	bl	8001aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80ff 	bne.w	8002262 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002068:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800206c:	f023 0302 	bic.w	r3, r3, #2
 8002070:	f043 0202 	orr.w	r2, r3, #2
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002078:	4b7f      	ldr	r3, [pc, #508]	@ (8002278 <HAL_ADC_Init+0x27c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	497c      	ldr	r1, [pc, #496]	@ (8002278 <HAL_ADC_Init+0x27c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002092:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800209a:	4619      	mov	r1, r3
 800209c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020a0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80020b6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80020bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020c4:	4619      	mov	r1, r3
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80020de:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80020e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020e2:	4313      	orrs	r3, r2
 80020e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d007      	beq.n	80020fe <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80020f6:	4313      	orrs	r3, r2
 80020f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020fa:	4313      	orrs	r3, r2
 80020fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002108:	2b40      	cmp	r3, #64	@ 0x40
 800210a:	d04f      	beq.n	80021ac <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002112:	4313      	orrs	r3, r2
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800211e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6912      	ldr	r2, [r2, #16]
 8002124:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002128:	d003      	beq.n	8002132 <HAL_ADC_Init+0x136>
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6912      	ldr	r2, [r2, #16]
 800212e:	2a01      	cmp	r2, #1
 8002130:	d102      	bne.n	8002138 <HAL_ADC_Init+0x13c>
 8002132:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002136:	e000      	b.n	800213a <HAL_ADC_Init+0x13e>
 8002138:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800213a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800213c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800213e:	4313      	orrs	r3, r2
 8002140:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002148:	2b01      	cmp	r3, #1
 800214a:	d125      	bne.n	8002198 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002152:	2b00      	cmp	r3, #0
 8002154:	d114      	bne.n	8002180 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	3b01      	subs	r3, #1
 800215c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002160:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	fa92 f2a2 	rbit	r2, r2
 8002168:	617a      	str	r2, [r7, #20]
  return result;
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	fab2 f282 	clz	r2, r2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4093      	lsls	r3, r2
 8002174:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800217a:	4313      	orrs	r3, r2
 800217c:	633b      	str	r3, [r7, #48]	@ 0x30
 800217e:	e00b      	b.n	8002198 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002184:	f043 0220 	orr.w	r2, r3, #32
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4b37      	ldr	r3, [pc, #220]	@ (800227c <HAL_ADC_Init+0x280>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	4b33      	ldr	r3, [pc, #204]	@ (8002280 <HAL_ADC_Init+0x284>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021bc:	430b      	orrs	r3, r1
 80021be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021c8:	d003      	beq.n	80021d2 <HAL_ADC_Init+0x1d6>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d119      	bne.n	8002206 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80021e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	fa92 f2a2 	rbit	r2, r2
 80021ee:	60fa      	str	r2, [r7, #12]
  return result;
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	fa03 f202 	lsl.w	r2, r3, r2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	631a      	str	r2, [r3, #48]	@ 0x30
 8002204:	e007      	b.n	8002216 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_ADC_Init+0x288>)
 800221e:	4013      	ands	r3, r2
 8002220:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002222:	429a      	cmp	r2, r3
 8002224:	d10b      	bne.n	800223e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	f023 0303 	bic.w	r3, r3, #3
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800223c:	e014      	b.n	8002268 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002242:	f023 0312 	bic.w	r3, r3, #18
 8002246:	f043 0210 	orr.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002260:	e002      	b.n	8002268 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002268:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800226c:	4618      	mov	r0, r3
 800226e:	3738      	adds	r7, #56	@ 0x38
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	40012700 	.word	0x40012700
 800227c:	fcfc16ff 	.word	0xfcfc16ff
 8002280:	c0fff189 	.word	0xc0fff189
 8002284:	bf80fffe 	.word	0xbf80fffe

08002288 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADC_Start+0x1a>
 800229e:	2302      	movs	r3, #2
 80022a0:	e04e      	b.n	8002340 <HAL_ADC_Start+0xb8>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa80 	bl	80027b0 <ADC_Enable>
 80022b0:	4603      	mov	r3, r0
 80022b2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d141      	bne.n	800233e <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022e4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022f8:	d106      	bne.n	8002308 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022fe:	f023 0206 	bic.w	r2, r3, #6
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	651a      	str	r2, [r3, #80]	@ 0x50
 8002306:	e002      	b.n	800230e <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800231e:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800233c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002350:	2300      	movs	r3, #0
 8002352:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ADC_Stop+0x1a>
 800235e:	2302      	movs	r3, #2
 8002360:	e01a      	b.n	8002398 <HAL_ADC_Stop+0x50>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 fa7c 	bl	8002868 <ADC_ConversionStop_Disable>
 8002370:	4603      	mov	r3, r0
 8002372:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023bc:	d113      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023cc:	d10b      	bne.n	80023e6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	f043 0220 	orr.w	r2, r3, #32
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e068      	b.n	80024b8 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023e6:	f7ff fddd 	bl	8001fa4 <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023ec:	e021      	b.n	8002432 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023f4:	d01d      	beq.n	8002432 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d007      	beq.n	800240c <HAL_ADC_PollForConversion+0x6c>
 80023fc:	f7ff fdd2 	bl	8001fa4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d212      	bcs.n	8002432 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10b      	bne.n	8002432 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241e:	f043 0204 	orr.w	r2, r3, #4
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e042      	b.n	80024b8 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0d6      	beq.n	80023ee <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0212 	mvn.w	r2, #18
 8002450:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d124      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d11f      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247c:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002480:	2b00      	cmp	r3, #0
 8002482:	d006      	beq.n	8002492 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800248e:	2b00      	cmp	r3, #0
 8002490:	d111      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	f043 0201 	orr.w	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x20>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e14f      	b.n	8002798 <HAL_ADC_ConfigChannel+0x2c0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b06      	cmp	r3, #6
 8002506:	d81c      	bhi.n	8002542 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	3b05      	subs	r3, #5
 800251a:	221f      	movs	r2, #31
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	4019      	ands	r1, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b05      	subs	r3, #5
 8002534:	fa00 f203 	lsl.w	r2, r0, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002540:	e07e      	b.n	8002640 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d81c      	bhi.n	8002584 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	3b23      	subs	r3, #35	@ 0x23
 800255c:	221f      	movs	r2, #31
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	4019      	ands	r1, r3
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	3b23      	subs	r3, #35	@ 0x23
 8002576:	fa00 f203 	lsl.w	r2, r0, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002582:	e05d      	b.n	8002640 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b12      	cmp	r3, #18
 800258a:	d81c      	bhi.n	80025c6 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	3b41      	subs	r3, #65	@ 0x41
 800259e:	221f      	movs	r2, #31
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	4019      	ands	r1, r3
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b41      	subs	r3, #65	@ 0x41
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80025c4:	e03c      	b.n	8002640 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b18      	cmp	r3, #24
 80025cc:	d81c      	bhi.n	8002608 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	3b5f      	subs	r3, #95	@ 0x5f
 80025e0:	221f      	movs	r2, #31
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4019      	ands	r1, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3b5f      	subs	r3, #95	@ 0x5f
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	635a      	str	r2, [r3, #52]	@ 0x34
 8002606:	e01b      	b.n	8002640 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	3b7d      	subs	r3, #125	@ 0x7d
 800261a:	221f      	movs	r2, #31
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	3b7d      	subs	r3, #125	@ 0x7d
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d81a      	bhi.n	800267e <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6959      	ldr	r1, [r3, #20]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	2207      	movs	r2, #7
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	4019      	ands	r1, r3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6898      	ldr	r0, [r3, #8]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	fa00 f203 	lsl.w	r2, r0, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	615a      	str	r2, [r3, #20]
 800267c:	e05d      	b.n	800273a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b13      	cmp	r3, #19
 8002684:	d81c      	bhi.n	80026c0 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6919      	ldr	r1, [r3, #16]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	3b1e      	subs	r3, #30
 8002698:	2207      	movs	r2, #7
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	4019      	ands	r1, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6898      	ldr	r0, [r3, #8]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	3b1e      	subs	r3, #30
 80026b2:	fa00 f203 	lsl.w	r2, r0, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	e03c      	b.n	800273a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b1d      	cmp	r3, #29
 80026c6:	d81c      	bhi.n	8002702 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68d9      	ldr	r1, [r3, #12]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	3b3c      	subs	r3, #60	@ 0x3c
 80026da:	2207      	movs	r2, #7
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4019      	ands	r1, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	6898      	ldr	r0, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	3b3c      	subs	r3, #60	@ 0x3c
 80026f4:	fa00 f203 	lsl.w	r2, r0, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	e01b      	b.n	800273a <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	3b5a      	subs	r3, #90	@ 0x5a
 8002714:	2207      	movs	r2, #7
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	4019      	ands	r1, r3
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6898      	ldr	r0, [r3, #8]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	3b5a      	subs	r3, #90	@ 0x5a
 800272e:	fa00 f203 	lsl.w	r2, r0, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d003      	beq.n	800274a <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002746:	2b11      	cmp	r3, #17
 8002748:	d121      	bne.n	800278e <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800274a:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <HAL_ADC_ConfigChannel+0x2cc>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d11b      	bne.n	800278e <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002756:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <HAL_ADC_ConfigChannel+0x2cc>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <HAL_ADC_ConfigChannel+0x2cc>)
 800275c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002760:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b10      	cmp	r3, #16
 8002768:	d111      	bne.n	800278e <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800276a:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <HAL_ADC_ConfigChannel+0x2d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a0f      	ldr	r2, [pc, #60]	@ (80027ac <HAL_ADC_ConfigChannel+0x2d4>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	0c9a      	lsrs	r2, r3, #18
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002780:	e002      	b.n	8002788 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3b01      	subs	r3, #1
 8002786:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f9      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40012700 	.word	0x40012700
 80027a8:	20000000 	.word	0x20000000
 80027ac:	431bde83 	.word	0x431bde83

080027b0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ca:	2b40      	cmp	r3, #64	@ 0x40
 80027cc:	d043      	beq.n	8002856 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <ADC_Enable+0xb0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a20      	ldr	r2, [pc, #128]	@ (8002864 <ADC_Enable+0xb4>)
 80027e4:	fba2 2303 	umull	r2, r3, r2, r3
 80027e8:	0c9a      	lsrs	r2, r3, #18
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80027f2:	e002      	b.n	80027fa <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002800:	f7ff fbd0 	bl	8001fa4 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002806:	e01f      	b.n	8002848 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002808:	f7ff fbcc 	bl	8001fa4 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d918      	bls.n	8002848 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002820:	2b40      	cmp	r3, #64	@ 0x40
 8002822:	d011      	beq.n	8002848 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002828:	f043 0210 	orr.w	r2, r3, #16
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e007      	b.n	8002858 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002852:	2b40      	cmp	r3, #64	@ 0x40
 8002854:	d1d8      	bne.n	8002808 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000000 	.word	0x20000000
 8002864:	431bde83 	.word	0x431bde83

08002868 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287e:	2b40      	cmp	r3, #64	@ 0x40
 8002880:	d12e      	bne.n	80028e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002892:	f7ff fb87 	bl	8001fa4 <HAL_GetTick>
 8002896:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002898:	e01b      	b.n	80028d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 800289a:	f7ff fb83 	bl	8001fa4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d914      	bls.n	80028d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b2:	2b40      	cmp	r3, #64	@ 0x40
 80028b4:	d10d      	bne.n	80028d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e007      	b.n	80028e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028dc:	2b40      	cmp	r3, #64	@ 0x40
 80028de:	d0dc      	beq.n	800289a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291e:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <__NVIC_SetPriorityGrouping+0x44>)
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <__NVIC_GetPriorityGrouping+0x18>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	f003 0307 	and.w	r3, r3, #7
}
 8002942:	4618      	mov	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	db0b      	blt.n	800297a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4906      	ldr	r1, [pc, #24]	@ (8002984 <__NVIC_EnableIRQ+0x34>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2001      	movs	r0, #1
 8002972:	fa00 f202 	lsl.w	r2, r0, r2
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100

08002988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db0a      	blt.n	80029b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	490c      	ldr	r1, [pc, #48]	@ (80029d4 <__NVIC_SetPriority+0x4c>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	440b      	add	r3, r1
 80029ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b0:	e00a      	b.n	80029c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4908      	ldr	r1, [pc, #32]	@ (80029d8 <__NVIC_SetPriority+0x50>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3b04      	subs	r3, #4
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	761a      	strb	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	@ 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	bf28      	it	cs
 80029fa:	2304      	movcs	r3, #4
 80029fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d902      	bls.n	8002a0c <NVIC_EncodePriority+0x30>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3b03      	subs	r3, #3
 8002a0a:	e000      	b.n	8002a0e <NVIC_EncodePriority+0x32>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43d9      	mvns	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	4313      	orrs	r3, r2
         );
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a50:	d301      	bcc.n	8002a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00f      	b.n	8002a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a56:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <SysTick_Config+0x40>)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5e:	210f      	movs	r1, #15
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a64:	f7ff ff90 	bl	8002988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <SysTick_Config+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6e:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <SysTick_Config+0x40>)
 8002a70:	2207      	movs	r2, #7
 8002a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000e010 	.word	0xe000e010

08002a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff2d 	bl	80028ec <__NVIC_SetPriorityGrouping>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aac:	f7ff ff42 	bl	8002934 <__NVIC_GetPriorityGrouping>
 8002ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff90 	bl	80029dc <NVIC_EncodePriority>
 8002abc:	4602      	mov	r2, r0
 8002abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff ff5f 	bl	8002988 <__NVIC_SetPriority>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff35 	bl	8002950 <__NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa2 	bl	8002a40 <SysTick_Config>
 8002afc:	4603      	mov	r3, r0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b1e:	e160      	b.n	8002de2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	2101      	movs	r1, #1
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8152 	beq.w	8002ddc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d005      	beq.n	8002b50 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d130      	bne.n	8002bb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002b86:	2201      	movs	r2, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f003 0201 	and.w	r2, r3, #1
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d017      	beq.n	8002bee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d123      	bne.n	8002c42 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	08da      	lsrs	r2, r3, #3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3208      	adds	r2, #8
 8002c3c:	6939      	ldr	r1, [r7, #16]
 8002c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 0203 	and.w	r2, r3, #3
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80ac 	beq.w	8002ddc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c84:	4b5e      	ldr	r3, [pc, #376]	@ (8002e00 <HAL_GPIO_Init+0x2f8>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a5d      	ldr	r2, [pc, #372]	@ (8002e00 <HAL_GPIO_Init+0x2f8>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	4b5b      	ldr	r3, [pc, #364]	@ (8002e00 <HAL_GPIO_Init+0x2f8>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]
 8002c9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c9c:	4a59      	ldr	r2, [pc, #356]	@ (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a51      	ldr	r2, [pc, #324]	@ (8002e08 <HAL_GPIO_Init+0x300>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d025      	beq.n	8002d14 <HAL_GPIO_Init+0x20c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a50      	ldr	r2, [pc, #320]	@ (8002e0c <HAL_GPIO_Init+0x304>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d01f      	beq.n	8002d10 <HAL_GPIO_Init+0x208>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8002e10 <HAL_GPIO_Init+0x308>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d019      	beq.n	8002d0c <HAL_GPIO_Init+0x204>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a4e      	ldr	r2, [pc, #312]	@ (8002e14 <HAL_GPIO_Init+0x30c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <HAL_GPIO_Init+0x200>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a4d      	ldr	r2, [pc, #308]	@ (8002e18 <HAL_GPIO_Init+0x310>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00d      	beq.n	8002d04 <HAL_GPIO_Init+0x1fc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a4c      	ldr	r2, [pc, #304]	@ (8002e1c <HAL_GPIO_Init+0x314>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <HAL_GPIO_Init+0x1f8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a4b      	ldr	r2, [pc, #300]	@ (8002e20 <HAL_GPIO_Init+0x318>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_GPIO_Init+0x1f4>
 8002cf8:	2306      	movs	r3, #6
 8002cfa:	e00c      	b.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	e00a      	b.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002d00:	2305      	movs	r3, #5
 8002d02:	e008      	b.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002d04:	2304      	movs	r3, #4
 8002d06:	e006      	b.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e004      	b.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e002      	b.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <HAL_GPIO_Init+0x20e>
 8002d14:	2300      	movs	r3, #0
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	f002 0203 	and.w	r2, r2, #3
 8002d1c:	0092      	lsls	r2, r2, #2
 8002d1e:	4093      	lsls	r3, r2
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d26:	4937      	ldr	r1, [pc, #220]	@ (8002e04 <HAL_GPIO_Init+0x2fc>)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	089b      	lsrs	r3, r3, #2
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d34:	4b3b      	ldr	r3, [pc, #236]	@ (8002e24 <HAL_GPIO_Init+0x31c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d58:	4a32      	ldr	r2, [pc, #200]	@ (8002e24 <HAL_GPIO_Init+0x31c>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d5e:	4b31      	ldr	r3, [pc, #196]	@ (8002e24 <HAL_GPIO_Init+0x31c>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d82:	4a28      	ldr	r2, [pc, #160]	@ (8002e24 <HAL_GPIO_Init+0x31c>)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d88:	4b26      	ldr	r3, [pc, #152]	@ (8002e24 <HAL_GPIO_Init+0x31c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dac:	4a1d      	ldr	r2, [pc, #116]	@ (8002e24 <HAL_GPIO_Init+0x31c>)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <HAL_GPIO_Init+0x31c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dd6:	4a13      	ldr	r2, [pc, #76]	@ (8002e24 <HAL_GPIO_Init+0x31c>)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f ae97 	bne.w	8002b20 <HAL_GPIO_Init+0x18>
  }
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	371c      	adds	r7, #28
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40010000 	.word	0x40010000
 8002e08:	40020000 	.word	0x40020000
 8002e0c:	40020400 	.word	0x40020400
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020c00 	.word	0x40020c00
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40021400 	.word	0x40021400
 8002e20:	40021800 	.word	0x40021800
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	807b      	strh	r3, [r7, #2]
 8002e34:	4613      	mov	r3, r2
 8002e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e38:	787b      	ldrb	r3, [r7, #1]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e3e:	887a      	ldrh	r2, [r7, #2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002e44:	e003      	b.n	8002e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	041a      	lsls	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	619a      	str	r2, [r3, #24]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e62:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e6e:	4a05      	ldr	r2, [pc, #20]	@ (8002e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe fdbc 	bl	80019f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40010400 	.word	0x40010400

08002e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e12b      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe fe36 	bl	8001b20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2224      	movs	r2, #36	@ 0x24
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eec:	f001 fe8c 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a81      	ldr	r2, [pc, #516]	@ (80030fc <HAL_I2C_Init+0x274>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d807      	bhi.n	8002f0c <HAL_I2C_Init+0x84>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a80      	ldr	r2, [pc, #512]	@ (8003100 <HAL_I2C_Init+0x278>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e006      	b.n	8002f1a <HAL_I2C_Init+0x92>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003104 <HAL_I2C_Init+0x27c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	bf94      	ite	ls
 8002f14:	2301      	movls	r3, #1
 8002f16:	2300      	movhi	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0e7      	b.n	80030f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a78      	ldr	r2, [pc, #480]	@ (8003108 <HAL_I2C_Init+0x280>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9b      	lsrs	r3, r3, #18
 8002f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68ba      	ldr	r2, [r7, #8]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a6a      	ldr	r2, [pc, #424]	@ (80030fc <HAL_I2C_Init+0x274>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d802      	bhi.n	8002f5c <HAL_I2C_Init+0xd4>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	e009      	b.n	8002f70 <HAL_I2C_Init+0xe8>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a69      	ldr	r2, [pc, #420]	@ (800310c <HAL_I2C_Init+0x284>)
 8002f68:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6c:	099b      	lsrs	r3, r3, #6
 8002f6e:	3301      	adds	r3, #1
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	495c      	ldr	r1, [pc, #368]	@ (80030fc <HAL_I2C_Init+0x274>)
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	d819      	bhi.n	8002fc4 <HAL_I2C_Init+0x13c>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e59      	subs	r1, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_I2C_Init+0x138>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1e59      	subs	r1, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbe:	e051      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	e04f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <HAL_I2C_Init+0x168>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e012      	b.n	8003016 <HAL_I2C_Init+0x18e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	1e58      	subs	r0, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	0099      	lsls	r1, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	fbb0 f3f3 	udiv	r3, r0, r3
 8003006:	3301      	adds	r3, #1
 8003008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Init+0x196>
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10e      	bne.n	8003044 <HAL_I2C_Init+0x1bc>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1e58      	subs	r0, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6859      	ldr	r1, [r3, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	440b      	add	r3, r1
 8003034:	fbb0 f3f3 	udiv	r3, r0, r3
 8003038:	3301      	adds	r3, #1
 800303a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003042:	e00f      	b.n	8003064 <HAL_I2C_Init+0x1dc>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	0099      	lsls	r1, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	6809      	ldr	r1, [r1, #0]
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003092:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6911      	ldr	r1, [r2, #16]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68d2      	ldr	r2, [r2, #12]
 800309e:	4311      	orrs	r1, r2
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	000186a0 	.word	0x000186a0
 8003100:	001e847f 	.word	0x001e847f
 8003104:	003d08ff 	.word	0x003d08ff
 8003108:	431bde83 	.word	0x431bde83
 800310c:	10624dd3 	.word	0x10624dd3

08003110 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	4608      	mov	r0, r1
 800311a:	4611      	mov	r1, r2
 800311c:	461a      	mov	r2, r3
 800311e:	4603      	mov	r3, r0
 8003120:	817b      	strh	r3, [r7, #10]
 8003122:	460b      	mov	r3, r1
 8003124:	813b      	strh	r3, [r7, #8]
 8003126:	4613      	mov	r3, r2
 8003128:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800312a:	f7fe ff3b 	bl	8001fa4 <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b20      	cmp	r3, #32
 800313a:	f040 80d9 	bne.w	80032f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2319      	movs	r3, #25
 8003144:	2201      	movs	r2, #1
 8003146:	496d      	ldr	r1, [pc, #436]	@ (80032fc <HAL_I2C_Mem_Write+0x1ec>)
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fdb9 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	e0cc      	b.n	80032f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_I2C_Mem_Write+0x56>
 8003162:	2302      	movs	r3, #2
 8003164:	e0c5      	b.n	80032f2 <HAL_I2C_Mem_Write+0x1e2>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b01      	cmp	r3, #1
 800317a:	d007      	beq.n	800318c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800319a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2221      	movs	r2, #33	@ 0x21
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2240      	movs	r2, #64	@ 0x40
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a3a      	ldr	r2, [r7, #32]
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80031bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a4d      	ldr	r2, [pc, #308]	@ (8003300 <HAL_I2C_Mem_Write+0x1f0>)
 80031cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ce:	88f8      	ldrh	r0, [r7, #6]
 80031d0:	893a      	ldrh	r2, [r7, #8]
 80031d2:	8979      	ldrh	r1, [r7, #10]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4603      	mov	r3, r0
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 fbf0 	bl	80039c4 <I2C_RequestMemoryWrite>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d052      	beq.n	8003290 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e081      	b.n	80032f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fe7e 	bl	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00d      	beq.n	800321a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	2b04      	cmp	r3, #4
 8003204:	d107      	bne.n	8003216 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003214:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e06b      	b.n	80032f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321e:	781a      	ldrb	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d11b      	bne.n	8003290 <HAL_I2C_Mem_Write+0x180>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	d017      	beq.n	8003290 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003264:	781a      	ldrb	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1aa      	bne.n	80031ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 fe71 	bl	8003f84 <I2C_WaitOnBTFFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d107      	bne.n	80032c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e016      	b.n	80032f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	00100002 	.word	0x00100002
 8003300:	ffff0000 	.word	0xffff0000

08003304 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08c      	sub	sp, #48	@ 0x30
 8003308:	af02      	add	r7, sp, #8
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	4608      	mov	r0, r1
 800330e:	4611      	mov	r1, r2
 8003310:	461a      	mov	r2, r3
 8003312:	4603      	mov	r3, r0
 8003314:	817b      	strh	r3, [r7, #10]
 8003316:	460b      	mov	r3, r1
 8003318:	813b      	strh	r3, [r7, #8]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800331e:	f7fe fe41 	bl	8001fa4 <HAL_GetTick>
 8003322:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b20      	cmp	r3, #32
 800332e:	f040 8214 	bne.w	800375a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2319      	movs	r3, #25
 8003338:	2201      	movs	r2, #1
 800333a:	497b      	ldr	r1, [pc, #492]	@ (8003528 <HAL_I2C_Mem_Read+0x224>)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fcbf 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003348:	2302      	movs	r3, #2
 800334a:	e207      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_I2C_Mem_Read+0x56>
 8003356:	2302      	movs	r3, #2
 8003358:	e200      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d007      	beq.n	8003380 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800338e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2222      	movs	r2, #34	@ 0x22
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2240      	movs	r2, #64	@ 0x40
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80033b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a5b      	ldr	r2, [pc, #364]	@ (800352c <HAL_I2C_Mem_Read+0x228>)
 80033c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033c2:	88f8      	ldrh	r0, [r7, #6]
 80033c4:	893a      	ldrh	r2, [r7, #8]
 80033c6:	8979      	ldrh	r1, [r7, #10]
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	4603      	mov	r3, r0
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fb8c 	bl	8003af0 <I2C_RequestMemoryRead>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1bc      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d113      	bne.n	8003412 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	623b      	str	r3, [r7, #32]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	623b      	str	r3, [r7, #32]
 80033fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e190      	b.n	8003734 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003416:	2b01      	cmp	r3, #1
 8003418:	d11b      	bne.n	8003452 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003428:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	e170      	b.n	8003734 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003456:	2b02      	cmp	r3, #2
 8003458:	d11b      	bne.n	8003492 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003468:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003478:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800347a:	2300      	movs	r3, #0
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	e150      	b.n	8003734 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034a8:	e144      	b.n	8003734 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	f200 80f1 	bhi.w	8003696 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d123      	bne.n	8003504 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fda7 	bl	8004014 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e145      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003502:	e117      	b.n	8003734 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003508:	2b02      	cmp	r3, #2
 800350a:	d14e      	bne.n	80035aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800350c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003512:	2200      	movs	r2, #0
 8003514:	4906      	ldr	r1, [pc, #24]	@ (8003530 <HAL_I2C_Mem_Read+0x22c>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fbd2 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e11a      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
 8003526:	bf00      	nop
 8003528:	00100002 	.word	0x00100002
 800352c:	ffff0000 	.word	0xffff0000
 8003530:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035a8:	e0c4      	b.n	8003734 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b0:	2200      	movs	r2, #0
 80035b2:	496c      	ldr	r1, [pc, #432]	@ (8003764 <HAL_I2C_Mem_Read+0x460>)
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fb83 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0cb      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360c:	2200      	movs	r2, #0
 800360e:	4955      	ldr	r1, [pc, #340]	@ (8003764 <HAL_I2C_Mem_Read+0x460>)
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fb55 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e09d      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800362e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003694:	e04e      	b.n	8003734 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003698:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fcba 	bl	8004014 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e058      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d124      	bne.n	8003734 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d107      	bne.n	8003702 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003700:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003738:	2b00      	cmp	r3, #0
 800373a:	f47f aeb6 	bne.w	80034aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e000      	b.n	800375c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800375a:	2302      	movs	r3, #2
  }
}
 800375c:	4618      	mov	r0, r3
 800375e:	3728      	adds	r7, #40	@ 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	00010004 	.word	0x00010004

08003768 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	@ 0x28
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	460b      	mov	r3, r1
 8003776:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7fe fc14 	bl	8001fa4 <HAL_GetTick>
 800377c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b20      	cmp	r3, #32
 800378c:	f040 8111 	bne.w	80039b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2319      	movs	r3, #25
 8003796:	2201      	movs	r2, #1
 8003798:	4988      	ldr	r1, [pc, #544]	@ (80039bc <HAL_I2C_IsDeviceReady+0x254>)
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa90 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
 80037a8:	e104      	b.n	80039b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_I2C_IsDeviceReady+0x50>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e0fd      	b.n	80039b4 <HAL_I2C_IsDeviceReady+0x24c>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d007      	beq.n	80037de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2224      	movs	r2, #36	@ 0x24
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4a70      	ldr	r2, [pc, #448]	@ (80039c0 <HAL_I2C_IsDeviceReady+0x258>)
 8003800:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003810:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fa4e 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003838:	d103      	bne.n	8003842 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003840:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e0b6      	b.n	80039b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003846:	897b      	ldrh	r3, [r7, #10]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003854:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003856:	f7fe fba5 	bl	8001fa4 <HAL_GetTick>
 800385a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003880:	bf0c      	ite	eq
 8003882:	2301      	moveq	r3, #1
 8003884:	2300      	movne	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800388a:	e025      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800388c:	f7fe fb8a 	bl	8001fa4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d302      	bcc.n	80038a2 <HAL_I2C_IsDeviceReady+0x13a>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	22a0      	movs	r2, #160	@ 0xa0
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2ba0      	cmp	r3, #160	@ 0xa0
 80038e2:	d005      	beq.n	80038f0 <HAL_I2C_IsDeviceReady+0x188>
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <HAL_I2C_IsDeviceReady+0x188>
 80038ea:	7dbb      	ldrb	r3, [r7, #22]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0cd      	beq.n	800388c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b02      	cmp	r3, #2
 8003904:	d129      	bne.n	800395a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003914:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	2319      	movs	r3, #25
 8003932:	2201      	movs	r2, #1
 8003934:	4921      	ldr	r1, [pc, #132]	@ (80039bc <HAL_I2C_IsDeviceReady+0x254>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f9c2 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e036      	b.n	80039b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e02c      	b.n	80039b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003968:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003972:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2319      	movs	r3, #25
 800397a:	2201      	movs	r2, #1
 800397c:	490f      	ldr	r1, [pc, #60]	@ (80039bc <HAL_I2C_IsDeviceReady+0x254>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 f99e 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e012      	b.n	80039b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3301      	adds	r3, #1
 8003992:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	429a      	cmp	r2, r3
 800399a:	f4ff af32 	bcc.w	8003802 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	00100002 	.word	0x00100002
 80039c0:	ffff0000 	.word	0xffff0000

080039c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	4608      	mov	r0, r1
 80039ce:	4611      	mov	r1, r2
 80039d0:	461a      	mov	r2, r3
 80039d2:	4603      	mov	r3, r0
 80039d4:	817b      	strh	r3, [r7, #10]
 80039d6:	460b      	mov	r3, r1
 80039d8:	813b      	strh	r3, [r7, #8]
 80039da:	4613      	mov	r3, r2
 80039dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f960 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a14:	d103      	bne.n	8003a1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e05f      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a22:	897b      	ldrh	r3, [r7, #10]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	6a3a      	ldr	r2, [r7, #32]
 8003a36:	492d      	ldr	r1, [pc, #180]	@ (8003aec <I2C_RequestMemoryWrite+0x128>)
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f9bb 	bl	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e04c      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a60:	6a39      	ldr	r1, [r7, #32]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fa46 	bl	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d107      	bne.n	8003a86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e02b      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
 8003a9a:	e021      	b.n	8003ae0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aac:	6a39      	ldr	r1, [r7, #32]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 fa20 	bl	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d107      	bne.n	8003ad2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e005      	b.n	8003ae2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ad6:	893b      	ldrh	r3, [r7, #8]
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	00010002 	.word	0x00010002

08003af0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	460b      	mov	r3, r1
 8003b04:	813b      	strh	r3, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f8c2 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00d      	beq.n	8003b5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b50:	d103      	bne.n	8003b5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0aa      	b.n	8003cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b5e:	897b      	ldrh	r3, [r7, #10]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	6a3a      	ldr	r2, [r7, #32]
 8003b72:	4952      	ldr	r1, [pc, #328]	@ (8003cbc <I2C_RequestMemoryRead+0x1cc>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f91d 	bl	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e097      	b.n	8003cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b84:	2300      	movs	r3, #0
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b9c:	6a39      	ldr	r1, [r7, #32]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f9a8 	bl	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00d      	beq.n	8003bc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d107      	bne.n	8003bc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e076      	b.n	8003cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d105      	bne.n	8003bd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bcc:	893b      	ldrh	r3, [r7, #8]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	611a      	str	r2, [r3, #16]
 8003bd6:	e021      	b.n	8003c1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be8:	6a39      	ldr	r1, [r7, #32]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f982 	bl	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d107      	bne.n	8003c0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e050      	b.n	8003cb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c12:	893b      	ldrh	r3, [r7, #8]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c1e:	6a39      	ldr	r1, [r7, #32]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f967 	bl	8003ef4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00d      	beq.n	8003c48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d107      	bne.n	8003c44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e035      	b.n	8003cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f82b 	bl	8003cc0 <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c7e:	d103      	bne.n	8003c88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e013      	b.n	8003cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c8c:	897b      	ldrh	r3, [r7, #10]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	6a3a      	ldr	r2, [r7, #32]
 8003ca0:	4906      	ldr	r1, [pc, #24]	@ (8003cbc <I2C_RequestMemoryRead+0x1cc>)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f886 	bl	8003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	00010002 	.word	0x00010002

08003cc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd0:	e048      	b.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cd8:	d044      	beq.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cda:	f7fe f963 	bl	8001fa4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d302      	bcc.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d139      	bne.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	0c1b      	lsrs	r3, r3, #16
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d10d      	bne.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	43da      	mvns	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	e00c      	b.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4013      	ands	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d116      	bne.n	8003d64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e023      	b.n	8003dac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10d      	bne.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	43da      	mvns	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	461a      	mov	r2, r3
 8003d88:	e00c      	b.n	8003da4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	43da      	mvns	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4013      	ands	r3, r2
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	bf0c      	ite	eq
 8003d9c:	2301      	moveq	r3, #1
 8003d9e:	2300      	movne	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	461a      	mov	r2, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d093      	beq.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc2:	e071      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dd2:	d123      	bne.n	8003e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	f043 0204 	orr.w	r2, r3, #4
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e067      	b.n	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e22:	d041      	beq.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e24:	f7fe f8be 	bl	8001fa4 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d136      	bne.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d10c      	bne.n	8003e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e00b      	b.n	8003e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	43da      	mvns	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d016      	beq.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f043 0220 	orr.w	r2, r3, #32
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e021      	b.n	8003eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	0c1b      	lsrs	r3, r3, #16
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d10c      	bne.n	8003ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e00b      	b.n	8003ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bf14      	ite	ne
 8003ede:	2301      	movne	r3, #1
 8003ee0:	2300      	moveq	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f af6d 	bne.w	8003dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f00:	e034      	b.n	8003f6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f8e3 	bl	80040ce <I2C_IsAcknowledgeFailed>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e034      	b.n	8003f7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f18:	d028      	beq.n	8003f6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fe f843 	bl	8001fa4 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d11d      	bne.n	8003f6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3a:	2b80      	cmp	r3, #128	@ 0x80
 8003f3c:	d016      	beq.n	8003f6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e007      	b.n	8003f7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f76:	2b80      	cmp	r3, #128	@ 0x80
 8003f78:	d1c3      	bne.n	8003f02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f90:	e034      	b.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f89b 	bl	80040ce <I2C_IsAcknowledgeFailed>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e034      	b.n	800400c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fa8:	d028      	beq.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fd fffb 	bl	8001fa4 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11d      	bne.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d016      	beq.n	8003ffc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e007      	b.n	800400c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b04      	cmp	r3, #4
 8004008:	d1c3      	bne.n	8003f92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004020:	e049      	b.n	80040b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b10      	cmp	r3, #16
 800402e:	d119      	bne.n	8004064 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0210 	mvn.w	r2, #16
 8004038:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e030      	b.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004064:	f7fd ff9e 	bl	8001fa4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d302      	bcc.n	800407a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d11d      	bne.n	80040b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004084:	2b40      	cmp	r3, #64	@ 0x40
 8004086:	d016      	beq.n	80040b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f043 0220 	orr.w	r2, r3, #32
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e007      	b.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b40      	cmp	r3, #64	@ 0x40
 80040c2:	d1ae      	bne.n	8004022 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e4:	d11b      	bne.n	800411e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	f043 0204 	orr.w	r2, r3, #4
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr
	...

0800412c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e31d      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800413e:	4b94      	ldr	r3, [pc, #592]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004148:	4b91      	ldr	r3, [pc, #580]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004150:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d07b      	beq.n	8004256 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b08      	cmp	r3, #8
 8004162:	d006      	beq.n	8004172 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b0c      	cmp	r3, #12
 8004168:	d10f      	bne.n	800418a <HAL_RCC_OscConfig+0x5e>
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004170:	d10b      	bne.n	800418a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004172:	4b87      	ldr	r3, [pc, #540]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d06a      	beq.n	8004254 <HAL_RCC_OscConfig+0x128>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d166      	bne.n	8004254 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e2f7      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d106      	bne.n	80041a0 <HAL_RCC_OscConfig+0x74>
 8004192:	4b7f      	ldr	r3, [pc, #508]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7e      	ldr	r2, [pc, #504]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419c:	6013      	str	r3, [r2, #0]
 800419e:	e02d      	b.n	80041fc <HAL_RCC_OscConfig+0xd0>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCC_OscConfig+0x96>
 80041a8:	4b79      	ldr	r3, [pc, #484]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a78      	ldr	r2, [pc, #480]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b76      	ldr	r3, [pc, #472]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a75      	ldr	r2, [pc, #468]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e01c      	b.n	80041fc <HAL_RCC_OscConfig+0xd0>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0xb8>
 80041ca:	4b71      	ldr	r3, [pc, #452]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a70      	ldr	r2, [pc, #448]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6d      	ldr	r2, [pc, #436]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0xd0>
 80041e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a69      	ldr	r2, [pc, #420]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b67      	ldr	r3, [pc, #412]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a66      	ldr	r2, [pc, #408]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80041f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d013      	beq.n	800422c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fd fece 	bl	8001fa4 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800420c:	f7fd feca 	bl	8001fa4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	@ 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e2ad      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800421e:	4b5c      	ldr	r3, [pc, #368]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0xe0>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd feba 	bl	8001fa4 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004234:	f7fd feb6 	bl	8001fa4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e299      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004246:	4b52      	ldr	r3, [pc, #328]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x108>
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d05a      	beq.n	8004318 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d005      	beq.n	8004274 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2b0c      	cmp	r3, #12
 800426c:	d119      	bne.n	80042a2 <HAL_RCC_OscConfig+0x176>
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d116      	bne.n	80042a2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004274:	4b46      	ldr	r3, [pc, #280]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCC_OscConfig+0x160>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e276      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428c:	4b40      	ldr	r3, [pc, #256]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	493d      	ldr	r1, [pc, #244]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a0:	e03a      	b.n	8004318 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d020      	beq.n	80042ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004394 <HAL_RCC_OscConfig+0x268>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b0:	f7fd fe78 	bl	8001fa4 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042b8:	f7fd fe74 	bl	8001fa4 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e257      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042ca:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b2e      	ldr	r3, [pc, #184]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	492a      	ldr	r1, [pc, #168]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	604b      	str	r3, [r1, #4]
 80042ea:	e015      	b.n	8004318 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ec:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <HAL_RCC_OscConfig+0x268>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fd fe57 	bl	8001fa4 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fa:	f7fd fe53 	bl	8001fa4 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e236      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800430c:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80b8 	beq.w	8004496 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d170      	bne.n	800440e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800432c:	4b18      	ldr	r3, [pc, #96]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_OscConfig+0x218>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d101      	bne.n	8004344 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e21a      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004350:	429a      	cmp	r2, r3
 8004352:	d921      	bls.n	8004398 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fc7d 	bl	8004c58 <RCC_SetFlashLatencyFromMSIRange>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e208      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004368:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4906      	ldr	r1, [pc, #24]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800437a:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	4901      	ldr	r1, [pc, #4]	@ (8004390 <HAL_RCC_OscConfig+0x264>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
 800438e:	e020      	b.n	80043d2 <HAL_RCC_OscConfig+0x2a6>
 8004390:	40023800 	.word	0x40023800
 8004394:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004398:	4b99      	ldr	r3, [pc, #612]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4996      	ldr	r1, [pc, #600]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043aa:	4b95      	ldr	r3, [pc, #596]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	061b      	lsls	r3, r3, #24
 80043b8:	4991      	ldr	r1, [pc, #580]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fc48 	bl	8004c58 <RCC_SetFlashLatencyFromMSIRange>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e1d3      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	0b5b      	lsrs	r3, r3, #13
 80043d8:	3301      	adds	r3, #1
 80043da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80043e2:	4a87      	ldr	r2, [pc, #540]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80043e4:	6892      	ldr	r2, [r2, #8]
 80043e6:	0912      	lsrs	r2, r2, #4
 80043e8:	f002 020f 	and.w	r2, r2, #15
 80043ec:	4985      	ldr	r1, [pc, #532]	@ (8004604 <HAL_RCC_OscConfig+0x4d8>)
 80043ee:	5c8a      	ldrb	r2, [r1, r2]
 80043f0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043f2:	4a85      	ldr	r2, [pc, #532]	@ (8004608 <HAL_RCC_OscConfig+0x4dc>)
 80043f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043f6:	4b85      	ldr	r3, [pc, #532]	@ (800460c <HAL_RCC_OscConfig+0x4e0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd fd86 	bl	8001f0c <HAL_InitTick>
 8004400:	4603      	mov	r3, r0
 8004402:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d045      	beq.n	8004496 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	e1b5      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d029      	beq.n	800446a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004416:	4b7e      	ldr	r3, [pc, #504]	@ (8004610 <HAL_RCC_OscConfig+0x4e4>)
 8004418:	2201      	movs	r2, #1
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fd fdc2 	bl	8001fa4 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004424:	f7fd fdbe 	bl	8001fa4 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e1a1      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004436:	4b72      	ldr	r3, [pc, #456]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004442:	4b6f      	ldr	r3, [pc, #444]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	496c      	ldr	r1, [pc, #432]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004454:	4b6a      	ldr	r3, [pc, #424]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	4967      	ldr	r1, [pc, #412]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004464:	4313      	orrs	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
 8004468:	e015      	b.n	8004496 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800446a:	4b69      	ldr	r3, [pc, #420]	@ (8004610 <HAL_RCC_OscConfig+0x4e4>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fd fd98 	bl	8001fa4 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004478:	f7fd fd94 	bl	8001fa4 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e177      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800448a:	4b5d      	ldr	r3, [pc, #372]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d030      	beq.n	8004504 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004614 <HAL_RCC_OscConfig+0x4e8>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b0:	f7fd fd78 	bl	8001fa4 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b8:	f7fd fd74 	bl	8001fa4 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e157      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044ca:	4b4d      	ldr	r3, [pc, #308]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80044cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x38c>
 80044d6:	e015      	b.n	8004504 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004614 <HAL_RCC_OscConfig+0x4e8>)
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044de:	f7fd fd61 	bl	8001fa4 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044e4:	e008      	b.n	80044f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e6:	f7fd fd5d 	bl	8001fa4 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e140      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044f8:	4b41      	ldr	r3, [pc, #260]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80044fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1f0      	bne.n	80044e6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80b5 	beq.w	800467c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004512:	2300      	movs	r3, #0
 8004514:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004516:	4b3a      	ldr	r3, [pc, #232]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10d      	bne.n	800453e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004522:	4b37      	ldr	r3, [pc, #220]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	4a36      	ldr	r2, [pc, #216]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800452c:	6253      	str	r3, [r2, #36]	@ 0x24
 800452e:	4b34      	ldr	r3, [pc, #208]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453a:	2301      	movs	r3, #1
 800453c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <HAL_RCC_OscConfig+0x4ec>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d118      	bne.n	800457c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b33      	ldr	r3, [pc, #204]	@ (8004618 <HAL_RCC_OscConfig+0x4ec>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a32      	ldr	r2, [pc, #200]	@ (8004618 <HAL_RCC_OscConfig+0x4ec>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7fd fd25 	bl	8001fa4 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455e:	f7fd fd21 	bl	8001fa4 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	@ 0x64
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e104      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b29      	ldr	r3, [pc, #164]	@ (8004618 <HAL_RCC_OscConfig+0x4ec>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x466>
 8004584:	4b1e      	ldr	r3, [pc, #120]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 8004586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004588:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 800458a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800458e:	6353      	str	r3, [r2, #52]	@ 0x34
 8004590:	e02d      	b.n	80045ee <HAL_RCC_OscConfig+0x4c2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x488>
 800459a:	4b19      	ldr	r3, [pc, #100]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 800459c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459e:	4a18      	ldr	r2, [pc, #96]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80045a6:	4b16      	ldr	r3, [pc, #88]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045aa:	4a15      	ldr	r2, [pc, #84]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80045b2:	e01c      	b.n	80045ee <HAL_RCC_OscConfig+0x4c2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b05      	cmp	r3, #5
 80045ba:	d10c      	bne.n	80045d6 <HAL_RCC_OscConfig+0x4aa>
 80045bc:	4b10      	ldr	r3, [pc, #64]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80045c8:	4b0d      	ldr	r3, [pc, #52]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80045d4:	e00b      	b.n	80045ee <HAL_RCC_OscConfig+0x4c2>
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045da:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045e0:	6353      	str	r3, [r2, #52]	@ 0x34
 80045e2:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e6:	4a06      	ldr	r2, [pc, #24]	@ (8004600 <HAL_RCC_OscConfig+0x4d4>)
 80045e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045ec:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d024      	beq.n	8004640 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fd fcd5 	bl	8001fa4 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045fc:	e019      	b.n	8004632 <HAL_RCC_OscConfig+0x506>
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	08008db8 	.word	0x08008db8
 8004608:	20000000 	.word	0x20000000
 800460c:	20000004 	.word	0x20000004
 8004610:	42470020 	.word	0x42470020
 8004614:	42470680 	.word	0x42470680
 8004618:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fd fcc2 	bl	8001fa4 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e0a3      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004632:	4b54      	ldr	r3, [pc, #336]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 8004634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004636:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0ee      	beq.n	800461c <HAL_RCC_OscConfig+0x4f0>
 800463e:	e014      	b.n	800466a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004640:	f7fd fcb0 	bl	8001fa4 <HAL_GetTick>
 8004644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004646:	e00a      	b.n	800465e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004648:	f7fd fcac 	bl	8001fa4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e08d      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800465e:	4b49      	ldr	r3, [pc, #292]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 8004660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004662:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ee      	bne.n	8004648 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800466a:	7ffb      	ldrb	r3, [r7, #31]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d105      	bne.n	800467c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004670:	4b44      	ldr	r3, [pc, #272]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	4a43      	ldr	r2, [pc, #268]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 8004676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800467a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	d079      	beq.n	8004778 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b0c      	cmp	r3, #12
 8004688:	d056      	beq.n	8004738 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	2b02      	cmp	r3, #2
 8004690:	d13b      	bne.n	800470a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004692:	4b3d      	ldr	r3, [pc, #244]	@ (8004788 <HAL_RCC_OscConfig+0x65c>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fd fc84 	bl	8001fa4 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fd fc80 	bl	8001fa4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e063      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046b2:	4b34      	ldr	r3, [pc, #208]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046be:	4b31      	ldr	r3, [pc, #196]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ce:	4319      	orrs	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d4:	430b      	orrs	r3, r1
 80046d6:	492b      	ldr	r1, [pc, #172]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004788 <HAL_RCC_OscConfig+0x65c>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e2:	f7fd fc5f 	bl	8001fa4 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ea:	f7fd fc5b 	bl	8001fa4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e03e      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046fc:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x5be>
 8004708:	e036      	b.n	8004778 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b1f      	ldr	r3, [pc, #124]	@ (8004788 <HAL_RCC_OscConfig+0x65c>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fd fc48 	bl	8001fa4 <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004718:	f7fd fc44 	bl	8001fa4 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e027      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800472a:	4b16      	ldr	r3, [pc, #88]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x5ec>
 8004736:	e01f      	b.n	8004778 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e01a      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004744:	4b0f      	ldr	r3, [pc, #60]	@ (8004784 <HAL_RCC_OscConfig+0x658>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	429a      	cmp	r2, r3
 8004756:	d10d      	bne.n	8004774 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d106      	bne.n	8004774 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3720      	adds	r7, #32
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	42470060 	.word	0x42470060

0800478c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e11a      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047a0:	4b8f      	ldr	r3, [pc, #572]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d919      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x34>
 80047b4:	4b8a      	ldr	r3, [pc, #552]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a89      	ldr	r2, [pc, #548]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b87      	ldr	r3, [pc, #540]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f023 0201 	bic.w	r2, r3, #1
 80047c8:	4985      	ldr	r1, [pc, #532]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d0:	4b83      	ldr	r3, [pc, #524]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d001      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0f9      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ee:	4b7d      	ldr	r3, [pc, #500]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	497a      	ldr	r1, [pc, #488]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 808e 	beq.w	800492a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	2b02      	cmp	r3, #2
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004816:	4b73      	ldr	r3, [pc, #460]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d121      	bne.n	8004866 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e0d7      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b03      	cmp	r3, #3
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800482e:	4b6d      	ldr	r3, [pc, #436]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d115      	bne.n	8004866 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e0cb      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004846:	4b67      	ldr	r3, [pc, #412]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0bf      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004856:	4b63      	ldr	r3, [pc, #396]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0b7      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b5f      	ldr	r3, [pc, #380]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	495c      	ldr	r1, [pc, #368]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004878:	f7fd fb94 	bl	8001fa4 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d112      	bne.n	80048ac <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004886:	e00a      	b.n	800489e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004888:	f7fd fb8c 	bl	8001fa4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e09b      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800489e:	4b51      	ldr	r3, [pc, #324]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d1ee      	bne.n	8004888 <HAL_RCC_ClockConfig+0xfc>
 80048aa:	e03e      	b.n	800492a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d112      	bne.n	80048da <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b6:	f7fd fb75 	bl	8001fa4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e084      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048cc:	4b45      	ldr	r3, [pc, #276]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 030c 	and.w	r3, r3, #12
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d1ee      	bne.n	80048b6 <HAL_RCC_ClockConfig+0x12a>
 80048d8:	e027      	b.n	800492a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d11d      	bne.n	800491e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e4:	f7fd fb5e 	bl	8001fa4 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e06d      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048fa:	4b3a      	ldr	r3, [pc, #232]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b04      	cmp	r3, #4
 8004904:	d1ee      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x158>
 8004906:	e010      	b.n	800492a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fd fb4c 	bl	8001fa4 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e05b      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800491e:	4b31      	ldr	r3, [pc, #196]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1ee      	bne.n	8004908 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800492a:	4b2d      	ldr	r3, [pc, #180]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d219      	bcs.n	800496c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d105      	bne.n	800494a <HAL_RCC_ClockConfig+0x1be>
 800493e:	4b28      	ldr	r3, [pc, #160]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a27      	ldr	r2, [pc, #156]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b25      	ldr	r3, [pc, #148]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 0201 	bic.w	r2, r3, #1
 8004952:	4923      	ldr	r1, [pc, #140]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b21      	ldr	r3, [pc, #132]	@ (80049e0 <HAL_RCC_ClockConfig+0x254>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e034      	b.n	80049d6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b1a      	ldr	r3, [pc, #104]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4917      	ldr	r1, [pc, #92]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004996:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490f      	ldr	r1, [pc, #60]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049aa:	f000 f823 	bl	80049f4 <HAL_RCC_GetSysClockFreq>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <HAL_RCC_ClockConfig+0x258>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	490b      	ldr	r1, [pc, #44]	@ (80049e8 <HAL_RCC_ClockConfig+0x25c>)
 80049bc:	5ccb      	ldrb	r3, [r1, r3]
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <HAL_RCC_ClockConfig+0x260>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049c6:	4b0a      	ldr	r3, [pc, #40]	@ (80049f0 <HAL_RCC_ClockConfig+0x264>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fa9e 	bl	8001f0c <HAL_InitTick>
 80049d0:	4603      	mov	r3, r0
 80049d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80049d4:	7afb      	ldrb	r3, [r7, #11]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40023c00 	.word	0x40023c00
 80049e4:	40023800 	.word	0x40023800
 80049e8:	08008db8 	.word	0x08008db8
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000004 	.word	0x20000004

080049f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f8:	b092      	sub	sp, #72	@ 0x48
 80049fa:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80049fc:	4b79      	ldr	r3, [pc, #484]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d00d      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x34>
 8004a0c:	2b0c      	cmp	r3, #12
 8004a0e:	f200 80d5 	bhi.w	8004bbc <HAL_RCC_GetSysClockFreq+0x1c8>
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d002      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x28>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x2e>
 8004a1a:	e0cf      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b72      	ldr	r3, [pc, #456]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004a1e:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004a20:	e0da      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a22:	4b72      	ldr	r3, [pc, #456]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004a24:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004a26:	e0d7      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a2a:	0c9b      	lsrs	r3, r3, #18
 8004a2c:	f003 020f 	and.w	r2, r3, #15
 8004a30:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a32:	5c9b      	ldrb	r3, [r3, r2]
 8004a34:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a38:	0d9b      	lsrs	r3, r3, #22
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a42:	4b68      	ldr	r3, [pc, #416]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d05d      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a50:	2200      	movs	r2, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	4611      	mov	r1, r2
 8004a56:	4604      	mov	r4, r0
 8004a58:	460d      	mov	r5, r1
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	f04f 0000 	mov.w	r0, #0
 8004a62:	f04f 0100 	mov.w	r1, #0
 8004a66:	0159      	lsls	r1, r3, #5
 8004a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6c:	0150      	lsls	r0, r2, #5
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4621      	mov	r1, r4
 8004a74:	1a51      	subs	r1, r2, r1
 8004a76:	6139      	str	r1, [r7, #16]
 8004a78:	4629      	mov	r1, r5
 8004a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a8c:	4659      	mov	r1, fp
 8004a8e:	018b      	lsls	r3, r1, #6
 8004a90:	4651      	mov	r1, sl
 8004a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a96:	4651      	mov	r1, sl
 8004a98:	018a      	lsls	r2, r1, #6
 8004a9a:	46d4      	mov	ip, sl
 8004a9c:	ebb2 080c 	subs.w	r8, r2, ip
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aba:	4690      	mov	r8, r2
 8004abc:	4699      	mov	r9, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	eb18 0303 	adds.w	r3, r8, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	eb49 0303 	adc.w	r3, r9, r3
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ada:	4629      	mov	r1, r5
 8004adc:	024b      	lsls	r3, r1, #9
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004ae8:	4601      	mov	r1, r0
 8004aea:	024a      	lsls	r2, r1, #9
 8004aec:	4610      	mov	r0, r2
 8004aee:	4619      	mov	r1, r3
 8004af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af2:	2200      	movs	r2, #0
 8004af4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004afc:	f7fc fac6 	bl	800108c <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b08:	e055      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b12:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b16:	4642      	mov	r2, r8
 8004b18:	464b      	mov	r3, r9
 8004b1a:	f04f 0000 	mov.w	r0, #0
 8004b1e:	f04f 0100 	mov.w	r1, #0
 8004b22:	0159      	lsls	r1, r3, #5
 8004b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b28:	0150      	lsls	r0, r2, #5
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	46c4      	mov	ip, r8
 8004b30:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004b34:	4640      	mov	r0, r8
 8004b36:	4649      	mov	r1, r9
 8004b38:	468c      	mov	ip, r1
 8004b3a:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b4a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b4e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b52:	ebb2 040a 	subs.w	r4, r2, sl
 8004b56:	eb63 050b 	sbc.w	r5, r3, fp
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	00eb      	lsls	r3, r5, #3
 8004b64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b68:	00e2      	lsls	r2, r4, #3
 8004b6a:	4614      	mov	r4, r2
 8004b6c:	461d      	mov	r5, r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	18e3      	adds	r3, r4, r3
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	460b      	mov	r3, r1
 8004b76:	eb45 0303 	adc.w	r3, r5, r3
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b88:	4629      	mov	r1, r5
 8004b8a:	028b      	lsls	r3, r1, #10
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4604      	mov	r4, r0
 8004b92:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004b96:	4601      	mov	r1, r0
 8004b98:	028a      	lsls	r2, r1, #10
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	61fa      	str	r2, [r7, #28]
 8004ba6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004baa:	f7fc fa6f 	bl	800108c <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bb8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004bba:	e00d      	b.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004bbc:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	0b5b      	lsrs	r3, r3, #13
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bca:	3301      	adds	r3, #1
 8004bcc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004bd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3748      	adds	r7, #72	@ 0x48
 8004bde:	46bd      	mov	sp, r7
 8004be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	007a1200 	.word	0x007a1200
 8004bf0:	08008dac 	.word	0x08008dac

08004bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf8:	4b02      	ldr	r3, [pc, #8]	@ (8004c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	20000000 	.word	0x20000000

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff2 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	@ (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	08008dc8 	.word	0x08008dc8

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffde 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0adb      	lsrs	r3, r3, #11
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4903      	ldr	r1, [pc, #12]	@ (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	08008dc8 	.word	0x08008dc8

08004c58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c64:	4b29      	ldr	r3, [pc, #164]	@ (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d12c      	bne.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c70:	4b26      	ldr	r3, [pc, #152]	@ (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004c7c:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e016      	b.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c88:	4b20      	ldr	r3, [pc, #128]	@ (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	6253      	str	r3, [r2, #36]	@ 0x24
 8004c94:	4b1d      	ldr	r3, [pc, #116]	@ (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004ca8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004caa:	4b18      	ldr	r3, [pc, #96]	@ (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cae:	4a17      	ldr	r2, [pc, #92]	@ (8004d0c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004cbc:	d105      	bne.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004cc4:	d101      	bne.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d105      	bne.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004cd0:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a0f      	ldr	r2, [pc, #60]	@ (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f023 0201 	bic.w	r2, r3, #1
 8004ce4:	490b      	ldr	r1, [pc, #44]	@ (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cec:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d001      	beq.n	8004cfe <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	40007000 	.word	0x40007000
 8004d14:	40023c00 	.word	0x40023c00

08004d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e031      	b.n	8004d8e <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fc ff32 	bl	8001ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3304      	adds	r3, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f000 fa28 	bl	80051ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d001      	beq.n	8004db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e03a      	b.n	8004e26 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd0:	d00e      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0x58>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a16      	ldr	r2, [pc, #88]	@ (8004e30 <HAL_TIM_Base_Start_IT+0x98>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d009      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0x58>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a14      	ldr	r2, [pc, #80]	@ (8004e34 <HAL_TIM_Base_Start_IT+0x9c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_TIM_Base_Start_IT+0x58>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a13      	ldr	r2, [pc, #76]	@ (8004e38 <HAL_TIM_Base_Start_IT+0xa0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d111      	bne.n	8004e14 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d010      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e12:	e007      	b.n	8004e24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0201 	orr.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800
 8004e38:	40010800 	.word	0x40010800

08004e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d020      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0202 	mvn.w	r2, #2
 8004e70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f974 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004e8c:	e005      	b.n	8004e9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f967 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f976 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01b      	beq.n	8004eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0204 	mvn.w	r2, #4
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2202      	movs	r2, #2
 8004ec2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f94e 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f941 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f950 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d020      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01b      	beq.n	8004f38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0208 	mvn.w	r2, #8
 8004f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f928 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f91b 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f92a 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d020      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01b      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f06f 0210 	mvn.w	r2, #16
 8004f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2208      	movs	r2, #8
 8004f5a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f902 	bl	8005174 <HAL_TIM_IC_CaptureCallback>
 8004f70:	e005      	b.n	8004f7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f8f5 	bl	8005162 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f904 	bl	8005186 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0201 	mvn.w	r2, #1
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc fcb2 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00c      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f8e6 	bl	8005198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e0b4      	b.n	800515a <HAL_TIM_ConfigClockSource+0x186>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800500e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005028:	d03e      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0xd4>
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502e:	f200 8087 	bhi.w	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005036:	f000 8086 	beq.w	8005146 <HAL_TIM_ConfigClockSource+0x172>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	d87f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b70      	cmp	r3, #112	@ 0x70
 8005042:	d01a      	beq.n	800507a <HAL_TIM_ConfigClockSource+0xa6>
 8005044:	2b70      	cmp	r3, #112	@ 0x70
 8005046:	d87b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b60      	cmp	r3, #96	@ 0x60
 800504a:	d050      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x11a>
 800504c:	2b60      	cmp	r3, #96	@ 0x60
 800504e:	d877      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b50      	cmp	r3, #80	@ 0x50
 8005052:	d03c      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0xfa>
 8005054:	2b50      	cmp	r3, #80	@ 0x50
 8005056:	d873      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b40      	cmp	r3, #64	@ 0x40
 800505a:	d058      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x13a>
 800505c:	2b40      	cmp	r3, #64	@ 0x40
 800505e:	d86f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b30      	cmp	r3, #48	@ 0x30
 8005062:	d064      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	2b30      	cmp	r3, #48	@ 0x30
 8005066:	d86b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d060      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d867      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d05c      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b10      	cmp	r3, #16
 8005076:	d05a      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	e062      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	f000 f97c 	bl	8005386 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800509c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
      break;
 80050a6:	e04f      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050b8:	f000 f965 	bl	8005386 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ca:	609a      	str	r2, [r3, #8]
      break;
 80050cc:	e03c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 f8dc 	bl	8005298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2150      	movs	r1, #80	@ 0x50
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 f933 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 80050ec:	e02c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 f8fa 	bl	80052f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2160      	movs	r1, #96	@ 0x60
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f923 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 800510c:	e01c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	461a      	mov	r2, r3
 800511c:	f000 f8bc 	bl	8005298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2140      	movs	r1, #64	@ 0x40
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f913 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 800512c:	e00c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f000 f90a 	bl	8005352 <TIM_ITRx_SetConfig>
      break;
 800513e:	e003      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e000      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr

08005186 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005186:	b480      	push	{r7}
 8005188:	b083      	sub	sp, #12
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr
	...

080051ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x38>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005280 <TIM_Base_SetConfig+0xd4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x38>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a2d      	ldr	r2, [pc, #180]	@ (8005284 <TIM_Base_SetConfig+0xd8>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x38>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005288 <TIM_Base_SetConfig+0xdc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x38>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a2b      	ldr	r2, [pc, #172]	@ (800528c <TIM_Base_SetConfig+0xe0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fc:	d017      	beq.n	800522e <TIM_Base_SetConfig+0x82>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a1f      	ldr	r2, [pc, #124]	@ (8005280 <TIM_Base_SetConfig+0xd4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <TIM_Base_SetConfig+0x82>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1e      	ldr	r2, [pc, #120]	@ (8005284 <TIM_Base_SetConfig+0xd8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00f      	beq.n	800522e <TIM_Base_SetConfig+0x82>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a1d      	ldr	r2, [pc, #116]	@ (8005288 <TIM_Base_SetConfig+0xdc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00b      	beq.n	800522e <TIM_Base_SetConfig+0x82>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a1c      	ldr	r2, [pc, #112]	@ (800528c <TIM_Base_SetConfig+0xe0>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d007      	beq.n	800522e <TIM_Base_SetConfig+0x82>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a1b      	ldr	r2, [pc, #108]	@ (8005290 <TIM_Base_SetConfig+0xe4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <TIM_Base_SetConfig+0x82>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a1a      	ldr	r2, [pc, #104]	@ (8005294 <TIM_Base_SetConfig+0xe8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d108      	bne.n	8005240 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f043 0204 	orr.w	r2, r3, #4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	601a      	str	r2, [r3, #0]
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr
 8005280:	40000400 	.word	0x40000400
 8005284:	40000800 	.word	0x40000800
 8005288:	40000c00 	.word	0x40000c00
 800528c:	40010800 	.word	0x40010800
 8005290:	40010c00 	.word	0x40010c00
 8005294:	40011000 	.word	0x40011000

08005298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0201 	bic.w	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 030a 	bic.w	r3, r3, #10
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b087      	sub	sp, #28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0210 	bic.w	r2, r3, #16
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800531e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	031b      	lsls	r3, r3, #12
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005330:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	621a      	str	r2, [r3, #32]
}
 8005348:	bf00      	nop
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	f043 0307 	orr.w	r3, r3, #7
 8005374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	609a      	str	r2, [r3, #8]
}
 800537c:	bf00      	nop
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005386:	b480      	push	{r7}
 8005388:	b087      	sub	sp, #28
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	021a      	lsls	r2, r3, #8
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	609a      	str	r2, [r3, #8]
}
 80053ba:	bf00      	nop
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d8:	2302      	movs	r3, #2
 80053da:	e046      	b.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800541e:	d00e      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a13      	ldr	r2, [pc, #76]	@ (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a12      	ldr	r2, [pc, #72]	@ (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a10      	ldr	r2, [pc, #64]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10c      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4313      	orrs	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40010800 	.word	0x40010800

08005480 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e042      	b.n	8005518 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fc fba4 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2224      	movs	r2, #36	@ 0x24
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f971 	bl	80057ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691a      	ldr	r2, [r3, #16]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695a      	ldr	r2, [r3, #20]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	@ 0x28
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b20      	cmp	r3, #32
 800553e:	d175      	bne.n	800562c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_UART_Transmit+0x2c>
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e06e      	b.n	800562e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2221      	movs	r2, #33	@ 0x21
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800555e:	f7fc fd21 	bl	8001fa4 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	88fa      	ldrh	r2, [r7, #6]
 8005568:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005578:	d108      	bne.n	800558c <HAL_UART_Transmit+0x6c>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d104      	bne.n	800558c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	e003      	b.n	8005594 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005594:	e02e      	b.n	80055f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	2180      	movs	r1, #128	@ 0x80
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f848 	bl	8005636 <UART_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e03a      	b.n	800562e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	3302      	adds	r3, #2
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	e007      	b.n	80055e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	781a      	ldrb	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	3301      	adds	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1cb      	bne.n	8005596 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2200      	movs	r2, #0
 8005606:	2140      	movs	r1, #64	@ 0x40
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f814 	bl	8005636 <UART_WaitOnFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e006      	b.n	800562e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	e000      	b.n	800562e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800562c:	2302      	movs	r3, #2
  }
}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b086      	sub	sp, #24
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	603b      	str	r3, [r7, #0]
 8005642:	4613      	mov	r3, r2
 8005644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005646:	e03b      	b.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800564e:	d037      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005650:	f7fc fca8 	bl	8001fa4 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	6a3a      	ldr	r2, [r7, #32]
 800565c:	429a      	cmp	r2, r3
 800565e:	d302      	bcc.n	8005666 <UART_WaitOnFlagUntilTimeout+0x30>
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e03a      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d023      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b80      	cmp	r3, #128	@ 0x80
 800567c:	d020      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	d01d      	beq.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b08      	cmp	r3, #8
 8005690:	d116      	bne.n	80056c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f81d 	bl	80056e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2208      	movs	r2, #8
 80056b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e00f      	b.n	80056e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4013      	ands	r3, r2
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	bf0c      	ite	eq
 80056d0:	2301      	moveq	r3, #1
 80056d2:	2300      	movne	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	461a      	mov	r2, r3
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d0b4      	beq.n	8005648 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b095      	sub	sp, #84	@ 0x54
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005710:	643a      	str	r2, [r7, #64]	@ 0x40
 8005712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005716:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800571e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3314      	adds	r3, #20
 800572a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	61fb      	str	r3, [r7, #28]
   return(result);
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f023 0301 	bic.w	r3, r3, #1
 800573a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3314      	adds	r3, #20
 8005742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005744:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005746:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800574a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e5      	bne.n	8005724 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575c:	2b01      	cmp	r3, #1
 800575e:	d119      	bne.n	8005794 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	e853 3f00 	ldrex	r3, [r3]
 800576e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f023 0310 	bic.w	r3, r3, #16
 8005776:	647b      	str	r3, [r7, #68]	@ 0x44
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005780:	61ba      	str	r2, [r7, #24]
 8005782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6979      	ldr	r1, [r7, #20]
 8005786:	69ba      	ldr	r2, [r7, #24]
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	613b      	str	r3, [r7, #16]
   return(result);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e5      	bne.n	8005760 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2220      	movs	r2, #32
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80057a2:	bf00      	nop
 80057a4:	3754      	adds	r7, #84	@ 0x54
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689a      	ldr	r2, [r3, #8]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80057ec:	f023 030c 	bic.w	r3, r3, #12
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	430b      	orrs	r3, r1
 80057f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a55      	ldr	r2, [pc, #340]	@ (800596c <UART_SetConfig+0x1c0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d103      	bne.n	8005822 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800581a:	f7ff fa09 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	e002      	b.n	8005828 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005822:	f7ff f9f1 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8005826:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005830:	d14c      	bne.n	80058cc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	009a      	lsls	r2, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	4a49      	ldr	r2, [pc, #292]	@ (8005970 <UART_SetConfig+0x1c4>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	095b      	lsrs	r3, r3, #5
 8005850:	0119      	lsls	r1, r3, #4
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009a      	lsls	r2, r3, #2
 800585c:	441a      	add	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	fbb2 f2f3 	udiv	r2, r2, r3
 8005868:	4b41      	ldr	r3, [pc, #260]	@ (8005970 <UART_SetConfig+0x1c4>)
 800586a:	fba3 0302 	umull	r0, r3, r3, r2
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2064      	movs	r0, #100	@ 0x64
 8005872:	fb00 f303 	mul.w	r3, r0, r3
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	3332      	adds	r3, #50	@ 0x32
 800587c:	4a3c      	ldr	r2, [pc, #240]	@ (8005970 <UART_SetConfig+0x1c4>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800588a:	4419      	add	r1, r3
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009a      	lsls	r2, r3, #2
 8005896:	441a      	add	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	fbb2 f2f3 	udiv	r2, r2, r3
 80058a2:	4b33      	ldr	r3, [pc, #204]	@ (8005970 <UART_SetConfig+0x1c4>)
 80058a4:	fba3 0302 	umull	r0, r3, r3, r2
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	2064      	movs	r0, #100	@ 0x64
 80058ac:	fb00 f303 	mul.w	r3, r0, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	3332      	adds	r3, #50	@ 0x32
 80058b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005970 <UART_SetConfig+0x1c4>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	f003 0207 	and.w	r2, r3, #7
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	440a      	add	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058ca:	e04a      	b.n	8005962 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009a      	lsls	r2, r3, #2
 80058d6:	441a      	add	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	4a23      	ldr	r2, [pc, #140]	@ (8005970 <UART_SetConfig+0x1c4>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	095b      	lsrs	r3, r3, #5
 80058ea:	0119      	lsls	r1, r3, #4
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009a      	lsls	r2, r3, #2
 80058f6:	441a      	add	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8005902:	4b1b      	ldr	r3, [pc, #108]	@ (8005970 <UART_SetConfig+0x1c4>)
 8005904:	fba3 0302 	umull	r0, r3, r3, r2
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	2064      	movs	r0, #100	@ 0x64
 800590c:	fb00 f303 	mul.w	r3, r0, r3
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	3332      	adds	r3, #50	@ 0x32
 8005916:	4a16      	ldr	r2, [pc, #88]	@ (8005970 <UART_SetConfig+0x1c4>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005922:	4419      	add	r1, r3
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009a      	lsls	r2, r3, #2
 800592e:	441a      	add	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	fbb2 f2f3 	udiv	r2, r2, r3
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <UART_SetConfig+0x1c4>)
 800593c:	fba3 0302 	umull	r0, r3, r3, r2
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	2064      	movs	r0, #100	@ 0x64
 8005944:	fb00 f303 	mul.w	r3, r0, r3
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	3332      	adds	r3, #50	@ 0x32
 800594e:	4a08      	ldr	r2, [pc, #32]	@ (8005970 <UART_SetConfig+0x1c4>)
 8005950:	fba2 2303 	umull	r2, r3, r2, r3
 8005954:	095b      	lsrs	r3, r3, #5
 8005956:	f003 020f 	and.w	r2, r3, #15
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	440a      	add	r2, r1
 8005960:	609a      	str	r2, [r3, #8]
}
 8005962:	bf00      	nop
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40013800 	.word	0x40013800
 8005970:	51eb851f 	.word	0x51eb851f

08005974 <__cvt>:
 8005974:	2b00      	cmp	r3, #0
 8005976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800597a:	461d      	mov	r5, r3
 800597c:	bfbb      	ittet	lt
 800597e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005982:	461d      	movlt	r5, r3
 8005984:	2300      	movge	r3, #0
 8005986:	232d      	movlt	r3, #45	@ 0x2d
 8005988:	b088      	sub	sp, #32
 800598a:	4614      	mov	r4, r2
 800598c:	bfb8      	it	lt
 800598e:	4614      	movlt	r4, r2
 8005990:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005992:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005994:	7013      	strb	r3, [r2, #0]
 8005996:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005998:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800599c:	f023 0820 	bic.w	r8, r3, #32
 80059a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059a4:	d005      	beq.n	80059b2 <__cvt+0x3e>
 80059a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80059aa:	d100      	bne.n	80059ae <__cvt+0x3a>
 80059ac:	3601      	adds	r6, #1
 80059ae:	2302      	movs	r3, #2
 80059b0:	e000      	b.n	80059b4 <__cvt+0x40>
 80059b2:	2303      	movs	r3, #3
 80059b4:	aa07      	add	r2, sp, #28
 80059b6:	9204      	str	r2, [sp, #16]
 80059b8:	aa06      	add	r2, sp, #24
 80059ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80059be:	e9cd 3600 	strd	r3, r6, [sp]
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	f000 fe33 	bl	8006630 <_dtoa_r>
 80059ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059ce:	4607      	mov	r7, r0
 80059d0:	d119      	bne.n	8005a06 <__cvt+0x92>
 80059d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059d4:	07db      	lsls	r3, r3, #31
 80059d6:	d50e      	bpl.n	80059f6 <__cvt+0x82>
 80059d8:	eb00 0906 	add.w	r9, r0, r6
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	4620      	mov	r0, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	f7fa fff8 	bl	80009d8 <__aeabi_dcmpeq>
 80059e8:	b108      	cbz	r0, 80059ee <__cvt+0x7a>
 80059ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80059ee:	2230      	movs	r2, #48	@ 0x30
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	454b      	cmp	r3, r9
 80059f4:	d31e      	bcc.n	8005a34 <__cvt+0xc0>
 80059f6:	4638      	mov	r0, r7
 80059f8:	9b07      	ldr	r3, [sp, #28]
 80059fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059fc:	1bdb      	subs	r3, r3, r7
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	b008      	add	sp, #32
 8005a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a06:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005a0a:	eb00 0906 	add.w	r9, r0, r6
 8005a0e:	d1e5      	bne.n	80059dc <__cvt+0x68>
 8005a10:	7803      	ldrb	r3, [r0, #0]
 8005a12:	2b30      	cmp	r3, #48	@ 0x30
 8005a14:	d10a      	bne.n	8005a2c <__cvt+0xb8>
 8005a16:	2200      	movs	r2, #0
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	f7fa ffdb 	bl	80009d8 <__aeabi_dcmpeq>
 8005a22:	b918      	cbnz	r0, 8005a2c <__cvt+0xb8>
 8005a24:	f1c6 0601 	rsb	r6, r6, #1
 8005a28:	f8ca 6000 	str.w	r6, [sl]
 8005a2c:	f8da 3000 	ldr.w	r3, [sl]
 8005a30:	4499      	add	r9, r3
 8005a32:	e7d3      	b.n	80059dc <__cvt+0x68>
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	9107      	str	r1, [sp, #28]
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e7d9      	b.n	80059f0 <__cvt+0x7c>

08005a3c <__exponent>:
 8005a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	bfb6      	itet	lt
 8005a42:	232d      	movlt	r3, #45	@ 0x2d
 8005a44:	232b      	movge	r3, #43	@ 0x2b
 8005a46:	4249      	neglt	r1, r1
 8005a48:	2909      	cmp	r1, #9
 8005a4a:	7002      	strb	r2, [r0, #0]
 8005a4c:	7043      	strb	r3, [r0, #1]
 8005a4e:	dd29      	ble.n	8005aa4 <__exponent+0x68>
 8005a50:	f10d 0307 	add.w	r3, sp, #7
 8005a54:	461d      	mov	r5, r3
 8005a56:	270a      	movs	r7, #10
 8005a58:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	fb07 1416 	mls	r4, r7, r6, r1
 8005a62:	3430      	adds	r4, #48	@ 0x30
 8005a64:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a68:	460c      	mov	r4, r1
 8005a6a:	2c63      	cmp	r4, #99	@ 0x63
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005a72:	dcf1      	bgt.n	8005a58 <__exponent+0x1c>
 8005a74:	3130      	adds	r1, #48	@ 0x30
 8005a76:	1e94      	subs	r4, r2, #2
 8005a78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	1c41      	adds	r1, r0, #1
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	d30a      	bcc.n	8005a9a <__exponent+0x5e>
 8005a84:	f10d 0309 	add.w	r3, sp, #9
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	42ac      	cmp	r4, r5
 8005a8c:	bf88      	it	hi
 8005a8e:	2300      	movhi	r3, #0
 8005a90:	3302      	adds	r3, #2
 8005a92:	4403      	add	r3, r0
 8005a94:	1a18      	subs	r0, r3, r0
 8005a96:	b003      	add	sp, #12
 8005a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005aa2:	e7ed      	b.n	8005a80 <__exponent+0x44>
 8005aa4:	2330      	movs	r3, #48	@ 0x30
 8005aa6:	3130      	adds	r1, #48	@ 0x30
 8005aa8:	7083      	strb	r3, [r0, #2]
 8005aaa:	70c1      	strb	r1, [r0, #3]
 8005aac:	1d03      	adds	r3, r0, #4
 8005aae:	e7f1      	b.n	8005a94 <__exponent+0x58>

08005ab0 <_printf_float>:
 8005ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab4:	b091      	sub	sp, #68	@ 0x44
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005abc:	4616      	mov	r6, r2
 8005abe:	461f      	mov	r7, r3
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	f000 fd19 	bl	80064f8 <_localeconv_r>
 8005ac6:	6803      	ldr	r3, [r0, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	9308      	str	r3, [sp, #32]
 8005acc:	f7fa fb58 	bl	8000180 <strlen>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ad8:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ada:	3307      	adds	r3, #7
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	f103 0208 	add.w	r2, r3, #8
 8005ae4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ae8:	f8d4 b000 	ldr.w	fp, [r4]
 8005aec:	f8c8 2000 	str.w	r2, [r8]
 8005af0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005af4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005afa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005b0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005d7c <_printf_float+0x2cc>)
 8005b0c:	f7fa ff96 	bl	8000a3c <__aeabi_dcmpun>
 8005b10:	bb70      	cbnz	r0, 8005b70 <_printf_float+0xc0>
 8005b12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005b16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b1a:	4b98      	ldr	r3, [pc, #608]	@ (8005d7c <_printf_float+0x2cc>)
 8005b1c:	f7fa ff70 	bl	8000a00 <__aeabi_dcmple>
 8005b20:	bb30      	cbnz	r0, 8005b70 <_printf_float+0xc0>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa ff5f 	bl	80009ec <__aeabi_dcmplt>
 8005b2e:	b110      	cbz	r0, 8005b36 <_printf_float+0x86>
 8005b30:	232d      	movs	r3, #45	@ 0x2d
 8005b32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b36:	4a92      	ldr	r2, [pc, #584]	@ (8005d80 <_printf_float+0x2d0>)
 8005b38:	4b92      	ldr	r3, [pc, #584]	@ (8005d84 <_printf_float+0x2d4>)
 8005b3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b3e:	bf8c      	ite	hi
 8005b40:	4690      	movhi	r8, r2
 8005b42:	4698      	movls	r8, r3
 8005b44:	2303      	movs	r3, #3
 8005b46:	f04f 0900 	mov.w	r9, #0
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	f02b 0304 	bic.w	r3, fp, #4
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	4633      	mov	r3, r6
 8005b54:	4621      	mov	r1, r4
 8005b56:	4628      	mov	r0, r5
 8005b58:	9700      	str	r7, [sp, #0]
 8005b5a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005b5c:	f000 f9d4 	bl	8005f08 <_printf_common>
 8005b60:	3001      	adds	r0, #1
 8005b62:	f040 8090 	bne.w	8005c86 <_printf_float+0x1d6>
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b6a:	b011      	add	sp, #68	@ 0x44
 8005b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	4640      	mov	r0, r8
 8005b76:	4649      	mov	r1, r9
 8005b78:	f7fa ff60 	bl	8000a3c <__aeabi_dcmpun>
 8005b7c:	b148      	cbz	r0, 8005b92 <_printf_float+0xe2>
 8005b7e:	464b      	mov	r3, r9
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfb8      	it	lt
 8005b84:	232d      	movlt	r3, #45	@ 0x2d
 8005b86:	4a80      	ldr	r2, [pc, #512]	@ (8005d88 <_printf_float+0x2d8>)
 8005b88:	bfb8      	it	lt
 8005b8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d8c <_printf_float+0x2dc>)
 8005b90:	e7d3      	b.n	8005b3a <_printf_float+0x8a>
 8005b92:	6863      	ldr	r3, [r4, #4]
 8005b94:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	d13f      	bne.n	8005c1c <_printf_float+0x16c>
 8005b9c:	2306      	movs	r3, #6
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	9206      	str	r2, [sp, #24]
 8005baa:	aa0e      	add	r2, sp, #56	@ 0x38
 8005bac:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005bb0:	aa0d      	add	r2, sp, #52	@ 0x34
 8005bb2:	9203      	str	r2, [sp, #12]
 8005bb4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005bb8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005bbc:	6863      	ldr	r3, [r4, #4]
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	910a      	str	r1, [sp, #40]	@ 0x28
 8005bc8:	f7ff fed4 	bl	8005974 <__cvt>
 8005bcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bce:	4680      	mov	r8, r0
 8005bd0:	2947      	cmp	r1, #71	@ 0x47
 8005bd2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005bd4:	d128      	bne.n	8005c28 <_printf_float+0x178>
 8005bd6:	1cc8      	adds	r0, r1, #3
 8005bd8:	db02      	blt.n	8005be0 <_printf_float+0x130>
 8005bda:	6863      	ldr	r3, [r4, #4]
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	dd40      	ble.n	8005c62 <_printf_float+0x1b2>
 8005be0:	f1aa 0a02 	sub.w	sl, sl, #2
 8005be4:	fa5f fa8a 	uxtb.w	sl, sl
 8005be8:	4652      	mov	r2, sl
 8005bea:	3901      	subs	r1, #1
 8005bec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bf0:	910d      	str	r1, [sp, #52]	@ 0x34
 8005bf2:	f7ff ff23 	bl	8005a3c <__exponent>
 8005bf6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bf8:	4681      	mov	r9, r0
 8005bfa:	1813      	adds	r3, r2, r0
 8005bfc:	2a01      	cmp	r2, #1
 8005bfe:	6123      	str	r3, [r4, #16]
 8005c00:	dc02      	bgt.n	8005c08 <_printf_float+0x158>
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	07d2      	lsls	r2, r2, #31
 8005c06:	d501      	bpl.n	8005c0c <_printf_float+0x15c>
 8005c08:	3301      	adds	r3, #1
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d09e      	beq.n	8005b52 <_printf_float+0xa2>
 8005c14:	232d      	movs	r3, #45	@ 0x2d
 8005c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c1a:	e79a      	b.n	8005b52 <_printf_float+0xa2>
 8005c1c:	2947      	cmp	r1, #71	@ 0x47
 8005c1e:	d1bf      	bne.n	8005ba0 <_printf_float+0xf0>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1bd      	bne.n	8005ba0 <_printf_float+0xf0>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e7ba      	b.n	8005b9e <_printf_float+0xee>
 8005c28:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c2c:	d9dc      	bls.n	8005be8 <_printf_float+0x138>
 8005c2e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c32:	d118      	bne.n	8005c66 <_printf_float+0x1b6>
 8005c34:	2900      	cmp	r1, #0
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	dd0b      	ble.n	8005c52 <_printf_float+0x1a2>
 8005c3a:	6121      	str	r1, [r4, #16]
 8005c3c:	b913      	cbnz	r3, 8005c44 <_printf_float+0x194>
 8005c3e:	6822      	ldr	r2, [r4, #0]
 8005c40:	07d0      	lsls	r0, r2, #31
 8005c42:	d502      	bpl.n	8005c4a <_printf_float+0x19a>
 8005c44:	3301      	adds	r3, #1
 8005c46:	440b      	add	r3, r1
 8005c48:	6123      	str	r3, [r4, #16]
 8005c4a:	f04f 0900 	mov.w	r9, #0
 8005c4e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c50:	e7dc      	b.n	8005c0c <_printf_float+0x15c>
 8005c52:	b913      	cbnz	r3, 8005c5a <_printf_float+0x1aa>
 8005c54:	6822      	ldr	r2, [r4, #0]
 8005c56:	07d2      	lsls	r2, r2, #31
 8005c58:	d501      	bpl.n	8005c5e <_printf_float+0x1ae>
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	e7f4      	b.n	8005c48 <_printf_float+0x198>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e7f2      	b.n	8005c48 <_printf_float+0x198>
 8005c62:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	db05      	blt.n	8005c78 <_printf_float+0x1c8>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	6121      	str	r1, [r4, #16]
 8005c70:	07d8      	lsls	r0, r3, #31
 8005c72:	d5ea      	bpl.n	8005c4a <_printf_float+0x19a>
 8005c74:	1c4b      	adds	r3, r1, #1
 8005c76:	e7e7      	b.n	8005c48 <_printf_float+0x198>
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	bfcc      	ite	gt
 8005c7c:	2201      	movgt	r2, #1
 8005c7e:	f1c1 0202 	rsble	r2, r1, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	e7e0      	b.n	8005c48 <_printf_float+0x198>
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	055a      	lsls	r2, r3, #21
 8005c8a:	d407      	bmi.n	8005c9c <_printf_float+0x1ec>
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	4642      	mov	r2, r8
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	d12b      	bne.n	8005cf2 <_printf_float+0x242>
 8005c9a:	e764      	b.n	8005b66 <_printf_float+0xb6>
 8005c9c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ca0:	f240 80dc 	bls.w	8005e5c <_printf_float+0x3ac>
 8005ca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2300      	movs	r3, #0
 8005cac:	f7fa fe94 	bl	80009d8 <__aeabi_dcmpeq>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d033      	beq.n	8005d1c <_printf_float+0x26c>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4628      	mov	r0, r5
 8005cba:	4a35      	ldr	r2, [pc, #212]	@ (8005d90 <_printf_float+0x2e0>)
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	f43f af51 	beq.w	8005b66 <_printf_float+0xb6>
 8005cc4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005cc8:	4543      	cmp	r3, r8
 8005cca:	db02      	blt.n	8005cd2 <_printf_float+0x222>
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	07d8      	lsls	r0, r3, #31
 8005cd0:	d50f      	bpl.n	8005cf2 <_printf_float+0x242>
 8005cd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b8      	blx	r7
 8005cdc:	3001      	adds	r0, #1
 8005cde:	f43f af42 	beq.w	8005b66 <_printf_float+0xb6>
 8005ce2:	f04f 0900 	mov.w	r9, #0
 8005ce6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005cea:	f104 0a1a 	add.w	sl, r4, #26
 8005cee:	45c8      	cmp	r8, r9
 8005cf0:	dc09      	bgt.n	8005d06 <_printf_float+0x256>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	079b      	lsls	r3, r3, #30
 8005cf6:	f100 8102 	bmi.w	8005efe <_printf_float+0x44e>
 8005cfa:	68e0      	ldr	r0, [r4, #12]
 8005cfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cfe:	4298      	cmp	r0, r3
 8005d00:	bfb8      	it	lt
 8005d02:	4618      	movlt	r0, r3
 8005d04:	e731      	b.n	8005b6a <_printf_float+0xba>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f af28 	beq.w	8005b66 <_printf_float+0xb6>
 8005d16:	f109 0901 	add.w	r9, r9, #1
 8005d1a:	e7e8      	b.n	8005cee <_printf_float+0x23e>
 8005d1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dc38      	bgt.n	8005d94 <_printf_float+0x2e4>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4631      	mov	r1, r6
 8005d26:	4628      	mov	r0, r5
 8005d28:	4a19      	ldr	r2, [pc, #100]	@ (8005d90 <_printf_float+0x2e0>)
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f af1a 	beq.w	8005b66 <_printf_float+0xb6>
 8005d32:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005d36:	ea59 0303 	orrs.w	r3, r9, r3
 8005d3a:	d102      	bne.n	8005d42 <_printf_float+0x292>
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	07d9      	lsls	r1, r3, #31
 8005d40:	d5d7      	bpl.n	8005cf2 <_printf_float+0x242>
 8005d42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f af0a 	beq.w	8005b66 <_printf_float+0xb6>
 8005d52:	f04f 0a00 	mov.w	sl, #0
 8005d56:	f104 0b1a 	add.w	fp, r4, #26
 8005d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d5c:	425b      	negs	r3, r3
 8005d5e:	4553      	cmp	r3, sl
 8005d60:	dc01      	bgt.n	8005d66 <_printf_float+0x2b6>
 8005d62:	464b      	mov	r3, r9
 8005d64:	e793      	b.n	8005c8e <_printf_float+0x1de>
 8005d66:	2301      	movs	r3, #1
 8005d68:	465a      	mov	r2, fp
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	f43f aef8 	beq.w	8005b66 <_printf_float+0xb6>
 8005d76:	f10a 0a01 	add.w	sl, sl, #1
 8005d7a:	e7ee      	b.n	8005d5a <_printf_float+0x2aa>
 8005d7c:	7fefffff 	.word	0x7fefffff
 8005d80:	08008dd4 	.word	0x08008dd4
 8005d84:	08008dd0 	.word	0x08008dd0
 8005d88:	08008ddc 	.word	0x08008ddc
 8005d8c:	08008dd8 	.word	0x08008dd8
 8005d90:	08008de0 	.word	0x08008de0
 8005d94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d96:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d9a:	4553      	cmp	r3, sl
 8005d9c:	bfa8      	it	ge
 8005d9e:	4653      	movge	r3, sl
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	4699      	mov	r9, r3
 8005da4:	dc36      	bgt.n	8005e14 <_printf_float+0x364>
 8005da6:	f04f 0b00 	mov.w	fp, #0
 8005daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dae:	f104 021a 	add.w	r2, r4, #26
 8005db2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005db4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005db6:	eba3 0309 	sub.w	r3, r3, r9
 8005dba:	455b      	cmp	r3, fp
 8005dbc:	dc31      	bgt.n	8005e22 <_printf_float+0x372>
 8005dbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dc0:	459a      	cmp	sl, r3
 8005dc2:	dc3a      	bgt.n	8005e3a <_printf_float+0x38a>
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	07da      	lsls	r2, r3, #31
 8005dc8:	d437      	bmi.n	8005e3a <_printf_float+0x38a>
 8005dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dcc:	ebaa 0903 	sub.w	r9, sl, r3
 8005dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dd2:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd6:	4599      	cmp	r9, r3
 8005dd8:	bfa8      	it	ge
 8005dda:	4699      	movge	r9, r3
 8005ddc:	f1b9 0f00 	cmp.w	r9, #0
 8005de0:	dc33      	bgt.n	8005e4a <_printf_float+0x39a>
 8005de2:	f04f 0800 	mov.w	r8, #0
 8005de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dea:	f104 0b1a 	add.w	fp, r4, #26
 8005dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005df0:	ebaa 0303 	sub.w	r3, sl, r3
 8005df4:	eba3 0309 	sub.w	r3, r3, r9
 8005df8:	4543      	cmp	r3, r8
 8005dfa:	f77f af7a 	ble.w	8005cf2 <_printf_float+0x242>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	465a      	mov	r2, fp
 8005e02:	4631      	mov	r1, r6
 8005e04:	4628      	mov	r0, r5
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f aeac 	beq.w	8005b66 <_printf_float+0xb6>
 8005e0e:	f108 0801 	add.w	r8, r8, #1
 8005e12:	e7ec      	b.n	8005dee <_printf_float+0x33e>
 8005e14:	4642      	mov	r2, r8
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d1c2      	bne.n	8005da6 <_printf_float+0x2f6>
 8005e20:	e6a1      	b.n	8005b66 <_printf_float+0xb6>
 8005e22:	2301      	movs	r3, #1
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f43f ae9a 	beq.w	8005b66 <_printf_float+0xb6>
 8005e32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e34:	f10b 0b01 	add.w	fp, fp, #1
 8005e38:	e7bb      	b.n	8005db2 <_printf_float+0x302>
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	d1c0      	bne.n	8005dca <_printf_float+0x31a>
 8005e48:	e68d      	b.n	8005b66 <_printf_float+0xb6>
 8005e4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e4c:	464b      	mov	r3, r9
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	4442      	add	r2, r8
 8005e54:	47b8      	blx	r7
 8005e56:	3001      	adds	r0, #1
 8005e58:	d1c3      	bne.n	8005de2 <_printf_float+0x332>
 8005e5a:	e684      	b.n	8005b66 <_printf_float+0xb6>
 8005e5c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e60:	f1ba 0f01 	cmp.w	sl, #1
 8005e64:	dc01      	bgt.n	8005e6a <_printf_float+0x3ba>
 8005e66:	07db      	lsls	r3, r3, #31
 8005e68:	d536      	bpl.n	8005ed8 <_printf_float+0x428>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	4631      	mov	r1, r6
 8005e70:	4628      	mov	r0, r5
 8005e72:	47b8      	blx	r7
 8005e74:	3001      	adds	r0, #1
 8005e76:	f43f ae76 	beq.w	8005b66 <_printf_float+0xb6>
 8005e7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f ae6e 	beq.w	8005b66 <_printf_float+0xb6>
 8005e8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2300      	movs	r3, #0
 8005e92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005e96:	f7fa fd9f 	bl	80009d8 <__aeabi_dcmpeq>
 8005e9a:	b9c0      	cbnz	r0, 8005ece <_printf_float+0x41e>
 8005e9c:	4653      	mov	r3, sl
 8005e9e:	f108 0201 	add.w	r2, r8, #1
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d10c      	bne.n	8005ec6 <_printf_float+0x416>
 8005eac:	e65b      	b.n	8005b66 <_printf_float+0xb6>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	465a      	mov	r2, fp
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f ae54 	beq.w	8005b66 <_printf_float+0xb6>
 8005ebe:	f108 0801 	add.w	r8, r8, #1
 8005ec2:	45d0      	cmp	r8, sl
 8005ec4:	dbf3      	blt.n	8005eae <_printf_float+0x3fe>
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ecc:	e6e0      	b.n	8005c90 <_printf_float+0x1e0>
 8005ece:	f04f 0800 	mov.w	r8, #0
 8005ed2:	f104 0b1a 	add.w	fp, r4, #26
 8005ed6:	e7f4      	b.n	8005ec2 <_printf_float+0x412>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	4642      	mov	r2, r8
 8005edc:	e7e1      	b.n	8005ea2 <_printf_float+0x3f2>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	464a      	mov	r2, r9
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b8      	blx	r7
 8005ee8:	3001      	adds	r0, #1
 8005eea:	f43f ae3c 	beq.w	8005b66 <_printf_float+0xb6>
 8005eee:	f108 0801 	add.w	r8, r8, #1
 8005ef2:	68e3      	ldr	r3, [r4, #12]
 8005ef4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ef6:	1a5b      	subs	r3, r3, r1
 8005ef8:	4543      	cmp	r3, r8
 8005efa:	dcf0      	bgt.n	8005ede <_printf_float+0x42e>
 8005efc:	e6fd      	b.n	8005cfa <_printf_float+0x24a>
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	f104 0919 	add.w	r9, r4, #25
 8005f06:	e7f4      	b.n	8005ef2 <_printf_float+0x442>

08005f08 <_printf_common>:
 8005f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f0c:	4616      	mov	r6, r2
 8005f0e:	4698      	mov	r8, r3
 8005f10:	688a      	ldr	r2, [r1, #8]
 8005f12:	690b      	ldr	r3, [r1, #16]
 8005f14:	4607      	mov	r7, r0
 8005f16:	4293      	cmp	r3, r2
 8005f18:	bfb8      	it	lt
 8005f1a:	4613      	movlt	r3, r2
 8005f1c:	6033      	str	r3, [r6, #0]
 8005f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f22:	460c      	mov	r4, r1
 8005f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f28:	b10a      	cbz	r2, 8005f2e <_printf_common+0x26>
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	6033      	str	r3, [r6, #0]
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	0699      	lsls	r1, r3, #26
 8005f32:	bf42      	ittt	mi
 8005f34:	6833      	ldrmi	r3, [r6, #0]
 8005f36:	3302      	addmi	r3, #2
 8005f38:	6033      	strmi	r3, [r6, #0]
 8005f3a:	6825      	ldr	r5, [r4, #0]
 8005f3c:	f015 0506 	ands.w	r5, r5, #6
 8005f40:	d106      	bne.n	8005f50 <_printf_common+0x48>
 8005f42:	f104 0a19 	add.w	sl, r4, #25
 8005f46:	68e3      	ldr	r3, [r4, #12]
 8005f48:	6832      	ldr	r2, [r6, #0]
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	42ab      	cmp	r3, r5
 8005f4e:	dc2b      	bgt.n	8005fa8 <_printf_common+0xa0>
 8005f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f54:	6822      	ldr	r2, [r4, #0]
 8005f56:	3b00      	subs	r3, #0
 8005f58:	bf18      	it	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	0692      	lsls	r2, r2, #26
 8005f5e:	d430      	bmi.n	8005fc2 <_printf_common+0xba>
 8005f60:	4641      	mov	r1, r8
 8005f62:	4638      	mov	r0, r7
 8005f64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f68:	47c8      	blx	r9
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d023      	beq.n	8005fb6 <_printf_common+0xae>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	6922      	ldr	r2, [r4, #16]
 8005f72:	f003 0306 	and.w	r3, r3, #6
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	bf14      	ite	ne
 8005f7a:	2500      	movne	r5, #0
 8005f7c:	6833      	ldreq	r3, [r6, #0]
 8005f7e:	f04f 0600 	mov.w	r6, #0
 8005f82:	bf08      	it	eq
 8005f84:	68e5      	ldreq	r5, [r4, #12]
 8005f86:	f104 041a 	add.w	r4, r4, #26
 8005f8a:	bf08      	it	eq
 8005f8c:	1aed      	subeq	r5, r5, r3
 8005f8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f92:	bf08      	it	eq
 8005f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	bfc4      	itt	gt
 8005f9c:	1a9b      	subgt	r3, r3, r2
 8005f9e:	18ed      	addgt	r5, r5, r3
 8005fa0:	42b5      	cmp	r5, r6
 8005fa2:	d11a      	bne.n	8005fda <_printf_common+0xd2>
 8005fa4:	2000      	movs	r0, #0
 8005fa6:	e008      	b.n	8005fba <_printf_common+0xb2>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4652      	mov	r2, sl
 8005fac:	4641      	mov	r1, r8
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c8      	blx	r9
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d103      	bne.n	8005fbe <_printf_common+0xb6>
 8005fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbe:	3501      	adds	r5, #1
 8005fc0:	e7c1      	b.n	8005f46 <_printf_common+0x3e>
 8005fc2:	2030      	movs	r0, #48	@ 0x30
 8005fc4:	18e1      	adds	r1, r4, r3
 8005fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fd0:	4422      	add	r2, r4
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fd8:	e7c2      	b.n	8005f60 <_printf_common+0x58>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4641      	mov	r1, r8
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	47c8      	blx	r9
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d0e6      	beq.n	8005fb6 <_printf_common+0xae>
 8005fe8:	3601      	adds	r6, #1
 8005fea:	e7d9      	b.n	8005fa0 <_printf_common+0x98>

08005fec <_printf_i>:
 8005fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff0:	7e0f      	ldrb	r7, [r1, #24]
 8005ff2:	4691      	mov	r9, r2
 8005ff4:	2f78      	cmp	r7, #120	@ 0x78
 8005ff6:	4680      	mov	r8, r0
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	469a      	mov	sl, r3
 8005ffc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006002:	d807      	bhi.n	8006014 <_printf_i+0x28>
 8006004:	2f62      	cmp	r7, #98	@ 0x62
 8006006:	d80a      	bhi.n	800601e <_printf_i+0x32>
 8006008:	2f00      	cmp	r7, #0
 800600a:	f000 80d1 	beq.w	80061b0 <_printf_i+0x1c4>
 800600e:	2f58      	cmp	r7, #88	@ 0x58
 8006010:	f000 80b8 	beq.w	8006184 <_printf_i+0x198>
 8006014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800601c:	e03a      	b.n	8006094 <_printf_i+0xa8>
 800601e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006022:	2b15      	cmp	r3, #21
 8006024:	d8f6      	bhi.n	8006014 <_printf_i+0x28>
 8006026:	a101      	add	r1, pc, #4	@ (adr r1, 800602c <_printf_i+0x40>)
 8006028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800602c:	08006085 	.word	0x08006085
 8006030:	08006099 	.word	0x08006099
 8006034:	08006015 	.word	0x08006015
 8006038:	08006015 	.word	0x08006015
 800603c:	08006015 	.word	0x08006015
 8006040:	08006015 	.word	0x08006015
 8006044:	08006099 	.word	0x08006099
 8006048:	08006015 	.word	0x08006015
 800604c:	08006015 	.word	0x08006015
 8006050:	08006015 	.word	0x08006015
 8006054:	08006015 	.word	0x08006015
 8006058:	08006197 	.word	0x08006197
 800605c:	080060c3 	.word	0x080060c3
 8006060:	08006151 	.word	0x08006151
 8006064:	08006015 	.word	0x08006015
 8006068:	08006015 	.word	0x08006015
 800606c:	080061b9 	.word	0x080061b9
 8006070:	08006015 	.word	0x08006015
 8006074:	080060c3 	.word	0x080060c3
 8006078:	08006015 	.word	0x08006015
 800607c:	08006015 	.word	0x08006015
 8006080:	08006159 	.word	0x08006159
 8006084:	6833      	ldr	r3, [r6, #0]
 8006086:	1d1a      	adds	r2, r3, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6032      	str	r2, [r6, #0]
 800608c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006094:	2301      	movs	r3, #1
 8006096:	e09c      	b.n	80061d2 <_printf_i+0x1e6>
 8006098:	6833      	ldr	r3, [r6, #0]
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	1d19      	adds	r1, r3, #4
 800609e:	6031      	str	r1, [r6, #0]
 80060a0:	0606      	lsls	r6, r0, #24
 80060a2:	d501      	bpl.n	80060a8 <_printf_i+0xbc>
 80060a4:	681d      	ldr	r5, [r3, #0]
 80060a6:	e003      	b.n	80060b0 <_printf_i+0xc4>
 80060a8:	0645      	lsls	r5, r0, #25
 80060aa:	d5fb      	bpl.n	80060a4 <_printf_i+0xb8>
 80060ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060b0:	2d00      	cmp	r5, #0
 80060b2:	da03      	bge.n	80060bc <_printf_i+0xd0>
 80060b4:	232d      	movs	r3, #45	@ 0x2d
 80060b6:	426d      	negs	r5, r5
 80060b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060bc:	230a      	movs	r3, #10
 80060be:	4858      	ldr	r0, [pc, #352]	@ (8006220 <_printf_i+0x234>)
 80060c0:	e011      	b.n	80060e6 <_printf_i+0xfa>
 80060c2:	6821      	ldr	r1, [r4, #0]
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	0608      	lsls	r0, r1, #24
 80060c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060cc:	d402      	bmi.n	80060d4 <_printf_i+0xe8>
 80060ce:	0649      	lsls	r1, r1, #25
 80060d0:	bf48      	it	mi
 80060d2:	b2ad      	uxthmi	r5, r5
 80060d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060d6:	6033      	str	r3, [r6, #0]
 80060d8:	bf14      	ite	ne
 80060da:	230a      	movne	r3, #10
 80060dc:	2308      	moveq	r3, #8
 80060de:	4850      	ldr	r0, [pc, #320]	@ (8006220 <_printf_i+0x234>)
 80060e0:	2100      	movs	r1, #0
 80060e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060e6:	6866      	ldr	r6, [r4, #4]
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	60a6      	str	r6, [r4, #8]
 80060ec:	db05      	blt.n	80060fa <_printf_i+0x10e>
 80060ee:	6821      	ldr	r1, [r4, #0]
 80060f0:	432e      	orrs	r6, r5
 80060f2:	f021 0104 	bic.w	r1, r1, #4
 80060f6:	6021      	str	r1, [r4, #0]
 80060f8:	d04b      	beq.n	8006192 <_printf_i+0x1a6>
 80060fa:	4616      	mov	r6, r2
 80060fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006100:	fb03 5711 	mls	r7, r3, r1, r5
 8006104:	5dc7      	ldrb	r7, [r0, r7]
 8006106:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800610a:	462f      	mov	r7, r5
 800610c:	42bb      	cmp	r3, r7
 800610e:	460d      	mov	r5, r1
 8006110:	d9f4      	bls.n	80060fc <_printf_i+0x110>
 8006112:	2b08      	cmp	r3, #8
 8006114:	d10b      	bne.n	800612e <_printf_i+0x142>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	07df      	lsls	r7, r3, #31
 800611a:	d508      	bpl.n	800612e <_printf_i+0x142>
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	6861      	ldr	r1, [r4, #4]
 8006120:	4299      	cmp	r1, r3
 8006122:	bfde      	ittt	le
 8006124:	2330      	movle	r3, #48	@ 0x30
 8006126:	f806 3c01 	strble.w	r3, [r6, #-1]
 800612a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800612e:	1b92      	subs	r2, r2, r6
 8006130:	6122      	str	r2, [r4, #16]
 8006132:	464b      	mov	r3, r9
 8006134:	4621      	mov	r1, r4
 8006136:	4640      	mov	r0, r8
 8006138:	f8cd a000 	str.w	sl, [sp]
 800613c:	aa03      	add	r2, sp, #12
 800613e:	f7ff fee3 	bl	8005f08 <_printf_common>
 8006142:	3001      	adds	r0, #1
 8006144:	d14a      	bne.n	80061dc <_printf_i+0x1f0>
 8006146:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800614a:	b004      	add	sp, #16
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	f043 0320 	orr.w	r3, r3, #32
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	2778      	movs	r7, #120	@ 0x78
 800615a:	4832      	ldr	r0, [pc, #200]	@ (8006224 <_printf_i+0x238>)
 800615c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	6831      	ldr	r1, [r6, #0]
 8006164:	061f      	lsls	r7, r3, #24
 8006166:	f851 5b04 	ldr.w	r5, [r1], #4
 800616a:	d402      	bmi.n	8006172 <_printf_i+0x186>
 800616c:	065f      	lsls	r7, r3, #25
 800616e:	bf48      	it	mi
 8006170:	b2ad      	uxthmi	r5, r5
 8006172:	6031      	str	r1, [r6, #0]
 8006174:	07d9      	lsls	r1, r3, #31
 8006176:	bf44      	itt	mi
 8006178:	f043 0320 	orrmi.w	r3, r3, #32
 800617c:	6023      	strmi	r3, [r4, #0]
 800617e:	b11d      	cbz	r5, 8006188 <_printf_i+0x19c>
 8006180:	2310      	movs	r3, #16
 8006182:	e7ad      	b.n	80060e0 <_printf_i+0xf4>
 8006184:	4826      	ldr	r0, [pc, #152]	@ (8006220 <_printf_i+0x234>)
 8006186:	e7e9      	b.n	800615c <_printf_i+0x170>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	f023 0320 	bic.w	r3, r3, #32
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	e7f6      	b.n	8006180 <_printf_i+0x194>
 8006192:	4616      	mov	r6, r2
 8006194:	e7bd      	b.n	8006112 <_printf_i+0x126>
 8006196:	6833      	ldr	r3, [r6, #0]
 8006198:	6825      	ldr	r5, [r4, #0]
 800619a:	1d18      	adds	r0, r3, #4
 800619c:	6961      	ldr	r1, [r4, #20]
 800619e:	6030      	str	r0, [r6, #0]
 80061a0:	062e      	lsls	r6, r5, #24
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	d501      	bpl.n	80061aa <_printf_i+0x1be>
 80061a6:	6019      	str	r1, [r3, #0]
 80061a8:	e002      	b.n	80061b0 <_printf_i+0x1c4>
 80061aa:	0668      	lsls	r0, r5, #25
 80061ac:	d5fb      	bpl.n	80061a6 <_printf_i+0x1ba>
 80061ae:	8019      	strh	r1, [r3, #0]
 80061b0:	2300      	movs	r3, #0
 80061b2:	4616      	mov	r6, r2
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	e7bc      	b.n	8006132 <_printf_i+0x146>
 80061b8:	6833      	ldr	r3, [r6, #0]
 80061ba:	2100      	movs	r1, #0
 80061bc:	1d1a      	adds	r2, r3, #4
 80061be:	6032      	str	r2, [r6, #0]
 80061c0:	681e      	ldr	r6, [r3, #0]
 80061c2:	6862      	ldr	r2, [r4, #4]
 80061c4:	4630      	mov	r0, r6
 80061c6:	f000 f99b 	bl	8006500 <memchr>
 80061ca:	b108      	cbz	r0, 80061d0 <_printf_i+0x1e4>
 80061cc:	1b80      	subs	r0, r0, r6
 80061ce:	6060      	str	r0, [r4, #4]
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	2300      	movs	r3, #0
 80061d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061da:	e7aa      	b.n	8006132 <_printf_i+0x146>
 80061dc:	4632      	mov	r2, r6
 80061de:	4649      	mov	r1, r9
 80061e0:	4640      	mov	r0, r8
 80061e2:	6923      	ldr	r3, [r4, #16]
 80061e4:	47d0      	blx	sl
 80061e6:	3001      	adds	r0, #1
 80061e8:	d0ad      	beq.n	8006146 <_printf_i+0x15a>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	079b      	lsls	r3, r3, #30
 80061ee:	d413      	bmi.n	8006218 <_printf_i+0x22c>
 80061f0:	68e0      	ldr	r0, [r4, #12]
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	4298      	cmp	r0, r3
 80061f6:	bfb8      	it	lt
 80061f8:	4618      	movlt	r0, r3
 80061fa:	e7a6      	b.n	800614a <_printf_i+0x15e>
 80061fc:	2301      	movs	r3, #1
 80061fe:	4632      	mov	r2, r6
 8006200:	4649      	mov	r1, r9
 8006202:	4640      	mov	r0, r8
 8006204:	47d0      	blx	sl
 8006206:	3001      	adds	r0, #1
 8006208:	d09d      	beq.n	8006146 <_printf_i+0x15a>
 800620a:	3501      	adds	r5, #1
 800620c:	68e3      	ldr	r3, [r4, #12]
 800620e:	9903      	ldr	r1, [sp, #12]
 8006210:	1a5b      	subs	r3, r3, r1
 8006212:	42ab      	cmp	r3, r5
 8006214:	dcf2      	bgt.n	80061fc <_printf_i+0x210>
 8006216:	e7eb      	b.n	80061f0 <_printf_i+0x204>
 8006218:	2500      	movs	r5, #0
 800621a:	f104 0619 	add.w	r6, r4, #25
 800621e:	e7f5      	b.n	800620c <_printf_i+0x220>
 8006220:	08008de2 	.word	0x08008de2
 8006224:	08008df3 	.word	0x08008df3

08006228 <std>:
 8006228:	2300      	movs	r3, #0
 800622a:	b510      	push	{r4, lr}
 800622c:	4604      	mov	r4, r0
 800622e:	e9c0 3300 	strd	r3, r3, [r0]
 8006232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006236:	6083      	str	r3, [r0, #8]
 8006238:	8181      	strh	r1, [r0, #12]
 800623a:	6643      	str	r3, [r0, #100]	@ 0x64
 800623c:	81c2      	strh	r2, [r0, #14]
 800623e:	6183      	str	r3, [r0, #24]
 8006240:	4619      	mov	r1, r3
 8006242:	2208      	movs	r2, #8
 8006244:	305c      	adds	r0, #92	@ 0x5c
 8006246:	f000 f921 	bl	800648c <memset>
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <std+0x58>)
 800624c:	6224      	str	r4, [r4, #32]
 800624e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006250:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <std+0x5c>)
 8006252:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006254:	4b0c      	ldr	r3, [pc, #48]	@ (8006288 <std+0x60>)
 8006256:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006258:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <std+0x64>)
 800625a:	6323      	str	r3, [r4, #48]	@ 0x30
 800625c:	4b0c      	ldr	r3, [pc, #48]	@ (8006290 <std+0x68>)
 800625e:	429c      	cmp	r4, r3
 8006260:	d006      	beq.n	8006270 <std+0x48>
 8006262:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006266:	4294      	cmp	r4, r2
 8006268:	d002      	beq.n	8006270 <std+0x48>
 800626a:	33d0      	adds	r3, #208	@ 0xd0
 800626c:	429c      	cmp	r4, r3
 800626e:	d105      	bne.n	800627c <std+0x54>
 8006270:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006278:	f000 b93a 	b.w	80064f0 <__retarget_lock_init_recursive>
 800627c:	bd10      	pop	{r4, pc}
 800627e:	bf00      	nop
 8006280:	08007e09 	.word	0x08007e09
 8006284:	08007e2b 	.word	0x08007e2b
 8006288:	08007e63 	.word	0x08007e63
 800628c:	08007e87 	.word	0x08007e87
 8006290:	2000032c 	.word	0x2000032c

08006294 <stdio_exit_handler>:
 8006294:	4a02      	ldr	r2, [pc, #8]	@ (80062a0 <stdio_exit_handler+0xc>)
 8006296:	4903      	ldr	r1, [pc, #12]	@ (80062a4 <stdio_exit_handler+0x10>)
 8006298:	4803      	ldr	r0, [pc, #12]	@ (80062a8 <stdio_exit_handler+0x14>)
 800629a:	f000 b869 	b.w	8006370 <_fwalk_sglue>
 800629e:	bf00      	nop
 80062a0:	2000000c 	.word	0x2000000c
 80062a4:	080076ad 	.word	0x080076ad
 80062a8:	2000001c 	.word	0x2000001c

080062ac <cleanup_stdio>:
 80062ac:	6841      	ldr	r1, [r0, #4]
 80062ae:	4b0c      	ldr	r3, [pc, #48]	@ (80062e0 <cleanup_stdio+0x34>)
 80062b0:	b510      	push	{r4, lr}
 80062b2:	4299      	cmp	r1, r3
 80062b4:	4604      	mov	r4, r0
 80062b6:	d001      	beq.n	80062bc <cleanup_stdio+0x10>
 80062b8:	f001 f9f8 	bl	80076ac <_fflush_r>
 80062bc:	68a1      	ldr	r1, [r4, #8]
 80062be:	4b09      	ldr	r3, [pc, #36]	@ (80062e4 <cleanup_stdio+0x38>)
 80062c0:	4299      	cmp	r1, r3
 80062c2:	d002      	beq.n	80062ca <cleanup_stdio+0x1e>
 80062c4:	4620      	mov	r0, r4
 80062c6:	f001 f9f1 	bl	80076ac <_fflush_r>
 80062ca:	68e1      	ldr	r1, [r4, #12]
 80062cc:	4b06      	ldr	r3, [pc, #24]	@ (80062e8 <cleanup_stdio+0x3c>)
 80062ce:	4299      	cmp	r1, r3
 80062d0:	d004      	beq.n	80062dc <cleanup_stdio+0x30>
 80062d2:	4620      	mov	r0, r4
 80062d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d8:	f001 b9e8 	b.w	80076ac <_fflush_r>
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	2000032c 	.word	0x2000032c
 80062e4:	20000394 	.word	0x20000394
 80062e8:	200003fc 	.word	0x200003fc

080062ec <global_stdio_init.part.0>:
 80062ec:	b510      	push	{r4, lr}
 80062ee:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <global_stdio_init.part.0+0x30>)
 80062f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006320 <global_stdio_init.part.0+0x34>)
 80062f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006324 <global_stdio_init.part.0+0x38>)
 80062f4:	4620      	mov	r0, r4
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	2104      	movs	r1, #4
 80062fa:	2200      	movs	r2, #0
 80062fc:	f7ff ff94 	bl	8006228 <std>
 8006300:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006304:	2201      	movs	r2, #1
 8006306:	2109      	movs	r1, #9
 8006308:	f7ff ff8e 	bl	8006228 <std>
 800630c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006310:	2202      	movs	r2, #2
 8006312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006316:	2112      	movs	r1, #18
 8006318:	f7ff bf86 	b.w	8006228 <std>
 800631c:	20000464 	.word	0x20000464
 8006320:	2000032c 	.word	0x2000032c
 8006324:	08006295 	.word	0x08006295

08006328 <__sfp_lock_acquire>:
 8006328:	4801      	ldr	r0, [pc, #4]	@ (8006330 <__sfp_lock_acquire+0x8>)
 800632a:	f000 b8e2 	b.w	80064f2 <__retarget_lock_acquire_recursive>
 800632e:	bf00      	nop
 8006330:	20000469 	.word	0x20000469

08006334 <__sfp_lock_release>:
 8006334:	4801      	ldr	r0, [pc, #4]	@ (800633c <__sfp_lock_release+0x8>)
 8006336:	f000 b8dd 	b.w	80064f4 <__retarget_lock_release_recursive>
 800633a:	bf00      	nop
 800633c:	20000469 	.word	0x20000469

08006340 <__sinit>:
 8006340:	b510      	push	{r4, lr}
 8006342:	4604      	mov	r4, r0
 8006344:	f7ff fff0 	bl	8006328 <__sfp_lock_acquire>
 8006348:	6a23      	ldr	r3, [r4, #32]
 800634a:	b11b      	cbz	r3, 8006354 <__sinit+0x14>
 800634c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006350:	f7ff bff0 	b.w	8006334 <__sfp_lock_release>
 8006354:	4b04      	ldr	r3, [pc, #16]	@ (8006368 <__sinit+0x28>)
 8006356:	6223      	str	r3, [r4, #32]
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <__sinit+0x2c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f5      	bne.n	800634c <__sinit+0xc>
 8006360:	f7ff ffc4 	bl	80062ec <global_stdio_init.part.0>
 8006364:	e7f2      	b.n	800634c <__sinit+0xc>
 8006366:	bf00      	nop
 8006368:	080062ad 	.word	0x080062ad
 800636c:	20000464 	.word	0x20000464

08006370 <_fwalk_sglue>:
 8006370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006374:	4607      	mov	r7, r0
 8006376:	4688      	mov	r8, r1
 8006378:	4614      	mov	r4, r2
 800637a:	2600      	movs	r6, #0
 800637c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006380:	f1b9 0901 	subs.w	r9, r9, #1
 8006384:	d505      	bpl.n	8006392 <_fwalk_sglue+0x22>
 8006386:	6824      	ldr	r4, [r4, #0]
 8006388:	2c00      	cmp	r4, #0
 800638a:	d1f7      	bne.n	800637c <_fwalk_sglue+0xc>
 800638c:	4630      	mov	r0, r6
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d907      	bls.n	80063a8 <_fwalk_sglue+0x38>
 8006398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800639c:	3301      	adds	r3, #1
 800639e:	d003      	beq.n	80063a8 <_fwalk_sglue+0x38>
 80063a0:	4629      	mov	r1, r5
 80063a2:	4638      	mov	r0, r7
 80063a4:	47c0      	blx	r8
 80063a6:	4306      	orrs	r6, r0
 80063a8:	3568      	adds	r5, #104	@ 0x68
 80063aa:	e7e9      	b.n	8006380 <_fwalk_sglue+0x10>

080063ac <iprintf>:
 80063ac:	b40f      	push	{r0, r1, r2, r3}
 80063ae:	b507      	push	{r0, r1, r2, lr}
 80063b0:	4906      	ldr	r1, [pc, #24]	@ (80063cc <iprintf+0x20>)
 80063b2:	ab04      	add	r3, sp, #16
 80063b4:	6808      	ldr	r0, [r1, #0]
 80063b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ba:	6881      	ldr	r1, [r0, #8]
 80063bc:	9301      	str	r3, [sp, #4]
 80063be:	f000 ff33 	bl	8007228 <_vfiprintf_r>
 80063c2:	b003      	add	sp, #12
 80063c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c8:	b004      	add	sp, #16
 80063ca:	4770      	bx	lr
 80063cc:	20000018 	.word	0x20000018

080063d0 <_puts_r>:
 80063d0:	6a03      	ldr	r3, [r0, #32]
 80063d2:	b570      	push	{r4, r5, r6, lr}
 80063d4:	4605      	mov	r5, r0
 80063d6:	460e      	mov	r6, r1
 80063d8:	6884      	ldr	r4, [r0, #8]
 80063da:	b90b      	cbnz	r3, 80063e0 <_puts_r+0x10>
 80063dc:	f7ff ffb0 	bl	8006340 <__sinit>
 80063e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063e2:	07db      	lsls	r3, r3, #31
 80063e4:	d405      	bmi.n	80063f2 <_puts_r+0x22>
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	0598      	lsls	r0, r3, #22
 80063ea:	d402      	bmi.n	80063f2 <_puts_r+0x22>
 80063ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063ee:	f000 f880 	bl	80064f2 <__retarget_lock_acquire_recursive>
 80063f2:	89a3      	ldrh	r3, [r4, #12]
 80063f4:	0719      	lsls	r1, r3, #28
 80063f6:	d502      	bpl.n	80063fe <_puts_r+0x2e>
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d135      	bne.n	800646a <_puts_r+0x9a>
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f001 fd83 	bl	8007f0c <__swsetup_r>
 8006406:	b380      	cbz	r0, 800646a <_puts_r+0x9a>
 8006408:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800640c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800640e:	07da      	lsls	r2, r3, #31
 8006410:	d405      	bmi.n	800641e <_puts_r+0x4e>
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	059b      	lsls	r3, r3, #22
 8006416:	d402      	bmi.n	800641e <_puts_r+0x4e>
 8006418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800641a:	f000 f86b 	bl	80064f4 <__retarget_lock_release_recursive>
 800641e:	4628      	mov	r0, r5
 8006420:	bd70      	pop	{r4, r5, r6, pc}
 8006422:	2b00      	cmp	r3, #0
 8006424:	da04      	bge.n	8006430 <_puts_r+0x60>
 8006426:	69a2      	ldr	r2, [r4, #24]
 8006428:	429a      	cmp	r2, r3
 800642a:	dc17      	bgt.n	800645c <_puts_r+0x8c>
 800642c:	290a      	cmp	r1, #10
 800642e:	d015      	beq.n	800645c <_puts_r+0x8c>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	6022      	str	r2, [r4, #0]
 8006436:	7019      	strb	r1, [r3, #0]
 8006438:	68a3      	ldr	r3, [r4, #8]
 800643a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800643e:	3b01      	subs	r3, #1
 8006440:	60a3      	str	r3, [r4, #8]
 8006442:	2900      	cmp	r1, #0
 8006444:	d1ed      	bne.n	8006422 <_puts_r+0x52>
 8006446:	2b00      	cmp	r3, #0
 8006448:	da11      	bge.n	800646e <_puts_r+0x9e>
 800644a:	4622      	mov	r2, r4
 800644c:	210a      	movs	r1, #10
 800644e:	4628      	mov	r0, r5
 8006450:	f001 fd1d 	bl	8007e8e <__swbuf_r>
 8006454:	3001      	adds	r0, #1
 8006456:	d0d7      	beq.n	8006408 <_puts_r+0x38>
 8006458:	250a      	movs	r5, #10
 800645a:	e7d7      	b.n	800640c <_puts_r+0x3c>
 800645c:	4622      	mov	r2, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f001 fd15 	bl	8007e8e <__swbuf_r>
 8006464:	3001      	adds	r0, #1
 8006466:	d1e7      	bne.n	8006438 <_puts_r+0x68>
 8006468:	e7ce      	b.n	8006408 <_puts_r+0x38>
 800646a:	3e01      	subs	r6, #1
 800646c:	e7e4      	b.n	8006438 <_puts_r+0x68>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	6022      	str	r2, [r4, #0]
 8006474:	220a      	movs	r2, #10
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e7ee      	b.n	8006458 <_puts_r+0x88>
	...

0800647c <puts>:
 800647c:	4b02      	ldr	r3, [pc, #8]	@ (8006488 <puts+0xc>)
 800647e:	4601      	mov	r1, r0
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	f7ff bfa5 	b.w	80063d0 <_puts_r>
 8006486:	bf00      	nop
 8006488:	20000018 	.word	0x20000018

0800648c <memset>:
 800648c:	4603      	mov	r3, r0
 800648e:	4402      	add	r2, r0
 8006490:	4293      	cmp	r3, r2
 8006492:	d100      	bne.n	8006496 <memset+0xa>
 8006494:	4770      	bx	lr
 8006496:	f803 1b01 	strb.w	r1, [r3], #1
 800649a:	e7f9      	b.n	8006490 <memset+0x4>

0800649c <__errno>:
 800649c:	4b01      	ldr	r3, [pc, #4]	@ (80064a4 <__errno+0x8>)
 800649e:	6818      	ldr	r0, [r3, #0]
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	20000018 	.word	0x20000018

080064a8 <__libc_init_array>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	2600      	movs	r6, #0
 80064ac:	4d0c      	ldr	r5, [pc, #48]	@ (80064e0 <__libc_init_array+0x38>)
 80064ae:	4c0d      	ldr	r4, [pc, #52]	@ (80064e4 <__libc_init_array+0x3c>)
 80064b0:	1b64      	subs	r4, r4, r5
 80064b2:	10a4      	asrs	r4, r4, #2
 80064b4:	42a6      	cmp	r6, r4
 80064b6:	d109      	bne.n	80064cc <__libc_init_array+0x24>
 80064b8:	f002 fbf0 	bl	8008c9c <_init>
 80064bc:	2600      	movs	r6, #0
 80064be:	4d0a      	ldr	r5, [pc, #40]	@ (80064e8 <__libc_init_array+0x40>)
 80064c0:	4c0a      	ldr	r4, [pc, #40]	@ (80064ec <__libc_init_array+0x44>)
 80064c2:	1b64      	subs	r4, r4, r5
 80064c4:	10a4      	asrs	r4, r4, #2
 80064c6:	42a6      	cmp	r6, r4
 80064c8:	d105      	bne.n	80064d6 <__libc_init_array+0x2e>
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d0:	4798      	blx	r3
 80064d2:	3601      	adds	r6, #1
 80064d4:	e7ee      	b.n	80064b4 <__libc_init_array+0xc>
 80064d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064da:	4798      	blx	r3
 80064dc:	3601      	adds	r6, #1
 80064de:	e7f2      	b.n	80064c6 <__libc_init_array+0x1e>
 80064e0:	0800916c 	.word	0x0800916c
 80064e4:	0800916c 	.word	0x0800916c
 80064e8:	0800916c 	.word	0x0800916c
 80064ec:	08009170 	.word	0x08009170

080064f0 <__retarget_lock_init_recursive>:
 80064f0:	4770      	bx	lr

080064f2 <__retarget_lock_acquire_recursive>:
 80064f2:	4770      	bx	lr

080064f4 <__retarget_lock_release_recursive>:
 80064f4:	4770      	bx	lr
	...

080064f8 <_localeconv_r>:
 80064f8:	4800      	ldr	r0, [pc, #0]	@ (80064fc <_localeconv_r+0x4>)
 80064fa:	4770      	bx	lr
 80064fc:	20000158 	.word	0x20000158

08006500 <memchr>:
 8006500:	4603      	mov	r3, r0
 8006502:	b510      	push	{r4, lr}
 8006504:	b2c9      	uxtb	r1, r1
 8006506:	4402      	add	r2, r0
 8006508:	4293      	cmp	r3, r2
 800650a:	4618      	mov	r0, r3
 800650c:	d101      	bne.n	8006512 <memchr+0x12>
 800650e:	2000      	movs	r0, #0
 8006510:	e003      	b.n	800651a <memchr+0x1a>
 8006512:	7804      	ldrb	r4, [r0, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	428c      	cmp	r4, r1
 8006518:	d1f6      	bne.n	8006508 <memchr+0x8>
 800651a:	bd10      	pop	{r4, pc}

0800651c <quorem>:
 800651c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	6903      	ldr	r3, [r0, #16]
 8006522:	690c      	ldr	r4, [r1, #16]
 8006524:	4607      	mov	r7, r0
 8006526:	42a3      	cmp	r3, r4
 8006528:	db7e      	blt.n	8006628 <quorem+0x10c>
 800652a:	3c01      	subs	r4, #1
 800652c:	00a3      	lsls	r3, r4, #2
 800652e:	f100 0514 	add.w	r5, r0, #20
 8006532:	f101 0814 	add.w	r8, r1, #20
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800653c:	9301      	str	r3, [sp, #4]
 800653e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006542:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006546:	3301      	adds	r3, #1
 8006548:	429a      	cmp	r2, r3
 800654a:	fbb2 f6f3 	udiv	r6, r2, r3
 800654e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006552:	d32e      	bcc.n	80065b2 <quorem+0x96>
 8006554:	f04f 0a00 	mov.w	sl, #0
 8006558:	46c4      	mov	ip, r8
 800655a:	46ae      	mov	lr, r5
 800655c:	46d3      	mov	fp, sl
 800655e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006562:	b298      	uxth	r0, r3
 8006564:	fb06 a000 	mla	r0, r6, r0, sl
 8006568:	0c1b      	lsrs	r3, r3, #16
 800656a:	0c02      	lsrs	r2, r0, #16
 800656c:	fb06 2303 	mla	r3, r6, r3, r2
 8006570:	f8de 2000 	ldr.w	r2, [lr]
 8006574:	b280      	uxth	r0, r0
 8006576:	b292      	uxth	r2, r2
 8006578:	1a12      	subs	r2, r2, r0
 800657a:	445a      	add	r2, fp
 800657c:	f8de 0000 	ldr.w	r0, [lr]
 8006580:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006584:	b29b      	uxth	r3, r3
 8006586:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800658a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800658e:	b292      	uxth	r2, r2
 8006590:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006594:	45e1      	cmp	r9, ip
 8006596:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800659a:	f84e 2b04 	str.w	r2, [lr], #4
 800659e:	d2de      	bcs.n	800655e <quorem+0x42>
 80065a0:	9b00      	ldr	r3, [sp, #0]
 80065a2:	58eb      	ldr	r3, [r5, r3]
 80065a4:	b92b      	cbnz	r3, 80065b2 <quorem+0x96>
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	3b04      	subs	r3, #4
 80065aa:	429d      	cmp	r5, r3
 80065ac:	461a      	mov	r2, r3
 80065ae:	d32f      	bcc.n	8006610 <quorem+0xf4>
 80065b0:	613c      	str	r4, [r7, #16]
 80065b2:	4638      	mov	r0, r7
 80065b4:	f001 fb20 	bl	8007bf8 <__mcmp>
 80065b8:	2800      	cmp	r0, #0
 80065ba:	db25      	blt.n	8006608 <quorem+0xec>
 80065bc:	4629      	mov	r1, r5
 80065be:	2000      	movs	r0, #0
 80065c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80065c4:	f8d1 c000 	ldr.w	ip, [r1]
 80065c8:	fa1f fe82 	uxth.w	lr, r2
 80065cc:	fa1f f38c 	uxth.w	r3, ip
 80065d0:	eba3 030e 	sub.w	r3, r3, lr
 80065d4:	4403      	add	r3, r0
 80065d6:	0c12      	lsrs	r2, r2, #16
 80065d8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80065dc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065e6:	45c1      	cmp	r9, r8
 80065e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065ec:	f841 3b04 	str.w	r3, [r1], #4
 80065f0:	d2e6      	bcs.n	80065c0 <quorem+0xa4>
 80065f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065fa:	b922      	cbnz	r2, 8006606 <quorem+0xea>
 80065fc:	3b04      	subs	r3, #4
 80065fe:	429d      	cmp	r5, r3
 8006600:	461a      	mov	r2, r3
 8006602:	d30b      	bcc.n	800661c <quorem+0x100>
 8006604:	613c      	str	r4, [r7, #16]
 8006606:	3601      	adds	r6, #1
 8006608:	4630      	mov	r0, r6
 800660a:	b003      	add	sp, #12
 800660c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	3b04      	subs	r3, #4
 8006614:	2a00      	cmp	r2, #0
 8006616:	d1cb      	bne.n	80065b0 <quorem+0x94>
 8006618:	3c01      	subs	r4, #1
 800661a:	e7c6      	b.n	80065aa <quorem+0x8e>
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	3b04      	subs	r3, #4
 8006620:	2a00      	cmp	r2, #0
 8006622:	d1ef      	bne.n	8006604 <quorem+0xe8>
 8006624:	3c01      	subs	r4, #1
 8006626:	e7ea      	b.n	80065fe <quorem+0xe2>
 8006628:	2000      	movs	r0, #0
 800662a:	e7ee      	b.n	800660a <quorem+0xee>
 800662c:	0000      	movs	r0, r0
	...

08006630 <_dtoa_r>:
 8006630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006634:	4614      	mov	r4, r2
 8006636:	461d      	mov	r5, r3
 8006638:	69c7      	ldr	r7, [r0, #28]
 800663a:	b097      	sub	sp, #92	@ 0x5c
 800663c:	4681      	mov	r9, r0
 800663e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006642:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006644:	b97f      	cbnz	r7, 8006666 <_dtoa_r+0x36>
 8006646:	2010      	movs	r0, #16
 8006648:	f000 ff06 	bl	8007458 <malloc>
 800664c:	4602      	mov	r2, r0
 800664e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006652:	b920      	cbnz	r0, 800665e <_dtoa_r+0x2e>
 8006654:	21ef      	movs	r1, #239	@ 0xef
 8006656:	4bac      	ldr	r3, [pc, #688]	@ (8006908 <_dtoa_r+0x2d8>)
 8006658:	48ac      	ldr	r0, [pc, #688]	@ (800690c <_dtoa_r+0x2dc>)
 800665a:	f001 fd95 	bl	8008188 <__assert_func>
 800665e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006662:	6007      	str	r7, [r0, #0]
 8006664:	60c7      	str	r7, [r0, #12]
 8006666:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800666a:	6819      	ldr	r1, [r3, #0]
 800666c:	b159      	cbz	r1, 8006686 <_dtoa_r+0x56>
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	2301      	movs	r3, #1
 8006672:	4093      	lsls	r3, r2
 8006674:	604a      	str	r2, [r1, #4]
 8006676:	608b      	str	r3, [r1, #8]
 8006678:	4648      	mov	r0, r9
 800667a:	f001 f88b 	bl	8007794 <_Bfree>
 800667e:	2200      	movs	r2, #0
 8006680:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	1e2b      	subs	r3, r5, #0
 8006688:	bfaf      	iteee	ge
 800668a:	2300      	movge	r3, #0
 800668c:	2201      	movlt	r2, #1
 800668e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006692:	9307      	strlt	r3, [sp, #28]
 8006694:	bfa8      	it	ge
 8006696:	6033      	strge	r3, [r6, #0]
 8006698:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800669c:	4b9c      	ldr	r3, [pc, #624]	@ (8006910 <_dtoa_r+0x2e0>)
 800669e:	bfb8      	it	lt
 80066a0:	6032      	strlt	r2, [r6, #0]
 80066a2:	ea33 0308 	bics.w	r3, r3, r8
 80066a6:	d112      	bne.n	80066ce <_dtoa_r+0x9e>
 80066a8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80066ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80066b4:	4323      	orrs	r3, r4
 80066b6:	f000 855e 	beq.w	8007176 <_dtoa_r+0xb46>
 80066ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006914 <_dtoa_r+0x2e4>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8560 	beq.w	8007186 <_dtoa_r+0xb56>
 80066c6:	f10a 0303 	add.w	r3, sl, #3
 80066ca:	f000 bd5a 	b.w	8007182 <_dtoa_r+0xb52>
 80066ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80066d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066da:	2200      	movs	r2, #0
 80066dc:	2300      	movs	r3, #0
 80066de:	f7fa f97b 	bl	80009d8 <__aeabi_dcmpeq>
 80066e2:	4607      	mov	r7, r0
 80066e4:	b158      	cbz	r0, 80066fe <_dtoa_r+0xce>
 80066e6:	2301      	movs	r3, #1
 80066e8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066ee:	b113      	cbz	r3, 80066f6 <_dtoa_r+0xc6>
 80066f0:	4b89      	ldr	r3, [pc, #548]	@ (8006918 <_dtoa_r+0x2e8>)
 80066f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800691c <_dtoa_r+0x2ec>
 80066fa:	f000 bd44 	b.w	8007186 <_dtoa_r+0xb56>
 80066fe:	ab14      	add	r3, sp, #80	@ 0x50
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	ab15      	add	r3, sp, #84	@ 0x54
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	4648      	mov	r0, r9
 8006708:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800670c:	f001 fb24 	bl	8007d58 <__d2b>
 8006710:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006714:	9003      	str	r0, [sp, #12]
 8006716:	2e00      	cmp	r6, #0
 8006718:	d078      	beq.n	800680c <_dtoa_r+0x1dc>
 800671a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800671e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006720:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006728:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800672c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006730:	9712      	str	r7, [sp, #72]	@ 0x48
 8006732:	4619      	mov	r1, r3
 8006734:	2200      	movs	r2, #0
 8006736:	4b7a      	ldr	r3, [pc, #488]	@ (8006920 <_dtoa_r+0x2f0>)
 8006738:	f7f9 fd2e 	bl	8000198 <__aeabi_dsub>
 800673c:	a36c      	add	r3, pc, #432	@ (adr r3, 80068f0 <_dtoa_r+0x2c0>)
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	f7f9 fee1 	bl	8000508 <__aeabi_dmul>
 8006746:	a36c      	add	r3, pc, #432	@ (adr r3, 80068f8 <_dtoa_r+0x2c8>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fd26 	bl	800019c <__adddf3>
 8006750:	4604      	mov	r4, r0
 8006752:	4630      	mov	r0, r6
 8006754:	460d      	mov	r5, r1
 8006756:	f7f9 fe6d 	bl	8000434 <__aeabi_i2d>
 800675a:	a369      	add	r3, pc, #420	@ (adr r3, 8006900 <_dtoa_r+0x2d0>)
 800675c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006760:	f7f9 fed2 	bl	8000508 <__aeabi_dmul>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4620      	mov	r0, r4
 800676a:	4629      	mov	r1, r5
 800676c:	f7f9 fd16 	bl	800019c <__adddf3>
 8006770:	4604      	mov	r4, r0
 8006772:	460d      	mov	r5, r1
 8006774:	f7fa f978 	bl	8000a68 <__aeabi_d2iz>
 8006778:	2200      	movs	r2, #0
 800677a:	4607      	mov	r7, r0
 800677c:	2300      	movs	r3, #0
 800677e:	4620      	mov	r0, r4
 8006780:	4629      	mov	r1, r5
 8006782:	f7fa f933 	bl	80009ec <__aeabi_dcmplt>
 8006786:	b140      	cbz	r0, 800679a <_dtoa_r+0x16a>
 8006788:	4638      	mov	r0, r7
 800678a:	f7f9 fe53 	bl	8000434 <__aeabi_i2d>
 800678e:	4622      	mov	r2, r4
 8006790:	462b      	mov	r3, r5
 8006792:	f7fa f921 	bl	80009d8 <__aeabi_dcmpeq>
 8006796:	b900      	cbnz	r0, 800679a <_dtoa_r+0x16a>
 8006798:	3f01      	subs	r7, #1
 800679a:	2f16      	cmp	r7, #22
 800679c:	d854      	bhi.n	8006848 <_dtoa_r+0x218>
 800679e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067a2:	4b60      	ldr	r3, [pc, #384]	@ (8006924 <_dtoa_r+0x2f4>)
 80067a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7fa f91e 	bl	80009ec <__aeabi_dcmplt>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d04b      	beq.n	800684c <_dtoa_r+0x21c>
 80067b4:	2300      	movs	r3, #0
 80067b6:	3f01      	subs	r7, #1
 80067b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80067ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067bc:	1b9b      	subs	r3, r3, r6
 80067be:	1e5a      	subs	r2, r3, #1
 80067c0:	bf49      	itett	mi
 80067c2:	f1c3 0301 	rsbmi	r3, r3, #1
 80067c6:	2300      	movpl	r3, #0
 80067c8:	9304      	strmi	r3, [sp, #16]
 80067ca:	2300      	movmi	r3, #0
 80067cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80067ce:	bf54      	ite	pl
 80067d0:	9304      	strpl	r3, [sp, #16]
 80067d2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80067d4:	2f00      	cmp	r7, #0
 80067d6:	db3b      	blt.n	8006850 <_dtoa_r+0x220>
 80067d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067da:	970e      	str	r7, [sp, #56]	@ 0x38
 80067dc:	443b      	add	r3, r7
 80067de:	9309      	str	r3, [sp, #36]	@ 0x24
 80067e0:	2300      	movs	r3, #0
 80067e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80067e4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d865      	bhi.n	80068b6 <_dtoa_r+0x286>
 80067ea:	2b05      	cmp	r3, #5
 80067ec:	bfc4      	itt	gt
 80067ee:	3b04      	subgt	r3, #4
 80067f0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80067f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067f4:	bfc8      	it	gt
 80067f6:	2400      	movgt	r4, #0
 80067f8:	f1a3 0302 	sub.w	r3, r3, #2
 80067fc:	bfd8      	it	le
 80067fe:	2401      	movle	r4, #1
 8006800:	2b03      	cmp	r3, #3
 8006802:	d864      	bhi.n	80068ce <_dtoa_r+0x29e>
 8006804:	e8df f003 	tbb	[pc, r3]
 8006808:	2c385553 	.word	0x2c385553
 800680c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006810:	441e      	add	r6, r3
 8006812:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006816:	2b20      	cmp	r3, #32
 8006818:	bfc1      	itttt	gt
 800681a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800681e:	fa08 f803 	lslgt.w	r8, r8, r3
 8006822:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006826:	fa24 f303 	lsrgt.w	r3, r4, r3
 800682a:	bfd6      	itet	le
 800682c:	f1c3 0320 	rsble	r3, r3, #32
 8006830:	ea48 0003 	orrgt.w	r0, r8, r3
 8006834:	fa04 f003 	lslle.w	r0, r4, r3
 8006838:	f7f9 fdec 	bl	8000414 <__aeabi_ui2d>
 800683c:	2201      	movs	r2, #1
 800683e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006842:	3e01      	subs	r6, #1
 8006844:	9212      	str	r2, [sp, #72]	@ 0x48
 8006846:	e774      	b.n	8006732 <_dtoa_r+0x102>
 8006848:	2301      	movs	r3, #1
 800684a:	e7b5      	b.n	80067b8 <_dtoa_r+0x188>
 800684c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800684e:	e7b4      	b.n	80067ba <_dtoa_r+0x18a>
 8006850:	9b04      	ldr	r3, [sp, #16]
 8006852:	1bdb      	subs	r3, r3, r7
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	427b      	negs	r3, r7
 8006858:	930a      	str	r3, [sp, #40]	@ 0x28
 800685a:	2300      	movs	r3, #0
 800685c:	930e      	str	r3, [sp, #56]	@ 0x38
 800685e:	e7c1      	b.n	80067e4 <_dtoa_r+0x1b4>
 8006860:	2301      	movs	r3, #1
 8006862:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006864:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006866:	eb07 0b03 	add.w	fp, r7, r3
 800686a:	f10b 0301 	add.w	r3, fp, #1
 800686e:	2b01      	cmp	r3, #1
 8006870:	9308      	str	r3, [sp, #32]
 8006872:	bfb8      	it	lt
 8006874:	2301      	movlt	r3, #1
 8006876:	e006      	b.n	8006886 <_dtoa_r+0x256>
 8006878:	2301      	movs	r3, #1
 800687a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800687c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800687e:	2b00      	cmp	r3, #0
 8006880:	dd28      	ble.n	80068d4 <_dtoa_r+0x2a4>
 8006882:	469b      	mov	fp, r3
 8006884:	9308      	str	r3, [sp, #32]
 8006886:	2100      	movs	r1, #0
 8006888:	2204      	movs	r2, #4
 800688a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800688e:	f102 0514 	add.w	r5, r2, #20
 8006892:	429d      	cmp	r5, r3
 8006894:	d926      	bls.n	80068e4 <_dtoa_r+0x2b4>
 8006896:	6041      	str	r1, [r0, #4]
 8006898:	4648      	mov	r0, r9
 800689a:	f000 ff3b 	bl	8007714 <_Balloc>
 800689e:	4682      	mov	sl, r0
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d143      	bne.n	800692c <_dtoa_r+0x2fc>
 80068a4:	4602      	mov	r2, r0
 80068a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80068aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006928 <_dtoa_r+0x2f8>)
 80068ac:	e6d4      	b.n	8006658 <_dtoa_r+0x28>
 80068ae:	2300      	movs	r3, #0
 80068b0:	e7e3      	b.n	800687a <_dtoa_r+0x24a>
 80068b2:	2300      	movs	r3, #0
 80068b4:	e7d5      	b.n	8006862 <_dtoa_r+0x232>
 80068b6:	2401      	movs	r4, #1
 80068b8:	2300      	movs	r3, #0
 80068ba:	940b      	str	r4, [sp, #44]	@ 0x2c
 80068bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80068be:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80068c2:	2200      	movs	r2, #0
 80068c4:	2312      	movs	r3, #18
 80068c6:	f8cd b020 	str.w	fp, [sp, #32]
 80068ca:	9221      	str	r2, [sp, #132]	@ 0x84
 80068cc:	e7db      	b.n	8006886 <_dtoa_r+0x256>
 80068ce:	2301      	movs	r3, #1
 80068d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068d2:	e7f4      	b.n	80068be <_dtoa_r+0x28e>
 80068d4:	f04f 0b01 	mov.w	fp, #1
 80068d8:	465b      	mov	r3, fp
 80068da:	f8cd b020 	str.w	fp, [sp, #32]
 80068de:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80068e2:	e7d0      	b.n	8006886 <_dtoa_r+0x256>
 80068e4:	3101      	adds	r1, #1
 80068e6:	0052      	lsls	r2, r2, #1
 80068e8:	e7d1      	b.n	800688e <_dtoa_r+0x25e>
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w
 80068f0:	636f4361 	.word	0x636f4361
 80068f4:	3fd287a7 	.word	0x3fd287a7
 80068f8:	8b60c8b3 	.word	0x8b60c8b3
 80068fc:	3fc68a28 	.word	0x3fc68a28
 8006900:	509f79fb 	.word	0x509f79fb
 8006904:	3fd34413 	.word	0x3fd34413
 8006908:	08008e11 	.word	0x08008e11
 800690c:	08008e28 	.word	0x08008e28
 8006910:	7ff00000 	.word	0x7ff00000
 8006914:	08008e0d 	.word	0x08008e0d
 8006918:	08008de1 	.word	0x08008de1
 800691c:	08008de0 	.word	0x08008de0
 8006920:	3ff80000 	.word	0x3ff80000
 8006924:	08008f78 	.word	0x08008f78
 8006928:	08008e80 	.word	0x08008e80
 800692c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006930:	6018      	str	r0, [r3, #0]
 8006932:	9b08      	ldr	r3, [sp, #32]
 8006934:	2b0e      	cmp	r3, #14
 8006936:	f200 80a1 	bhi.w	8006a7c <_dtoa_r+0x44c>
 800693a:	2c00      	cmp	r4, #0
 800693c:	f000 809e 	beq.w	8006a7c <_dtoa_r+0x44c>
 8006940:	2f00      	cmp	r7, #0
 8006942:	dd33      	ble.n	80069ac <_dtoa_r+0x37c>
 8006944:	4b9c      	ldr	r3, [pc, #624]	@ (8006bb8 <_dtoa_r+0x588>)
 8006946:	f007 020f 	and.w	r2, r7, #15
 800694a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800694e:	05f8      	lsls	r0, r7, #23
 8006950:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006954:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006958:	ea4f 1427 	mov.w	r4, r7, asr #4
 800695c:	d516      	bpl.n	800698c <_dtoa_r+0x35c>
 800695e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006962:	4b96      	ldr	r3, [pc, #600]	@ (8006bbc <_dtoa_r+0x58c>)
 8006964:	2603      	movs	r6, #3
 8006966:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800696a:	f7f9 fef7 	bl	800075c <__aeabi_ddiv>
 800696e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006972:	f004 040f 	and.w	r4, r4, #15
 8006976:	4d91      	ldr	r5, [pc, #580]	@ (8006bbc <_dtoa_r+0x58c>)
 8006978:	b954      	cbnz	r4, 8006990 <_dtoa_r+0x360>
 800697a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800697e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006982:	f7f9 feeb 	bl	800075c <__aeabi_ddiv>
 8006986:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800698a:	e028      	b.n	80069de <_dtoa_r+0x3ae>
 800698c:	2602      	movs	r6, #2
 800698e:	e7f2      	b.n	8006976 <_dtoa_r+0x346>
 8006990:	07e1      	lsls	r1, r4, #31
 8006992:	d508      	bpl.n	80069a6 <_dtoa_r+0x376>
 8006994:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800699c:	f7f9 fdb4 	bl	8000508 <__aeabi_dmul>
 80069a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069a4:	3601      	adds	r6, #1
 80069a6:	1064      	asrs	r4, r4, #1
 80069a8:	3508      	adds	r5, #8
 80069aa:	e7e5      	b.n	8006978 <_dtoa_r+0x348>
 80069ac:	f000 80af 	beq.w	8006b0e <_dtoa_r+0x4de>
 80069b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069b4:	427c      	negs	r4, r7
 80069b6:	4b80      	ldr	r3, [pc, #512]	@ (8006bb8 <_dtoa_r+0x588>)
 80069b8:	f004 020f 	and.w	r2, r4, #15
 80069bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c4:	f7f9 fda0 	bl	8000508 <__aeabi_dmul>
 80069c8:	2602      	movs	r6, #2
 80069ca:	2300      	movs	r3, #0
 80069cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069d0:	4d7a      	ldr	r5, [pc, #488]	@ (8006bbc <_dtoa_r+0x58c>)
 80069d2:	1124      	asrs	r4, r4, #4
 80069d4:	2c00      	cmp	r4, #0
 80069d6:	f040 808f 	bne.w	8006af8 <_dtoa_r+0x4c8>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1d3      	bne.n	8006986 <_dtoa_r+0x356>
 80069de:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80069e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8094 	beq.w	8006b12 <_dtoa_r+0x4e2>
 80069ea:	2200      	movs	r2, #0
 80069ec:	4620      	mov	r0, r4
 80069ee:	4629      	mov	r1, r5
 80069f0:	4b73      	ldr	r3, [pc, #460]	@ (8006bc0 <_dtoa_r+0x590>)
 80069f2:	f7f9 fffb 	bl	80009ec <__aeabi_dcmplt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f000 808b 	beq.w	8006b12 <_dtoa_r+0x4e2>
 80069fc:	9b08      	ldr	r3, [sp, #32]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8087 	beq.w	8006b12 <_dtoa_r+0x4e2>
 8006a04:	f1bb 0f00 	cmp.w	fp, #0
 8006a08:	dd34      	ble.n	8006a74 <_dtoa_r+0x444>
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	4629      	mov	r1, r5
 8006a10:	4b6c      	ldr	r3, [pc, #432]	@ (8006bc4 <_dtoa_r+0x594>)
 8006a12:	f7f9 fd79 	bl	8000508 <__aeabi_dmul>
 8006a16:	465c      	mov	r4, fp
 8006a18:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a1c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006a20:	3601      	adds	r6, #1
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7f9 fd06 	bl	8000434 <__aeabi_i2d>
 8006a28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a2c:	f7f9 fd6c 	bl	8000508 <__aeabi_dmul>
 8006a30:	2200      	movs	r2, #0
 8006a32:	4b65      	ldr	r3, [pc, #404]	@ (8006bc8 <_dtoa_r+0x598>)
 8006a34:	f7f9 fbb2 	bl	800019c <__adddf3>
 8006a38:	4605      	mov	r5, r0
 8006a3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a3e:	2c00      	cmp	r4, #0
 8006a40:	d16a      	bne.n	8006b18 <_dtoa_r+0x4e8>
 8006a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a46:	2200      	movs	r2, #0
 8006a48:	4b60      	ldr	r3, [pc, #384]	@ (8006bcc <_dtoa_r+0x59c>)
 8006a4a:	f7f9 fba5 	bl	8000198 <__aeabi_dsub>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a56:	462a      	mov	r2, r5
 8006a58:	4633      	mov	r3, r6
 8006a5a:	f7f9 ffe5 	bl	8000a28 <__aeabi_dcmpgt>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f040 8298 	bne.w	8006f94 <_dtoa_r+0x964>
 8006a64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a68:	462a      	mov	r2, r5
 8006a6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a6e:	f7f9 ffbd 	bl	80009ec <__aeabi_dcmplt>
 8006a72:	bb38      	cbnz	r0, 8006ac4 <_dtoa_r+0x494>
 8006a74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006a78:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f2c0 8157 	blt.w	8006d32 <_dtoa_r+0x702>
 8006a84:	2f0e      	cmp	r7, #14
 8006a86:	f300 8154 	bgt.w	8006d32 <_dtoa_r+0x702>
 8006a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8006bb8 <_dtoa_r+0x588>)
 8006a8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a94:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f280 80e5 	bge.w	8006c6a <_dtoa_r+0x63a>
 8006aa0:	9b08      	ldr	r3, [sp, #32]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f300 80e1 	bgt.w	8006c6a <_dtoa_r+0x63a>
 8006aa8:	d10c      	bne.n	8006ac4 <_dtoa_r+0x494>
 8006aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	4b46      	ldr	r3, [pc, #280]	@ (8006bcc <_dtoa_r+0x59c>)
 8006ab2:	f7f9 fd29 	bl	8000508 <__aeabi_dmul>
 8006ab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006aba:	f7f9 ffab 	bl	8000a14 <__aeabi_dcmpge>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f000 8266 	beq.w	8006f90 <_dtoa_r+0x960>
 8006ac4:	2400      	movs	r4, #0
 8006ac6:	4625      	mov	r5, r4
 8006ac8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006aca:	4656      	mov	r6, sl
 8006acc:	ea6f 0803 	mvn.w	r8, r3
 8006ad0:	2700      	movs	r7, #0
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	4648      	mov	r0, r9
 8006ad6:	f000 fe5d 	bl	8007794 <_Bfree>
 8006ada:	2d00      	cmp	r5, #0
 8006adc:	f000 80bd 	beq.w	8006c5a <_dtoa_r+0x62a>
 8006ae0:	b12f      	cbz	r7, 8006aee <_dtoa_r+0x4be>
 8006ae2:	42af      	cmp	r7, r5
 8006ae4:	d003      	beq.n	8006aee <_dtoa_r+0x4be>
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	4648      	mov	r0, r9
 8006aea:	f000 fe53 	bl	8007794 <_Bfree>
 8006aee:	4629      	mov	r1, r5
 8006af0:	4648      	mov	r0, r9
 8006af2:	f000 fe4f 	bl	8007794 <_Bfree>
 8006af6:	e0b0      	b.n	8006c5a <_dtoa_r+0x62a>
 8006af8:	07e2      	lsls	r2, r4, #31
 8006afa:	d505      	bpl.n	8006b08 <_dtoa_r+0x4d8>
 8006afc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b00:	f7f9 fd02 	bl	8000508 <__aeabi_dmul>
 8006b04:	2301      	movs	r3, #1
 8006b06:	3601      	adds	r6, #1
 8006b08:	1064      	asrs	r4, r4, #1
 8006b0a:	3508      	adds	r5, #8
 8006b0c:	e762      	b.n	80069d4 <_dtoa_r+0x3a4>
 8006b0e:	2602      	movs	r6, #2
 8006b10:	e765      	b.n	80069de <_dtoa_r+0x3ae>
 8006b12:	46b8      	mov	r8, r7
 8006b14:	9c08      	ldr	r4, [sp, #32]
 8006b16:	e784      	b.n	8006a22 <_dtoa_r+0x3f2>
 8006b18:	4b27      	ldr	r3, [pc, #156]	@ (8006bb8 <_dtoa_r+0x588>)
 8006b1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b24:	4454      	add	r4, sl
 8006b26:	2900      	cmp	r1, #0
 8006b28:	d054      	beq.n	8006bd4 <_dtoa_r+0x5a4>
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	4928      	ldr	r1, [pc, #160]	@ (8006bd0 <_dtoa_r+0x5a0>)
 8006b2e:	f7f9 fe15 	bl	800075c <__aeabi_ddiv>
 8006b32:	4633      	mov	r3, r6
 8006b34:	462a      	mov	r2, r5
 8006b36:	f7f9 fb2f 	bl	8000198 <__aeabi_dsub>
 8006b3a:	4656      	mov	r6, sl
 8006b3c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b44:	f7f9 ff90 	bl	8000a68 <__aeabi_d2iz>
 8006b48:	4605      	mov	r5, r0
 8006b4a:	f7f9 fc73 	bl	8000434 <__aeabi_i2d>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b56:	f7f9 fb1f 	bl	8000198 <__aeabi_dsub>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	3530      	adds	r5, #48	@ 0x30
 8006b60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b68:	f806 5b01 	strb.w	r5, [r6], #1
 8006b6c:	f7f9 ff3e 	bl	80009ec <__aeabi_dcmplt>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d172      	bne.n	8006c5a <_dtoa_r+0x62a>
 8006b74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b78:	2000      	movs	r0, #0
 8006b7a:	4911      	ldr	r1, [pc, #68]	@ (8006bc0 <_dtoa_r+0x590>)
 8006b7c:	f7f9 fb0c 	bl	8000198 <__aeabi_dsub>
 8006b80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b84:	f7f9 ff32 	bl	80009ec <__aeabi_dcmplt>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	f040 80b4 	bne.w	8006cf6 <_dtoa_r+0x6c6>
 8006b8e:	42a6      	cmp	r6, r4
 8006b90:	f43f af70 	beq.w	8006a74 <_dtoa_r+0x444>
 8006b94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc4 <_dtoa_r+0x594>)
 8006b9c:	f7f9 fcb4 	bl	8000508 <__aeabi_dmul>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006baa:	4b06      	ldr	r3, [pc, #24]	@ (8006bc4 <_dtoa_r+0x594>)
 8006bac:	f7f9 fcac 	bl	8000508 <__aeabi_dmul>
 8006bb0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bb4:	e7c4      	b.n	8006b40 <_dtoa_r+0x510>
 8006bb6:	bf00      	nop
 8006bb8:	08008f78 	.word	0x08008f78
 8006bbc:	08008f50 	.word	0x08008f50
 8006bc0:	3ff00000 	.word	0x3ff00000
 8006bc4:	40240000 	.word	0x40240000
 8006bc8:	401c0000 	.word	0x401c0000
 8006bcc:	40140000 	.word	0x40140000
 8006bd0:	3fe00000 	.word	0x3fe00000
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f7f9 fc96 	bl	8000508 <__aeabi_dmul>
 8006bdc:	4656      	mov	r6, sl
 8006bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006be2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006be8:	f7f9 ff3e 	bl	8000a68 <__aeabi_d2iz>
 8006bec:	4605      	mov	r5, r0
 8006bee:	f7f9 fc21 	bl	8000434 <__aeabi_i2d>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bfa:	f7f9 facd 	bl	8000198 <__aeabi_dsub>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	460b      	mov	r3, r1
 8006c02:	3530      	adds	r5, #48	@ 0x30
 8006c04:	f806 5b01 	strb.w	r5, [r6], #1
 8006c08:	42a6      	cmp	r6, r4
 8006c0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	d124      	bne.n	8006c5e <_dtoa_r+0x62e>
 8006c14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c18:	4bae      	ldr	r3, [pc, #696]	@ (8006ed4 <_dtoa_r+0x8a4>)
 8006c1a:	f7f9 fabf 	bl	800019c <__adddf3>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c26:	f7f9 feff 	bl	8000a28 <__aeabi_dcmpgt>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d163      	bne.n	8006cf6 <_dtoa_r+0x6c6>
 8006c2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c32:	2000      	movs	r0, #0
 8006c34:	49a7      	ldr	r1, [pc, #668]	@ (8006ed4 <_dtoa_r+0x8a4>)
 8006c36:	f7f9 faaf 	bl	8000198 <__aeabi_dsub>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c42:	f7f9 fed3 	bl	80009ec <__aeabi_dcmplt>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f43f af14 	beq.w	8006a74 <_dtoa_r+0x444>
 8006c4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006c4e:	1e73      	subs	r3, r6, #1
 8006c50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c56:	2b30      	cmp	r3, #48	@ 0x30
 8006c58:	d0f8      	beq.n	8006c4c <_dtoa_r+0x61c>
 8006c5a:	4647      	mov	r7, r8
 8006c5c:	e03b      	b.n	8006cd6 <_dtoa_r+0x6a6>
 8006c5e:	4b9e      	ldr	r3, [pc, #632]	@ (8006ed8 <_dtoa_r+0x8a8>)
 8006c60:	f7f9 fc52 	bl	8000508 <__aeabi_dmul>
 8006c64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c68:	e7bc      	b.n	8006be4 <_dtoa_r+0x5b4>
 8006c6a:	4656      	mov	r6, sl
 8006c6c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c74:	4620      	mov	r0, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	f7f9 fd70 	bl	800075c <__aeabi_ddiv>
 8006c7c:	f7f9 fef4 	bl	8000a68 <__aeabi_d2iz>
 8006c80:	4680      	mov	r8, r0
 8006c82:	f7f9 fbd7 	bl	8000434 <__aeabi_i2d>
 8006c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c8a:	f7f9 fc3d 	bl	8000508 <__aeabi_dmul>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4620      	mov	r0, r4
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7f9 fa7f 	bl	8000198 <__aeabi_dsub>
 8006c9a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c9e:	9d08      	ldr	r5, [sp, #32]
 8006ca0:	f806 4b01 	strb.w	r4, [r6], #1
 8006ca4:	eba6 040a 	sub.w	r4, r6, sl
 8006ca8:	42a5      	cmp	r5, r4
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	d133      	bne.n	8006d18 <_dtoa_r+0x6e8>
 8006cb0:	f7f9 fa74 	bl	800019c <__adddf3>
 8006cb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cb8:	4604      	mov	r4, r0
 8006cba:	460d      	mov	r5, r1
 8006cbc:	f7f9 feb4 	bl	8000a28 <__aeabi_dcmpgt>
 8006cc0:	b9c0      	cbnz	r0, 8006cf4 <_dtoa_r+0x6c4>
 8006cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 fe85 	bl	80009d8 <__aeabi_dcmpeq>
 8006cce:	b110      	cbz	r0, 8006cd6 <_dtoa_r+0x6a6>
 8006cd0:	f018 0f01 	tst.w	r8, #1
 8006cd4:	d10e      	bne.n	8006cf4 <_dtoa_r+0x6c4>
 8006cd6:	4648      	mov	r0, r9
 8006cd8:	9903      	ldr	r1, [sp, #12]
 8006cda:	f000 fd5b 	bl	8007794 <_Bfree>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	7033      	strb	r3, [r6, #0]
 8006ce2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006ce4:	3701      	adds	r7, #1
 8006ce6:	601f      	str	r7, [r3, #0]
 8006ce8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 824b 	beq.w	8007186 <_dtoa_r+0xb56>
 8006cf0:	601e      	str	r6, [r3, #0]
 8006cf2:	e248      	b.n	8007186 <_dtoa_r+0xb56>
 8006cf4:	46b8      	mov	r8, r7
 8006cf6:	4633      	mov	r3, r6
 8006cf8:	461e      	mov	r6, r3
 8006cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cfe:	2a39      	cmp	r2, #57	@ 0x39
 8006d00:	d106      	bne.n	8006d10 <_dtoa_r+0x6e0>
 8006d02:	459a      	cmp	sl, r3
 8006d04:	d1f8      	bne.n	8006cf8 <_dtoa_r+0x6c8>
 8006d06:	2230      	movs	r2, #48	@ 0x30
 8006d08:	f108 0801 	add.w	r8, r8, #1
 8006d0c:	f88a 2000 	strb.w	r2, [sl]
 8006d10:	781a      	ldrb	r2, [r3, #0]
 8006d12:	3201      	adds	r2, #1
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e7a0      	b.n	8006c5a <_dtoa_r+0x62a>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4b6f      	ldr	r3, [pc, #444]	@ (8006ed8 <_dtoa_r+0x8a8>)
 8006d1c:	f7f9 fbf4 	bl	8000508 <__aeabi_dmul>
 8006d20:	2200      	movs	r2, #0
 8006d22:	2300      	movs	r3, #0
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	f7f9 fe56 	bl	80009d8 <__aeabi_dcmpeq>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d09f      	beq.n	8006c70 <_dtoa_r+0x640>
 8006d30:	e7d1      	b.n	8006cd6 <_dtoa_r+0x6a6>
 8006d32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d34:	2a00      	cmp	r2, #0
 8006d36:	f000 80ea 	beq.w	8006f0e <_dtoa_r+0x8de>
 8006d3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d3c:	2a01      	cmp	r2, #1
 8006d3e:	f300 80cd 	bgt.w	8006edc <_dtoa_r+0x8ac>
 8006d42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	f000 80c1 	beq.w	8006ecc <_dtoa_r+0x89c>
 8006d4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d50:	9e04      	ldr	r6, [sp, #16]
 8006d52:	9a04      	ldr	r2, [sp, #16]
 8006d54:	2101      	movs	r1, #1
 8006d56:	441a      	add	r2, r3
 8006d58:	9204      	str	r2, [sp, #16]
 8006d5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d5c:	4648      	mov	r0, r9
 8006d5e:	441a      	add	r2, r3
 8006d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d62:	f000 fdcb 	bl	80078fc <__i2b>
 8006d66:	4605      	mov	r5, r0
 8006d68:	b166      	cbz	r6, 8006d84 <_dtoa_r+0x754>
 8006d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dd09      	ble.n	8006d84 <_dtoa_r+0x754>
 8006d70:	42b3      	cmp	r3, r6
 8006d72:	bfa8      	it	ge
 8006d74:	4633      	movge	r3, r6
 8006d76:	9a04      	ldr	r2, [sp, #16]
 8006d78:	1af6      	subs	r6, r6, r3
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	9204      	str	r2, [sp, #16]
 8006d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d86:	b30b      	cbz	r3, 8006dcc <_dtoa_r+0x79c>
 8006d88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 80c6 	beq.w	8006f1c <_dtoa_r+0x8ec>
 8006d90:	2c00      	cmp	r4, #0
 8006d92:	f000 80c0 	beq.w	8006f16 <_dtoa_r+0x8e6>
 8006d96:	4629      	mov	r1, r5
 8006d98:	4622      	mov	r2, r4
 8006d9a:	4648      	mov	r0, r9
 8006d9c:	f000 fe66 	bl	8007a6c <__pow5mult>
 8006da0:	9a03      	ldr	r2, [sp, #12]
 8006da2:	4601      	mov	r1, r0
 8006da4:	4605      	mov	r5, r0
 8006da6:	4648      	mov	r0, r9
 8006da8:	f000 fdbe 	bl	8007928 <__multiply>
 8006dac:	9903      	ldr	r1, [sp, #12]
 8006dae:	4680      	mov	r8, r0
 8006db0:	4648      	mov	r0, r9
 8006db2:	f000 fcef 	bl	8007794 <_Bfree>
 8006db6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db8:	1b1b      	subs	r3, r3, r4
 8006dba:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dbc:	f000 80b1 	beq.w	8006f22 <_dtoa_r+0x8f2>
 8006dc0:	4641      	mov	r1, r8
 8006dc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dc4:	4648      	mov	r0, r9
 8006dc6:	f000 fe51 	bl	8007a6c <__pow5mult>
 8006dca:	9003      	str	r0, [sp, #12]
 8006dcc:	2101      	movs	r1, #1
 8006dce:	4648      	mov	r0, r9
 8006dd0:	f000 fd94 	bl	80078fc <__i2b>
 8006dd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 81d8 	beq.w	800718e <_dtoa_r+0xb5e>
 8006dde:	461a      	mov	r2, r3
 8006de0:	4601      	mov	r1, r0
 8006de2:	4648      	mov	r0, r9
 8006de4:	f000 fe42 	bl	8007a6c <__pow5mult>
 8006de8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dea:	4604      	mov	r4, r0
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	f300 809f 	bgt.w	8006f30 <_dtoa_r+0x900>
 8006df2:	9b06      	ldr	r3, [sp, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8097 	bne.w	8006f28 <_dtoa_r+0x8f8>
 8006dfa:	9b07      	ldr	r3, [sp, #28]
 8006dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 8093 	bne.w	8006f2c <_dtoa_r+0x8fc>
 8006e06:	9b07      	ldr	r3, [sp, #28]
 8006e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e0c:	0d1b      	lsrs	r3, r3, #20
 8006e0e:	051b      	lsls	r3, r3, #20
 8006e10:	b133      	cbz	r3, 8006e20 <_dtoa_r+0x7f0>
 8006e12:	9b04      	ldr	r3, [sp, #16]
 8006e14:	3301      	adds	r3, #1
 8006e16:	9304      	str	r3, [sp, #16]
 8006e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e1e:	2301      	movs	r3, #1
 8006e20:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 81b8 	beq.w	800719a <_dtoa_r+0xb6a>
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e30:	6918      	ldr	r0, [r3, #16]
 8006e32:	f000 fd17 	bl	8007864 <__hi0bits>
 8006e36:	f1c0 0020 	rsb	r0, r0, #32
 8006e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e3c:	4418      	add	r0, r3
 8006e3e:	f010 001f 	ands.w	r0, r0, #31
 8006e42:	f000 8082 	beq.w	8006f4a <_dtoa_r+0x91a>
 8006e46:	f1c0 0320 	rsb	r3, r0, #32
 8006e4a:	2b04      	cmp	r3, #4
 8006e4c:	dd73      	ble.n	8006f36 <_dtoa_r+0x906>
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	f1c0 001c 	rsb	r0, r0, #28
 8006e54:	4403      	add	r3, r0
 8006e56:	9304      	str	r3, [sp, #16]
 8006e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5a:	4406      	add	r6, r0
 8006e5c:	4403      	add	r3, r0
 8006e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e60:	9b04      	ldr	r3, [sp, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd05      	ble.n	8006e72 <_dtoa_r+0x842>
 8006e66:	461a      	mov	r2, r3
 8006e68:	4648      	mov	r0, r9
 8006e6a:	9903      	ldr	r1, [sp, #12]
 8006e6c:	f000 fe58 	bl	8007b20 <__lshift>
 8006e70:	9003      	str	r0, [sp, #12]
 8006e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dd05      	ble.n	8006e84 <_dtoa_r+0x854>
 8006e78:	4621      	mov	r1, r4
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4648      	mov	r0, r9
 8006e7e:	f000 fe4f 	bl	8007b20 <__lshift>
 8006e82:	4604      	mov	r4, r0
 8006e84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d061      	beq.n	8006f4e <_dtoa_r+0x91e>
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	9803      	ldr	r0, [sp, #12]
 8006e8e:	f000 feb3 	bl	8007bf8 <__mcmp>
 8006e92:	2800      	cmp	r0, #0
 8006e94:	da5b      	bge.n	8006f4e <_dtoa_r+0x91e>
 8006e96:	2300      	movs	r3, #0
 8006e98:	220a      	movs	r2, #10
 8006e9a:	4648      	mov	r0, r9
 8006e9c:	9903      	ldr	r1, [sp, #12]
 8006e9e:	f000 fc9b 	bl	80077d8 <__multadd>
 8006ea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ea4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006ea8:	9003      	str	r0, [sp, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 8177 	beq.w	800719e <_dtoa_r+0xb6e>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	220a      	movs	r2, #10
 8006eb6:	4648      	mov	r0, r9
 8006eb8:	f000 fc8e 	bl	80077d8 <__multadd>
 8006ebc:	f1bb 0f00 	cmp.w	fp, #0
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	dc6f      	bgt.n	8006fa4 <_dtoa_r+0x974>
 8006ec4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	dc49      	bgt.n	8006f5e <_dtoa_r+0x92e>
 8006eca:	e06b      	b.n	8006fa4 <_dtoa_r+0x974>
 8006ecc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ece:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006ed2:	e73c      	b.n	8006d4e <_dtoa_r+0x71e>
 8006ed4:	3fe00000 	.word	0x3fe00000
 8006ed8:	40240000 	.word	0x40240000
 8006edc:	9b08      	ldr	r3, [sp, #32]
 8006ede:	1e5c      	subs	r4, r3, #1
 8006ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	db09      	blt.n	8006efa <_dtoa_r+0x8ca>
 8006ee6:	1b1c      	subs	r4, r3, r4
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f6bf af30 	bge.w	8006d50 <_dtoa_r+0x720>
 8006ef0:	9b04      	ldr	r3, [sp, #16]
 8006ef2:	9a08      	ldr	r2, [sp, #32]
 8006ef4:	1a9e      	subs	r6, r3, r2
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e72b      	b.n	8006d52 <_dtoa_r+0x722>
 8006efa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006efe:	1ae3      	subs	r3, r4, r3
 8006f00:	441a      	add	r2, r3
 8006f02:	940a      	str	r4, [sp, #40]	@ 0x28
 8006f04:	9e04      	ldr	r6, [sp, #16]
 8006f06:	2400      	movs	r4, #0
 8006f08:	9b08      	ldr	r3, [sp, #32]
 8006f0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f0c:	e721      	b.n	8006d52 <_dtoa_r+0x722>
 8006f0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f10:	9e04      	ldr	r6, [sp, #16]
 8006f12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f14:	e728      	b.n	8006d68 <_dtoa_r+0x738>
 8006f16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006f1a:	e751      	b.n	8006dc0 <_dtoa_r+0x790>
 8006f1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f1e:	9903      	ldr	r1, [sp, #12]
 8006f20:	e750      	b.n	8006dc4 <_dtoa_r+0x794>
 8006f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f26:	e751      	b.n	8006dcc <_dtoa_r+0x79c>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e779      	b.n	8006e20 <_dtoa_r+0x7f0>
 8006f2c:	9b06      	ldr	r3, [sp, #24]
 8006f2e:	e777      	b.n	8006e20 <_dtoa_r+0x7f0>
 8006f30:	2300      	movs	r3, #0
 8006f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f34:	e779      	b.n	8006e2a <_dtoa_r+0x7fa>
 8006f36:	d093      	beq.n	8006e60 <_dtoa_r+0x830>
 8006f38:	9a04      	ldr	r2, [sp, #16]
 8006f3a:	331c      	adds	r3, #28
 8006f3c:	441a      	add	r2, r3
 8006f3e:	9204      	str	r2, [sp, #16]
 8006f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f42:	441e      	add	r6, r3
 8006f44:	441a      	add	r2, r3
 8006f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f48:	e78a      	b.n	8006e60 <_dtoa_r+0x830>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	e7f4      	b.n	8006f38 <_dtoa_r+0x908>
 8006f4e:	9b08      	ldr	r3, [sp, #32]
 8006f50:	46b8      	mov	r8, r7
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	dc20      	bgt.n	8006f98 <_dtoa_r+0x968>
 8006f56:	469b      	mov	fp, r3
 8006f58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	dd1e      	ble.n	8006f9c <_dtoa_r+0x96c>
 8006f5e:	f1bb 0f00 	cmp.w	fp, #0
 8006f62:	f47f adb1 	bne.w	8006ac8 <_dtoa_r+0x498>
 8006f66:	4621      	mov	r1, r4
 8006f68:	465b      	mov	r3, fp
 8006f6a:	2205      	movs	r2, #5
 8006f6c:	4648      	mov	r0, r9
 8006f6e:	f000 fc33 	bl	80077d8 <__multadd>
 8006f72:	4601      	mov	r1, r0
 8006f74:	4604      	mov	r4, r0
 8006f76:	9803      	ldr	r0, [sp, #12]
 8006f78:	f000 fe3e 	bl	8007bf8 <__mcmp>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	f77f ada3 	ble.w	8006ac8 <_dtoa_r+0x498>
 8006f82:	4656      	mov	r6, sl
 8006f84:	2331      	movs	r3, #49	@ 0x31
 8006f86:	f108 0801 	add.w	r8, r8, #1
 8006f8a:	f806 3b01 	strb.w	r3, [r6], #1
 8006f8e:	e59f      	b.n	8006ad0 <_dtoa_r+0x4a0>
 8006f90:	46b8      	mov	r8, r7
 8006f92:	9c08      	ldr	r4, [sp, #32]
 8006f94:	4625      	mov	r5, r4
 8006f96:	e7f4      	b.n	8006f82 <_dtoa_r+0x952>
 8006f98:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006f9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 8101 	beq.w	80071a6 <_dtoa_r+0xb76>
 8006fa4:	2e00      	cmp	r6, #0
 8006fa6:	dd05      	ble.n	8006fb4 <_dtoa_r+0x984>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	4632      	mov	r2, r6
 8006fac:	4648      	mov	r0, r9
 8006fae:	f000 fdb7 	bl	8007b20 <__lshift>
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d05c      	beq.n	8007074 <_dtoa_r+0xa44>
 8006fba:	4648      	mov	r0, r9
 8006fbc:	6869      	ldr	r1, [r5, #4]
 8006fbe:	f000 fba9 	bl	8007714 <_Balloc>
 8006fc2:	4606      	mov	r6, r0
 8006fc4:	b928      	cbnz	r0, 8006fd2 <_dtoa_r+0x9a2>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006fcc:	4b80      	ldr	r3, [pc, #512]	@ (80071d0 <_dtoa_r+0xba0>)
 8006fce:	f7ff bb43 	b.w	8006658 <_dtoa_r+0x28>
 8006fd2:	692a      	ldr	r2, [r5, #16]
 8006fd4:	f105 010c 	add.w	r1, r5, #12
 8006fd8:	3202      	adds	r2, #2
 8006fda:	0092      	lsls	r2, r2, #2
 8006fdc:	300c      	adds	r0, #12
 8006fde:	f001 f8c5 	bl	800816c <memcpy>
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4648      	mov	r0, r9
 8006fe8:	f000 fd9a 	bl	8007b20 <__lshift>
 8006fec:	462f      	mov	r7, r5
 8006fee:	4605      	mov	r5, r0
 8006ff0:	f10a 0301 	add.w	r3, sl, #1
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	eb0a 030b 	add.w	r3, sl, fp
 8006ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ffc:	9b06      	ldr	r3, [sp, #24]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	9309      	str	r3, [sp, #36]	@ 0x24
 8007004:	9b04      	ldr	r3, [sp, #16]
 8007006:	4621      	mov	r1, r4
 8007008:	9803      	ldr	r0, [sp, #12]
 800700a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800700e:	f7ff fa85 	bl	800651c <quorem>
 8007012:	4603      	mov	r3, r0
 8007014:	4639      	mov	r1, r7
 8007016:	3330      	adds	r3, #48	@ 0x30
 8007018:	9006      	str	r0, [sp, #24]
 800701a:	9803      	ldr	r0, [sp, #12]
 800701c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800701e:	f000 fdeb 	bl	8007bf8 <__mcmp>
 8007022:	462a      	mov	r2, r5
 8007024:	9008      	str	r0, [sp, #32]
 8007026:	4621      	mov	r1, r4
 8007028:	4648      	mov	r0, r9
 800702a:	f000 fe01 	bl	8007c30 <__mdiff>
 800702e:	68c2      	ldr	r2, [r0, #12]
 8007030:	4606      	mov	r6, r0
 8007032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007034:	bb02      	cbnz	r2, 8007078 <_dtoa_r+0xa48>
 8007036:	4601      	mov	r1, r0
 8007038:	9803      	ldr	r0, [sp, #12]
 800703a:	f000 fddd 	bl	8007bf8 <__mcmp>
 800703e:	4602      	mov	r2, r0
 8007040:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007042:	4631      	mov	r1, r6
 8007044:	4648      	mov	r0, r9
 8007046:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800704a:	f000 fba3 	bl	8007794 <_Bfree>
 800704e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007050:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007052:	9e04      	ldr	r6, [sp, #16]
 8007054:	ea42 0103 	orr.w	r1, r2, r3
 8007058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800705a:	4319      	orrs	r1, r3
 800705c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800705e:	d10d      	bne.n	800707c <_dtoa_r+0xa4c>
 8007060:	2b39      	cmp	r3, #57	@ 0x39
 8007062:	d027      	beq.n	80070b4 <_dtoa_r+0xa84>
 8007064:	9a08      	ldr	r2, [sp, #32]
 8007066:	2a00      	cmp	r2, #0
 8007068:	dd01      	ble.n	800706e <_dtoa_r+0xa3e>
 800706a:	9b06      	ldr	r3, [sp, #24]
 800706c:	3331      	adds	r3, #49	@ 0x31
 800706e:	f88b 3000 	strb.w	r3, [fp]
 8007072:	e52e      	b.n	8006ad2 <_dtoa_r+0x4a2>
 8007074:	4628      	mov	r0, r5
 8007076:	e7b9      	b.n	8006fec <_dtoa_r+0x9bc>
 8007078:	2201      	movs	r2, #1
 800707a:	e7e2      	b.n	8007042 <_dtoa_r+0xa12>
 800707c:	9908      	ldr	r1, [sp, #32]
 800707e:	2900      	cmp	r1, #0
 8007080:	db04      	blt.n	800708c <_dtoa_r+0xa5c>
 8007082:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007084:	4301      	orrs	r1, r0
 8007086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007088:	4301      	orrs	r1, r0
 800708a:	d120      	bne.n	80070ce <_dtoa_r+0xa9e>
 800708c:	2a00      	cmp	r2, #0
 800708e:	ddee      	ble.n	800706e <_dtoa_r+0xa3e>
 8007090:	2201      	movs	r2, #1
 8007092:	9903      	ldr	r1, [sp, #12]
 8007094:	4648      	mov	r0, r9
 8007096:	9304      	str	r3, [sp, #16]
 8007098:	f000 fd42 	bl	8007b20 <__lshift>
 800709c:	4621      	mov	r1, r4
 800709e:	9003      	str	r0, [sp, #12]
 80070a0:	f000 fdaa 	bl	8007bf8 <__mcmp>
 80070a4:	2800      	cmp	r0, #0
 80070a6:	9b04      	ldr	r3, [sp, #16]
 80070a8:	dc02      	bgt.n	80070b0 <_dtoa_r+0xa80>
 80070aa:	d1e0      	bne.n	800706e <_dtoa_r+0xa3e>
 80070ac:	07da      	lsls	r2, r3, #31
 80070ae:	d5de      	bpl.n	800706e <_dtoa_r+0xa3e>
 80070b0:	2b39      	cmp	r3, #57	@ 0x39
 80070b2:	d1da      	bne.n	800706a <_dtoa_r+0xa3a>
 80070b4:	2339      	movs	r3, #57	@ 0x39
 80070b6:	f88b 3000 	strb.w	r3, [fp]
 80070ba:	4633      	mov	r3, r6
 80070bc:	461e      	mov	r6, r3
 80070be:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	2a39      	cmp	r2, #57	@ 0x39
 80070c6:	d04e      	beq.n	8007166 <_dtoa_r+0xb36>
 80070c8:	3201      	adds	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e501      	b.n	8006ad2 <_dtoa_r+0x4a2>
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	dd03      	ble.n	80070da <_dtoa_r+0xaaa>
 80070d2:	2b39      	cmp	r3, #57	@ 0x39
 80070d4:	d0ee      	beq.n	80070b4 <_dtoa_r+0xa84>
 80070d6:	3301      	adds	r3, #1
 80070d8:	e7c9      	b.n	800706e <_dtoa_r+0xa3e>
 80070da:	9a04      	ldr	r2, [sp, #16]
 80070dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070e2:	428a      	cmp	r2, r1
 80070e4:	d028      	beq.n	8007138 <_dtoa_r+0xb08>
 80070e6:	2300      	movs	r3, #0
 80070e8:	220a      	movs	r2, #10
 80070ea:	9903      	ldr	r1, [sp, #12]
 80070ec:	4648      	mov	r0, r9
 80070ee:	f000 fb73 	bl	80077d8 <__multadd>
 80070f2:	42af      	cmp	r7, r5
 80070f4:	9003      	str	r0, [sp, #12]
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	f04f 020a 	mov.w	r2, #10
 80070fe:	4639      	mov	r1, r7
 8007100:	4648      	mov	r0, r9
 8007102:	d107      	bne.n	8007114 <_dtoa_r+0xae4>
 8007104:	f000 fb68 	bl	80077d8 <__multadd>
 8007108:	4607      	mov	r7, r0
 800710a:	4605      	mov	r5, r0
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	3301      	adds	r3, #1
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	e777      	b.n	8007004 <_dtoa_r+0x9d4>
 8007114:	f000 fb60 	bl	80077d8 <__multadd>
 8007118:	4629      	mov	r1, r5
 800711a:	4607      	mov	r7, r0
 800711c:	2300      	movs	r3, #0
 800711e:	220a      	movs	r2, #10
 8007120:	4648      	mov	r0, r9
 8007122:	f000 fb59 	bl	80077d8 <__multadd>
 8007126:	4605      	mov	r5, r0
 8007128:	e7f0      	b.n	800710c <_dtoa_r+0xadc>
 800712a:	f1bb 0f00 	cmp.w	fp, #0
 800712e:	bfcc      	ite	gt
 8007130:	465e      	movgt	r6, fp
 8007132:	2601      	movle	r6, #1
 8007134:	2700      	movs	r7, #0
 8007136:	4456      	add	r6, sl
 8007138:	2201      	movs	r2, #1
 800713a:	9903      	ldr	r1, [sp, #12]
 800713c:	4648      	mov	r0, r9
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	f000 fcee 	bl	8007b20 <__lshift>
 8007144:	4621      	mov	r1, r4
 8007146:	9003      	str	r0, [sp, #12]
 8007148:	f000 fd56 	bl	8007bf8 <__mcmp>
 800714c:	2800      	cmp	r0, #0
 800714e:	dcb4      	bgt.n	80070ba <_dtoa_r+0xa8a>
 8007150:	d102      	bne.n	8007158 <_dtoa_r+0xb28>
 8007152:	9b04      	ldr	r3, [sp, #16]
 8007154:	07db      	lsls	r3, r3, #31
 8007156:	d4b0      	bmi.n	80070ba <_dtoa_r+0xa8a>
 8007158:	4633      	mov	r3, r6
 800715a:	461e      	mov	r6, r3
 800715c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007160:	2a30      	cmp	r2, #48	@ 0x30
 8007162:	d0fa      	beq.n	800715a <_dtoa_r+0xb2a>
 8007164:	e4b5      	b.n	8006ad2 <_dtoa_r+0x4a2>
 8007166:	459a      	cmp	sl, r3
 8007168:	d1a8      	bne.n	80070bc <_dtoa_r+0xa8c>
 800716a:	2331      	movs	r3, #49	@ 0x31
 800716c:	f108 0801 	add.w	r8, r8, #1
 8007170:	f88a 3000 	strb.w	r3, [sl]
 8007174:	e4ad      	b.n	8006ad2 <_dtoa_r+0x4a2>
 8007176:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007178:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80071d4 <_dtoa_r+0xba4>
 800717c:	b11b      	cbz	r3, 8007186 <_dtoa_r+0xb56>
 800717e:	f10a 0308 	add.w	r3, sl, #8
 8007182:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	4650      	mov	r0, sl
 8007188:	b017      	add	sp, #92	@ 0x5c
 800718a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007190:	2b01      	cmp	r3, #1
 8007192:	f77f ae2e 	ble.w	8006df2 <_dtoa_r+0x7c2>
 8007196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007198:	930a      	str	r3, [sp, #40]	@ 0x28
 800719a:	2001      	movs	r0, #1
 800719c:	e64d      	b.n	8006e3a <_dtoa_r+0x80a>
 800719e:	f1bb 0f00 	cmp.w	fp, #0
 80071a2:	f77f aed9 	ble.w	8006f58 <_dtoa_r+0x928>
 80071a6:	4656      	mov	r6, sl
 80071a8:	4621      	mov	r1, r4
 80071aa:	9803      	ldr	r0, [sp, #12]
 80071ac:	f7ff f9b6 	bl	800651c <quorem>
 80071b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80071b4:	f806 3b01 	strb.w	r3, [r6], #1
 80071b8:	eba6 020a 	sub.w	r2, r6, sl
 80071bc:	4593      	cmp	fp, r2
 80071be:	ddb4      	ble.n	800712a <_dtoa_r+0xafa>
 80071c0:	2300      	movs	r3, #0
 80071c2:	220a      	movs	r2, #10
 80071c4:	4648      	mov	r0, r9
 80071c6:	9903      	ldr	r1, [sp, #12]
 80071c8:	f000 fb06 	bl	80077d8 <__multadd>
 80071cc:	9003      	str	r0, [sp, #12]
 80071ce:	e7eb      	b.n	80071a8 <_dtoa_r+0xb78>
 80071d0:	08008e80 	.word	0x08008e80
 80071d4:	08008e04 	.word	0x08008e04

080071d8 <__sfputc_r>:
 80071d8:	6893      	ldr	r3, [r2, #8]
 80071da:	b410      	push	{r4}
 80071dc:	3b01      	subs	r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	6093      	str	r3, [r2, #8]
 80071e2:	da07      	bge.n	80071f4 <__sfputc_r+0x1c>
 80071e4:	6994      	ldr	r4, [r2, #24]
 80071e6:	42a3      	cmp	r3, r4
 80071e8:	db01      	blt.n	80071ee <__sfputc_r+0x16>
 80071ea:	290a      	cmp	r1, #10
 80071ec:	d102      	bne.n	80071f4 <__sfputc_r+0x1c>
 80071ee:	bc10      	pop	{r4}
 80071f0:	f000 be4d 	b.w	8007e8e <__swbuf_r>
 80071f4:	6813      	ldr	r3, [r2, #0]
 80071f6:	1c58      	adds	r0, r3, #1
 80071f8:	6010      	str	r0, [r2, #0]
 80071fa:	7019      	strb	r1, [r3, #0]
 80071fc:	4608      	mov	r0, r1
 80071fe:	bc10      	pop	{r4}
 8007200:	4770      	bx	lr

08007202 <__sfputs_r>:
 8007202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007204:	4606      	mov	r6, r0
 8007206:	460f      	mov	r7, r1
 8007208:	4614      	mov	r4, r2
 800720a:	18d5      	adds	r5, r2, r3
 800720c:	42ac      	cmp	r4, r5
 800720e:	d101      	bne.n	8007214 <__sfputs_r+0x12>
 8007210:	2000      	movs	r0, #0
 8007212:	e007      	b.n	8007224 <__sfputs_r+0x22>
 8007214:	463a      	mov	r2, r7
 8007216:	4630      	mov	r0, r6
 8007218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721c:	f7ff ffdc 	bl	80071d8 <__sfputc_r>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d1f3      	bne.n	800720c <__sfputs_r+0xa>
 8007224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007228 <_vfiprintf_r>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	460d      	mov	r5, r1
 800722e:	4614      	mov	r4, r2
 8007230:	4698      	mov	r8, r3
 8007232:	4606      	mov	r6, r0
 8007234:	b09d      	sub	sp, #116	@ 0x74
 8007236:	b118      	cbz	r0, 8007240 <_vfiprintf_r+0x18>
 8007238:	6a03      	ldr	r3, [r0, #32]
 800723a:	b90b      	cbnz	r3, 8007240 <_vfiprintf_r+0x18>
 800723c:	f7ff f880 	bl	8006340 <__sinit>
 8007240:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007242:	07d9      	lsls	r1, r3, #31
 8007244:	d405      	bmi.n	8007252 <_vfiprintf_r+0x2a>
 8007246:	89ab      	ldrh	r3, [r5, #12]
 8007248:	059a      	lsls	r2, r3, #22
 800724a:	d402      	bmi.n	8007252 <_vfiprintf_r+0x2a>
 800724c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800724e:	f7ff f950 	bl	80064f2 <__retarget_lock_acquire_recursive>
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	071b      	lsls	r3, r3, #28
 8007256:	d501      	bpl.n	800725c <_vfiprintf_r+0x34>
 8007258:	692b      	ldr	r3, [r5, #16]
 800725a:	b99b      	cbnz	r3, 8007284 <_vfiprintf_r+0x5c>
 800725c:	4629      	mov	r1, r5
 800725e:	4630      	mov	r0, r6
 8007260:	f000 fe54 	bl	8007f0c <__swsetup_r>
 8007264:	b170      	cbz	r0, 8007284 <_vfiprintf_r+0x5c>
 8007266:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007268:	07dc      	lsls	r4, r3, #31
 800726a:	d504      	bpl.n	8007276 <_vfiprintf_r+0x4e>
 800726c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007270:	b01d      	add	sp, #116	@ 0x74
 8007272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007276:	89ab      	ldrh	r3, [r5, #12]
 8007278:	0598      	lsls	r0, r3, #22
 800727a:	d4f7      	bmi.n	800726c <_vfiprintf_r+0x44>
 800727c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800727e:	f7ff f939 	bl	80064f4 <__retarget_lock_release_recursive>
 8007282:	e7f3      	b.n	800726c <_vfiprintf_r+0x44>
 8007284:	2300      	movs	r3, #0
 8007286:	9309      	str	r3, [sp, #36]	@ 0x24
 8007288:	2320      	movs	r3, #32
 800728a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800728e:	2330      	movs	r3, #48	@ 0x30
 8007290:	f04f 0901 	mov.w	r9, #1
 8007294:	f8cd 800c 	str.w	r8, [sp, #12]
 8007298:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007444 <_vfiprintf_r+0x21c>
 800729c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072a0:	4623      	mov	r3, r4
 80072a2:	469a      	mov	sl, r3
 80072a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072a8:	b10a      	cbz	r2, 80072ae <_vfiprintf_r+0x86>
 80072aa:	2a25      	cmp	r2, #37	@ 0x25
 80072ac:	d1f9      	bne.n	80072a2 <_vfiprintf_r+0x7a>
 80072ae:	ebba 0b04 	subs.w	fp, sl, r4
 80072b2:	d00b      	beq.n	80072cc <_vfiprintf_r+0xa4>
 80072b4:	465b      	mov	r3, fp
 80072b6:	4622      	mov	r2, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff ffa1 	bl	8007202 <__sfputs_r>
 80072c0:	3001      	adds	r0, #1
 80072c2:	f000 80a7 	beq.w	8007414 <_vfiprintf_r+0x1ec>
 80072c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072c8:	445a      	add	r2, fp
 80072ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80072cc:	f89a 3000 	ldrb.w	r3, [sl]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 809f 	beq.w	8007414 <_vfiprintf_r+0x1ec>
 80072d6:	2300      	movs	r3, #0
 80072d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e0:	f10a 0a01 	add.w	sl, sl, #1
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	9307      	str	r3, [sp, #28]
 80072e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80072ee:	4654      	mov	r4, sl
 80072f0:	2205      	movs	r2, #5
 80072f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f6:	4853      	ldr	r0, [pc, #332]	@ (8007444 <_vfiprintf_r+0x21c>)
 80072f8:	f7ff f902 	bl	8006500 <memchr>
 80072fc:	9a04      	ldr	r2, [sp, #16]
 80072fe:	b9d8      	cbnz	r0, 8007338 <_vfiprintf_r+0x110>
 8007300:	06d1      	lsls	r1, r2, #27
 8007302:	bf44      	itt	mi
 8007304:	2320      	movmi	r3, #32
 8007306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800730a:	0713      	lsls	r3, r2, #28
 800730c:	bf44      	itt	mi
 800730e:	232b      	movmi	r3, #43	@ 0x2b
 8007310:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007314:	f89a 3000 	ldrb.w	r3, [sl]
 8007318:	2b2a      	cmp	r3, #42	@ 0x2a
 800731a:	d015      	beq.n	8007348 <_vfiprintf_r+0x120>
 800731c:	4654      	mov	r4, sl
 800731e:	2000      	movs	r0, #0
 8007320:	f04f 0c0a 	mov.w	ip, #10
 8007324:	9a07      	ldr	r2, [sp, #28]
 8007326:	4621      	mov	r1, r4
 8007328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800732c:	3b30      	subs	r3, #48	@ 0x30
 800732e:	2b09      	cmp	r3, #9
 8007330:	d94b      	bls.n	80073ca <_vfiprintf_r+0x1a2>
 8007332:	b1b0      	cbz	r0, 8007362 <_vfiprintf_r+0x13a>
 8007334:	9207      	str	r2, [sp, #28]
 8007336:	e014      	b.n	8007362 <_vfiprintf_r+0x13a>
 8007338:	eba0 0308 	sub.w	r3, r0, r8
 800733c:	fa09 f303 	lsl.w	r3, r9, r3
 8007340:	4313      	orrs	r3, r2
 8007342:	46a2      	mov	sl, r4
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	e7d2      	b.n	80072ee <_vfiprintf_r+0xc6>
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	1d19      	adds	r1, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9103      	str	r1, [sp, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	bfbb      	ittet	lt
 8007354:	425b      	neglt	r3, r3
 8007356:	f042 0202 	orrlt.w	r2, r2, #2
 800735a:	9307      	strge	r3, [sp, #28]
 800735c:	9307      	strlt	r3, [sp, #28]
 800735e:	bfb8      	it	lt
 8007360:	9204      	strlt	r2, [sp, #16]
 8007362:	7823      	ldrb	r3, [r4, #0]
 8007364:	2b2e      	cmp	r3, #46	@ 0x2e
 8007366:	d10a      	bne.n	800737e <_vfiprintf_r+0x156>
 8007368:	7863      	ldrb	r3, [r4, #1]
 800736a:	2b2a      	cmp	r3, #42	@ 0x2a
 800736c:	d132      	bne.n	80073d4 <_vfiprintf_r+0x1ac>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	3402      	adds	r4, #2
 8007372:	1d1a      	adds	r2, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	9203      	str	r2, [sp, #12]
 8007378:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800737c:	9305      	str	r3, [sp, #20]
 800737e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007448 <_vfiprintf_r+0x220>
 8007382:	2203      	movs	r2, #3
 8007384:	4650      	mov	r0, sl
 8007386:	7821      	ldrb	r1, [r4, #0]
 8007388:	f7ff f8ba 	bl	8006500 <memchr>
 800738c:	b138      	cbz	r0, 800739e <_vfiprintf_r+0x176>
 800738e:	2240      	movs	r2, #64	@ 0x40
 8007390:	9b04      	ldr	r3, [sp, #16]
 8007392:	eba0 000a 	sub.w	r0, r0, sl
 8007396:	4082      	lsls	r2, r0
 8007398:	4313      	orrs	r3, r2
 800739a:	3401      	adds	r4, #1
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a2:	2206      	movs	r2, #6
 80073a4:	4829      	ldr	r0, [pc, #164]	@ (800744c <_vfiprintf_r+0x224>)
 80073a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073aa:	f7ff f8a9 	bl	8006500 <memchr>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d03f      	beq.n	8007432 <_vfiprintf_r+0x20a>
 80073b2:	4b27      	ldr	r3, [pc, #156]	@ (8007450 <_vfiprintf_r+0x228>)
 80073b4:	bb1b      	cbnz	r3, 80073fe <_vfiprintf_r+0x1d6>
 80073b6:	9b03      	ldr	r3, [sp, #12]
 80073b8:	3307      	adds	r3, #7
 80073ba:	f023 0307 	bic.w	r3, r3, #7
 80073be:	3308      	adds	r3, #8
 80073c0:	9303      	str	r3, [sp, #12]
 80073c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c4:	443b      	add	r3, r7
 80073c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80073c8:	e76a      	b.n	80072a0 <_vfiprintf_r+0x78>
 80073ca:	460c      	mov	r4, r1
 80073cc:	2001      	movs	r0, #1
 80073ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80073d2:	e7a8      	b.n	8007326 <_vfiprintf_r+0xfe>
 80073d4:	2300      	movs	r3, #0
 80073d6:	f04f 0c0a 	mov.w	ip, #10
 80073da:	4619      	mov	r1, r3
 80073dc:	3401      	adds	r4, #1
 80073de:	9305      	str	r3, [sp, #20]
 80073e0:	4620      	mov	r0, r4
 80073e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e6:	3a30      	subs	r2, #48	@ 0x30
 80073e8:	2a09      	cmp	r2, #9
 80073ea:	d903      	bls.n	80073f4 <_vfiprintf_r+0x1cc>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d0c6      	beq.n	800737e <_vfiprintf_r+0x156>
 80073f0:	9105      	str	r1, [sp, #20]
 80073f2:	e7c4      	b.n	800737e <_vfiprintf_r+0x156>
 80073f4:	4604      	mov	r4, r0
 80073f6:	2301      	movs	r3, #1
 80073f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073fc:	e7f0      	b.n	80073e0 <_vfiprintf_r+0x1b8>
 80073fe:	ab03      	add	r3, sp, #12
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	462a      	mov	r2, r5
 8007404:	4630      	mov	r0, r6
 8007406:	4b13      	ldr	r3, [pc, #76]	@ (8007454 <_vfiprintf_r+0x22c>)
 8007408:	a904      	add	r1, sp, #16
 800740a:	f7fe fb51 	bl	8005ab0 <_printf_float>
 800740e:	4607      	mov	r7, r0
 8007410:	1c78      	adds	r0, r7, #1
 8007412:	d1d6      	bne.n	80073c2 <_vfiprintf_r+0x19a>
 8007414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007416:	07d9      	lsls	r1, r3, #31
 8007418:	d405      	bmi.n	8007426 <_vfiprintf_r+0x1fe>
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	059a      	lsls	r2, r3, #22
 800741e:	d402      	bmi.n	8007426 <_vfiprintf_r+0x1fe>
 8007420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007422:	f7ff f867 	bl	80064f4 <__retarget_lock_release_recursive>
 8007426:	89ab      	ldrh	r3, [r5, #12]
 8007428:	065b      	lsls	r3, r3, #25
 800742a:	f53f af1f 	bmi.w	800726c <_vfiprintf_r+0x44>
 800742e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007430:	e71e      	b.n	8007270 <_vfiprintf_r+0x48>
 8007432:	ab03      	add	r3, sp, #12
 8007434:	9300      	str	r3, [sp, #0]
 8007436:	462a      	mov	r2, r5
 8007438:	4630      	mov	r0, r6
 800743a:	4b06      	ldr	r3, [pc, #24]	@ (8007454 <_vfiprintf_r+0x22c>)
 800743c:	a904      	add	r1, sp, #16
 800743e:	f7fe fdd5 	bl	8005fec <_printf_i>
 8007442:	e7e4      	b.n	800740e <_vfiprintf_r+0x1e6>
 8007444:	08008e91 	.word	0x08008e91
 8007448:	08008e97 	.word	0x08008e97
 800744c:	08008e9b 	.word	0x08008e9b
 8007450:	08005ab1 	.word	0x08005ab1
 8007454:	08007203 	.word	0x08007203

08007458 <malloc>:
 8007458:	4b02      	ldr	r3, [pc, #8]	@ (8007464 <malloc+0xc>)
 800745a:	4601      	mov	r1, r0
 800745c:	6818      	ldr	r0, [r3, #0]
 800745e:	f000 b825 	b.w	80074ac <_malloc_r>
 8007462:	bf00      	nop
 8007464:	20000018 	.word	0x20000018

08007468 <sbrk_aligned>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	4e0f      	ldr	r6, [pc, #60]	@ (80074a8 <sbrk_aligned+0x40>)
 800746c:	460c      	mov	r4, r1
 800746e:	6831      	ldr	r1, [r6, #0]
 8007470:	4605      	mov	r5, r0
 8007472:	b911      	cbnz	r1, 800747a <sbrk_aligned+0x12>
 8007474:	f000 fe36 	bl	80080e4 <_sbrk_r>
 8007478:	6030      	str	r0, [r6, #0]
 800747a:	4621      	mov	r1, r4
 800747c:	4628      	mov	r0, r5
 800747e:	f000 fe31 	bl	80080e4 <_sbrk_r>
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	d103      	bne.n	800748e <sbrk_aligned+0x26>
 8007486:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800748a:	4620      	mov	r0, r4
 800748c:	bd70      	pop	{r4, r5, r6, pc}
 800748e:	1cc4      	adds	r4, r0, #3
 8007490:	f024 0403 	bic.w	r4, r4, #3
 8007494:	42a0      	cmp	r0, r4
 8007496:	d0f8      	beq.n	800748a <sbrk_aligned+0x22>
 8007498:	1a21      	subs	r1, r4, r0
 800749a:	4628      	mov	r0, r5
 800749c:	f000 fe22 	bl	80080e4 <_sbrk_r>
 80074a0:	3001      	adds	r0, #1
 80074a2:	d1f2      	bne.n	800748a <sbrk_aligned+0x22>
 80074a4:	e7ef      	b.n	8007486 <sbrk_aligned+0x1e>
 80074a6:	bf00      	nop
 80074a8:	2000046c 	.word	0x2000046c

080074ac <_malloc_r>:
 80074ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b0:	1ccd      	adds	r5, r1, #3
 80074b2:	f025 0503 	bic.w	r5, r5, #3
 80074b6:	3508      	adds	r5, #8
 80074b8:	2d0c      	cmp	r5, #12
 80074ba:	bf38      	it	cc
 80074bc:	250c      	movcc	r5, #12
 80074be:	2d00      	cmp	r5, #0
 80074c0:	4606      	mov	r6, r0
 80074c2:	db01      	blt.n	80074c8 <_malloc_r+0x1c>
 80074c4:	42a9      	cmp	r1, r5
 80074c6:	d904      	bls.n	80074d2 <_malloc_r+0x26>
 80074c8:	230c      	movs	r3, #12
 80074ca:	6033      	str	r3, [r6, #0]
 80074cc:	2000      	movs	r0, #0
 80074ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075a8 <_malloc_r+0xfc>
 80074d6:	f000 f911 	bl	80076fc <__malloc_lock>
 80074da:	f8d8 3000 	ldr.w	r3, [r8]
 80074de:	461c      	mov	r4, r3
 80074e0:	bb44      	cbnz	r4, 8007534 <_malloc_r+0x88>
 80074e2:	4629      	mov	r1, r5
 80074e4:	4630      	mov	r0, r6
 80074e6:	f7ff ffbf 	bl	8007468 <sbrk_aligned>
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	4604      	mov	r4, r0
 80074ee:	d158      	bne.n	80075a2 <_malloc_r+0xf6>
 80074f0:	f8d8 4000 	ldr.w	r4, [r8]
 80074f4:	4627      	mov	r7, r4
 80074f6:	2f00      	cmp	r7, #0
 80074f8:	d143      	bne.n	8007582 <_malloc_r+0xd6>
 80074fa:	2c00      	cmp	r4, #0
 80074fc:	d04b      	beq.n	8007596 <_malloc_r+0xea>
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	4639      	mov	r1, r7
 8007502:	4630      	mov	r0, r6
 8007504:	eb04 0903 	add.w	r9, r4, r3
 8007508:	f000 fdec 	bl	80080e4 <_sbrk_r>
 800750c:	4581      	cmp	r9, r0
 800750e:	d142      	bne.n	8007596 <_malloc_r+0xea>
 8007510:	6821      	ldr	r1, [r4, #0]
 8007512:	4630      	mov	r0, r6
 8007514:	1a6d      	subs	r5, r5, r1
 8007516:	4629      	mov	r1, r5
 8007518:	f7ff ffa6 	bl	8007468 <sbrk_aligned>
 800751c:	3001      	adds	r0, #1
 800751e:	d03a      	beq.n	8007596 <_malloc_r+0xea>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	442b      	add	r3, r5
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	f8d8 3000 	ldr.w	r3, [r8]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	bb62      	cbnz	r2, 8007588 <_malloc_r+0xdc>
 800752e:	f8c8 7000 	str.w	r7, [r8]
 8007532:	e00f      	b.n	8007554 <_malloc_r+0xa8>
 8007534:	6822      	ldr	r2, [r4, #0]
 8007536:	1b52      	subs	r2, r2, r5
 8007538:	d420      	bmi.n	800757c <_malloc_r+0xd0>
 800753a:	2a0b      	cmp	r2, #11
 800753c:	d917      	bls.n	800756e <_malloc_r+0xc2>
 800753e:	1961      	adds	r1, r4, r5
 8007540:	42a3      	cmp	r3, r4
 8007542:	6025      	str	r5, [r4, #0]
 8007544:	bf18      	it	ne
 8007546:	6059      	strne	r1, [r3, #4]
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	bf08      	it	eq
 800754c:	f8c8 1000 	streq.w	r1, [r8]
 8007550:	5162      	str	r2, [r4, r5]
 8007552:	604b      	str	r3, [r1, #4]
 8007554:	4630      	mov	r0, r6
 8007556:	f000 f8d7 	bl	8007708 <__malloc_unlock>
 800755a:	f104 000b 	add.w	r0, r4, #11
 800755e:	1d23      	adds	r3, r4, #4
 8007560:	f020 0007 	bic.w	r0, r0, #7
 8007564:	1ac2      	subs	r2, r0, r3
 8007566:	bf1c      	itt	ne
 8007568:	1a1b      	subne	r3, r3, r0
 800756a:	50a3      	strne	r3, [r4, r2]
 800756c:	e7af      	b.n	80074ce <_malloc_r+0x22>
 800756e:	6862      	ldr	r2, [r4, #4]
 8007570:	42a3      	cmp	r3, r4
 8007572:	bf0c      	ite	eq
 8007574:	f8c8 2000 	streq.w	r2, [r8]
 8007578:	605a      	strne	r2, [r3, #4]
 800757a:	e7eb      	b.n	8007554 <_malloc_r+0xa8>
 800757c:	4623      	mov	r3, r4
 800757e:	6864      	ldr	r4, [r4, #4]
 8007580:	e7ae      	b.n	80074e0 <_malloc_r+0x34>
 8007582:	463c      	mov	r4, r7
 8007584:	687f      	ldr	r7, [r7, #4]
 8007586:	e7b6      	b.n	80074f6 <_malloc_r+0x4a>
 8007588:	461a      	mov	r2, r3
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	42a3      	cmp	r3, r4
 800758e:	d1fb      	bne.n	8007588 <_malloc_r+0xdc>
 8007590:	2300      	movs	r3, #0
 8007592:	6053      	str	r3, [r2, #4]
 8007594:	e7de      	b.n	8007554 <_malloc_r+0xa8>
 8007596:	230c      	movs	r3, #12
 8007598:	4630      	mov	r0, r6
 800759a:	6033      	str	r3, [r6, #0]
 800759c:	f000 f8b4 	bl	8007708 <__malloc_unlock>
 80075a0:	e794      	b.n	80074cc <_malloc_r+0x20>
 80075a2:	6005      	str	r5, [r0, #0]
 80075a4:	e7d6      	b.n	8007554 <_malloc_r+0xa8>
 80075a6:	bf00      	nop
 80075a8:	20000470 	.word	0x20000470

080075ac <__sflush_r>:
 80075ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	0716      	lsls	r6, r2, #28
 80075b4:	4605      	mov	r5, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	d454      	bmi.n	8007664 <__sflush_r+0xb8>
 80075ba:	684b      	ldr	r3, [r1, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dc02      	bgt.n	80075c6 <__sflush_r+0x1a>
 80075c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dd48      	ble.n	8007658 <__sflush_r+0xac>
 80075c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075c8:	2e00      	cmp	r6, #0
 80075ca:	d045      	beq.n	8007658 <__sflush_r+0xac>
 80075cc:	2300      	movs	r3, #0
 80075ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075d2:	682f      	ldr	r7, [r5, #0]
 80075d4:	6a21      	ldr	r1, [r4, #32]
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	d030      	beq.n	800763c <__sflush_r+0x90>
 80075da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	0759      	lsls	r1, r3, #29
 80075e0:	d505      	bpl.n	80075ee <__sflush_r+0x42>
 80075e2:	6863      	ldr	r3, [r4, #4]
 80075e4:	1ad2      	subs	r2, r2, r3
 80075e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075e8:	b10b      	cbz	r3, 80075ee <__sflush_r+0x42>
 80075ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075ec:	1ad2      	subs	r2, r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	4628      	mov	r0, r5
 80075f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075f4:	6a21      	ldr	r1, [r4, #32]
 80075f6:	47b0      	blx	r6
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	89a3      	ldrh	r3, [r4, #12]
 80075fc:	d106      	bne.n	800760c <__sflush_r+0x60>
 80075fe:	6829      	ldr	r1, [r5, #0]
 8007600:	291d      	cmp	r1, #29
 8007602:	d82b      	bhi.n	800765c <__sflush_r+0xb0>
 8007604:	4a28      	ldr	r2, [pc, #160]	@ (80076a8 <__sflush_r+0xfc>)
 8007606:	40ca      	lsrs	r2, r1
 8007608:	07d6      	lsls	r6, r2, #31
 800760a:	d527      	bpl.n	800765c <__sflush_r+0xb0>
 800760c:	2200      	movs	r2, #0
 800760e:	6062      	str	r2, [r4, #4]
 8007610:	6922      	ldr	r2, [r4, #16]
 8007612:	04d9      	lsls	r1, r3, #19
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	d504      	bpl.n	8007622 <__sflush_r+0x76>
 8007618:	1c42      	adds	r2, r0, #1
 800761a:	d101      	bne.n	8007620 <__sflush_r+0x74>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	b903      	cbnz	r3, 8007622 <__sflush_r+0x76>
 8007620:	6560      	str	r0, [r4, #84]	@ 0x54
 8007622:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007624:	602f      	str	r7, [r5, #0]
 8007626:	b1b9      	cbz	r1, 8007658 <__sflush_r+0xac>
 8007628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800762c:	4299      	cmp	r1, r3
 800762e:	d002      	beq.n	8007636 <__sflush_r+0x8a>
 8007630:	4628      	mov	r0, r5
 8007632:	f000 fddb 	bl	80081ec <_free_r>
 8007636:	2300      	movs	r3, #0
 8007638:	6363      	str	r3, [r4, #52]	@ 0x34
 800763a:	e00d      	b.n	8007658 <__sflush_r+0xac>
 800763c:	2301      	movs	r3, #1
 800763e:	4628      	mov	r0, r5
 8007640:	47b0      	blx	r6
 8007642:	4602      	mov	r2, r0
 8007644:	1c50      	adds	r0, r2, #1
 8007646:	d1c9      	bne.n	80075dc <__sflush_r+0x30>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0c6      	beq.n	80075dc <__sflush_r+0x30>
 800764e:	2b1d      	cmp	r3, #29
 8007650:	d001      	beq.n	8007656 <__sflush_r+0xaa>
 8007652:	2b16      	cmp	r3, #22
 8007654:	d11d      	bne.n	8007692 <__sflush_r+0xe6>
 8007656:	602f      	str	r7, [r5, #0]
 8007658:	2000      	movs	r0, #0
 800765a:	e021      	b.n	80076a0 <__sflush_r+0xf4>
 800765c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007660:	b21b      	sxth	r3, r3
 8007662:	e01a      	b.n	800769a <__sflush_r+0xee>
 8007664:	690f      	ldr	r7, [r1, #16]
 8007666:	2f00      	cmp	r7, #0
 8007668:	d0f6      	beq.n	8007658 <__sflush_r+0xac>
 800766a:	0793      	lsls	r3, r2, #30
 800766c:	bf18      	it	ne
 800766e:	2300      	movne	r3, #0
 8007670:	680e      	ldr	r6, [r1, #0]
 8007672:	bf08      	it	eq
 8007674:	694b      	ldreq	r3, [r1, #20]
 8007676:	1bf6      	subs	r6, r6, r7
 8007678:	600f      	str	r7, [r1, #0]
 800767a:	608b      	str	r3, [r1, #8]
 800767c:	2e00      	cmp	r6, #0
 800767e:	ddeb      	ble.n	8007658 <__sflush_r+0xac>
 8007680:	4633      	mov	r3, r6
 8007682:	463a      	mov	r2, r7
 8007684:	4628      	mov	r0, r5
 8007686:	6a21      	ldr	r1, [r4, #32]
 8007688:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800768c:	47e0      	blx	ip
 800768e:	2800      	cmp	r0, #0
 8007690:	dc07      	bgt.n	80076a2 <__sflush_r+0xf6>
 8007692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800769a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076a2:	4407      	add	r7, r0
 80076a4:	1a36      	subs	r6, r6, r0
 80076a6:	e7e9      	b.n	800767c <__sflush_r+0xd0>
 80076a8:	20400001 	.word	0x20400001

080076ac <_fflush_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	690b      	ldr	r3, [r1, #16]
 80076b0:	4605      	mov	r5, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	b913      	cbnz	r3, 80076bc <_fflush_r+0x10>
 80076b6:	2500      	movs	r5, #0
 80076b8:	4628      	mov	r0, r5
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	b118      	cbz	r0, 80076c6 <_fflush_r+0x1a>
 80076be:	6a03      	ldr	r3, [r0, #32]
 80076c0:	b90b      	cbnz	r3, 80076c6 <_fflush_r+0x1a>
 80076c2:	f7fe fe3d 	bl	8006340 <__sinit>
 80076c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0f3      	beq.n	80076b6 <_fflush_r+0xa>
 80076ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076d0:	07d0      	lsls	r0, r2, #31
 80076d2:	d404      	bmi.n	80076de <_fflush_r+0x32>
 80076d4:	0599      	lsls	r1, r3, #22
 80076d6:	d402      	bmi.n	80076de <_fflush_r+0x32>
 80076d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076da:	f7fe ff0a 	bl	80064f2 <__retarget_lock_acquire_recursive>
 80076de:	4628      	mov	r0, r5
 80076e0:	4621      	mov	r1, r4
 80076e2:	f7ff ff63 	bl	80075ac <__sflush_r>
 80076e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076e8:	4605      	mov	r5, r0
 80076ea:	07da      	lsls	r2, r3, #31
 80076ec:	d4e4      	bmi.n	80076b8 <_fflush_r+0xc>
 80076ee:	89a3      	ldrh	r3, [r4, #12]
 80076f0:	059b      	lsls	r3, r3, #22
 80076f2:	d4e1      	bmi.n	80076b8 <_fflush_r+0xc>
 80076f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076f6:	f7fe fefd 	bl	80064f4 <__retarget_lock_release_recursive>
 80076fa:	e7dd      	b.n	80076b8 <_fflush_r+0xc>

080076fc <__malloc_lock>:
 80076fc:	4801      	ldr	r0, [pc, #4]	@ (8007704 <__malloc_lock+0x8>)
 80076fe:	f7fe bef8 	b.w	80064f2 <__retarget_lock_acquire_recursive>
 8007702:	bf00      	nop
 8007704:	20000468 	.word	0x20000468

08007708 <__malloc_unlock>:
 8007708:	4801      	ldr	r0, [pc, #4]	@ (8007710 <__malloc_unlock+0x8>)
 800770a:	f7fe bef3 	b.w	80064f4 <__retarget_lock_release_recursive>
 800770e:	bf00      	nop
 8007710:	20000468 	.word	0x20000468

08007714 <_Balloc>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	69c6      	ldr	r6, [r0, #28]
 8007718:	4604      	mov	r4, r0
 800771a:	460d      	mov	r5, r1
 800771c:	b976      	cbnz	r6, 800773c <_Balloc+0x28>
 800771e:	2010      	movs	r0, #16
 8007720:	f7ff fe9a 	bl	8007458 <malloc>
 8007724:	4602      	mov	r2, r0
 8007726:	61e0      	str	r0, [r4, #28]
 8007728:	b920      	cbnz	r0, 8007734 <_Balloc+0x20>
 800772a:	216b      	movs	r1, #107	@ 0x6b
 800772c:	4b17      	ldr	r3, [pc, #92]	@ (800778c <_Balloc+0x78>)
 800772e:	4818      	ldr	r0, [pc, #96]	@ (8007790 <_Balloc+0x7c>)
 8007730:	f000 fd2a 	bl	8008188 <__assert_func>
 8007734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007738:	6006      	str	r6, [r0, #0]
 800773a:	60c6      	str	r6, [r0, #12]
 800773c:	69e6      	ldr	r6, [r4, #28]
 800773e:	68f3      	ldr	r3, [r6, #12]
 8007740:	b183      	cbz	r3, 8007764 <_Balloc+0x50>
 8007742:	69e3      	ldr	r3, [r4, #28]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800774a:	b9b8      	cbnz	r0, 800777c <_Balloc+0x68>
 800774c:	2101      	movs	r1, #1
 800774e:	fa01 f605 	lsl.w	r6, r1, r5
 8007752:	1d72      	adds	r2, r6, #5
 8007754:	4620      	mov	r0, r4
 8007756:	0092      	lsls	r2, r2, #2
 8007758:	f000 fd34 	bl	80081c4 <_calloc_r>
 800775c:	b160      	cbz	r0, 8007778 <_Balloc+0x64>
 800775e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007762:	e00e      	b.n	8007782 <_Balloc+0x6e>
 8007764:	2221      	movs	r2, #33	@ 0x21
 8007766:	2104      	movs	r1, #4
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fd2b 	bl	80081c4 <_calloc_r>
 800776e:	69e3      	ldr	r3, [r4, #28]
 8007770:	60f0      	str	r0, [r6, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e4      	bne.n	8007742 <_Balloc+0x2e>
 8007778:	2000      	movs	r0, #0
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	6802      	ldr	r2, [r0, #0]
 800777e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007782:	2300      	movs	r3, #0
 8007784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007788:	e7f7      	b.n	800777a <_Balloc+0x66>
 800778a:	bf00      	nop
 800778c:	08008e11 	.word	0x08008e11
 8007790:	08008ea2 	.word	0x08008ea2

08007794 <_Bfree>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	69c6      	ldr	r6, [r0, #28]
 8007798:	4605      	mov	r5, r0
 800779a:	460c      	mov	r4, r1
 800779c:	b976      	cbnz	r6, 80077bc <_Bfree+0x28>
 800779e:	2010      	movs	r0, #16
 80077a0:	f7ff fe5a 	bl	8007458 <malloc>
 80077a4:	4602      	mov	r2, r0
 80077a6:	61e8      	str	r0, [r5, #28]
 80077a8:	b920      	cbnz	r0, 80077b4 <_Bfree+0x20>
 80077aa:	218f      	movs	r1, #143	@ 0x8f
 80077ac:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <_Bfree+0x3c>)
 80077ae:	4809      	ldr	r0, [pc, #36]	@ (80077d4 <_Bfree+0x40>)
 80077b0:	f000 fcea 	bl	8008188 <__assert_func>
 80077b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077b8:	6006      	str	r6, [r0, #0]
 80077ba:	60c6      	str	r6, [r0, #12]
 80077bc:	b13c      	cbz	r4, 80077ce <_Bfree+0x3a>
 80077be:	69eb      	ldr	r3, [r5, #28]
 80077c0:	6862      	ldr	r2, [r4, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077c8:	6021      	str	r1, [r4, #0]
 80077ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	08008e11 	.word	0x08008e11
 80077d4:	08008ea2 	.word	0x08008ea2

080077d8 <__multadd>:
 80077d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077dc:	4607      	mov	r7, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	461e      	mov	r6, r3
 80077e2:	2000      	movs	r0, #0
 80077e4:	690d      	ldr	r5, [r1, #16]
 80077e6:	f101 0c14 	add.w	ip, r1, #20
 80077ea:	f8dc 3000 	ldr.w	r3, [ip]
 80077ee:	3001      	adds	r0, #1
 80077f0:	b299      	uxth	r1, r3
 80077f2:	fb02 6101 	mla	r1, r2, r1, r6
 80077f6:	0c1e      	lsrs	r6, r3, #16
 80077f8:	0c0b      	lsrs	r3, r1, #16
 80077fa:	fb02 3306 	mla	r3, r2, r6, r3
 80077fe:	b289      	uxth	r1, r1
 8007800:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007804:	4285      	cmp	r5, r0
 8007806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800780a:	f84c 1b04 	str.w	r1, [ip], #4
 800780e:	dcec      	bgt.n	80077ea <__multadd+0x12>
 8007810:	b30e      	cbz	r6, 8007856 <__multadd+0x7e>
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	42ab      	cmp	r3, r5
 8007816:	dc19      	bgt.n	800784c <__multadd+0x74>
 8007818:	6861      	ldr	r1, [r4, #4]
 800781a:	4638      	mov	r0, r7
 800781c:	3101      	adds	r1, #1
 800781e:	f7ff ff79 	bl	8007714 <_Balloc>
 8007822:	4680      	mov	r8, r0
 8007824:	b928      	cbnz	r0, 8007832 <__multadd+0x5a>
 8007826:	4602      	mov	r2, r0
 8007828:	21ba      	movs	r1, #186	@ 0xba
 800782a:	4b0c      	ldr	r3, [pc, #48]	@ (800785c <__multadd+0x84>)
 800782c:	480c      	ldr	r0, [pc, #48]	@ (8007860 <__multadd+0x88>)
 800782e:	f000 fcab 	bl	8008188 <__assert_func>
 8007832:	6922      	ldr	r2, [r4, #16]
 8007834:	f104 010c 	add.w	r1, r4, #12
 8007838:	3202      	adds	r2, #2
 800783a:	0092      	lsls	r2, r2, #2
 800783c:	300c      	adds	r0, #12
 800783e:	f000 fc95 	bl	800816c <memcpy>
 8007842:	4621      	mov	r1, r4
 8007844:	4638      	mov	r0, r7
 8007846:	f7ff ffa5 	bl	8007794 <_Bfree>
 800784a:	4644      	mov	r4, r8
 800784c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007850:	3501      	adds	r5, #1
 8007852:	615e      	str	r6, [r3, #20]
 8007854:	6125      	str	r5, [r4, #16]
 8007856:	4620      	mov	r0, r4
 8007858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800785c:	08008e80 	.word	0x08008e80
 8007860:	08008ea2 	.word	0x08008ea2

08007864 <__hi0bits>:
 8007864:	4603      	mov	r3, r0
 8007866:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800786a:	bf3a      	itte	cc
 800786c:	0403      	lslcc	r3, r0, #16
 800786e:	2010      	movcc	r0, #16
 8007870:	2000      	movcs	r0, #0
 8007872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007876:	bf3c      	itt	cc
 8007878:	021b      	lslcc	r3, r3, #8
 800787a:	3008      	addcc	r0, #8
 800787c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007880:	bf3c      	itt	cc
 8007882:	011b      	lslcc	r3, r3, #4
 8007884:	3004      	addcc	r0, #4
 8007886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800788a:	bf3c      	itt	cc
 800788c:	009b      	lslcc	r3, r3, #2
 800788e:	3002      	addcc	r0, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	db05      	blt.n	80078a0 <__hi0bits+0x3c>
 8007894:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007898:	f100 0001 	add.w	r0, r0, #1
 800789c:	bf08      	it	eq
 800789e:	2020      	moveq	r0, #32
 80078a0:	4770      	bx	lr

080078a2 <__lo0bits>:
 80078a2:	6803      	ldr	r3, [r0, #0]
 80078a4:	4602      	mov	r2, r0
 80078a6:	f013 0007 	ands.w	r0, r3, #7
 80078aa:	d00b      	beq.n	80078c4 <__lo0bits+0x22>
 80078ac:	07d9      	lsls	r1, r3, #31
 80078ae:	d421      	bmi.n	80078f4 <__lo0bits+0x52>
 80078b0:	0798      	lsls	r0, r3, #30
 80078b2:	bf49      	itett	mi
 80078b4:	085b      	lsrmi	r3, r3, #1
 80078b6:	089b      	lsrpl	r3, r3, #2
 80078b8:	2001      	movmi	r0, #1
 80078ba:	6013      	strmi	r3, [r2, #0]
 80078bc:	bf5c      	itt	pl
 80078be:	2002      	movpl	r0, #2
 80078c0:	6013      	strpl	r3, [r2, #0]
 80078c2:	4770      	bx	lr
 80078c4:	b299      	uxth	r1, r3
 80078c6:	b909      	cbnz	r1, 80078cc <__lo0bits+0x2a>
 80078c8:	2010      	movs	r0, #16
 80078ca:	0c1b      	lsrs	r3, r3, #16
 80078cc:	b2d9      	uxtb	r1, r3
 80078ce:	b909      	cbnz	r1, 80078d4 <__lo0bits+0x32>
 80078d0:	3008      	adds	r0, #8
 80078d2:	0a1b      	lsrs	r3, r3, #8
 80078d4:	0719      	lsls	r1, r3, #28
 80078d6:	bf04      	itt	eq
 80078d8:	091b      	lsreq	r3, r3, #4
 80078da:	3004      	addeq	r0, #4
 80078dc:	0799      	lsls	r1, r3, #30
 80078de:	bf04      	itt	eq
 80078e0:	089b      	lsreq	r3, r3, #2
 80078e2:	3002      	addeq	r0, #2
 80078e4:	07d9      	lsls	r1, r3, #31
 80078e6:	d403      	bmi.n	80078f0 <__lo0bits+0x4e>
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	f100 0001 	add.w	r0, r0, #1
 80078ee:	d003      	beq.n	80078f8 <__lo0bits+0x56>
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	4770      	bx	lr
 80078f4:	2000      	movs	r0, #0
 80078f6:	4770      	bx	lr
 80078f8:	2020      	movs	r0, #32
 80078fa:	4770      	bx	lr

080078fc <__i2b>:
 80078fc:	b510      	push	{r4, lr}
 80078fe:	460c      	mov	r4, r1
 8007900:	2101      	movs	r1, #1
 8007902:	f7ff ff07 	bl	8007714 <_Balloc>
 8007906:	4602      	mov	r2, r0
 8007908:	b928      	cbnz	r0, 8007916 <__i2b+0x1a>
 800790a:	f240 1145 	movw	r1, #325	@ 0x145
 800790e:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <__i2b+0x24>)
 8007910:	4804      	ldr	r0, [pc, #16]	@ (8007924 <__i2b+0x28>)
 8007912:	f000 fc39 	bl	8008188 <__assert_func>
 8007916:	2301      	movs	r3, #1
 8007918:	6144      	str	r4, [r0, #20]
 800791a:	6103      	str	r3, [r0, #16]
 800791c:	bd10      	pop	{r4, pc}
 800791e:	bf00      	nop
 8007920:	08008e80 	.word	0x08008e80
 8007924:	08008ea2 	.word	0x08008ea2

08007928 <__multiply>:
 8007928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	4617      	mov	r7, r2
 800792e:	690a      	ldr	r2, [r1, #16]
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	4689      	mov	r9, r1
 8007934:	429a      	cmp	r2, r3
 8007936:	bfa2      	ittt	ge
 8007938:	463b      	movge	r3, r7
 800793a:	460f      	movge	r7, r1
 800793c:	4699      	movge	r9, r3
 800793e:	693d      	ldr	r5, [r7, #16]
 8007940:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	eb05 060a 	add.w	r6, r5, sl
 800794c:	42b3      	cmp	r3, r6
 800794e:	b085      	sub	sp, #20
 8007950:	bfb8      	it	lt
 8007952:	3101      	addlt	r1, #1
 8007954:	f7ff fede 	bl	8007714 <_Balloc>
 8007958:	b930      	cbnz	r0, 8007968 <__multiply+0x40>
 800795a:	4602      	mov	r2, r0
 800795c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007960:	4b40      	ldr	r3, [pc, #256]	@ (8007a64 <__multiply+0x13c>)
 8007962:	4841      	ldr	r0, [pc, #260]	@ (8007a68 <__multiply+0x140>)
 8007964:	f000 fc10 	bl	8008188 <__assert_func>
 8007968:	f100 0414 	add.w	r4, r0, #20
 800796c:	4623      	mov	r3, r4
 800796e:	2200      	movs	r2, #0
 8007970:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007974:	4573      	cmp	r3, lr
 8007976:	d320      	bcc.n	80079ba <__multiply+0x92>
 8007978:	f107 0814 	add.w	r8, r7, #20
 800797c:	f109 0114 	add.w	r1, r9, #20
 8007980:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007984:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007988:	9302      	str	r3, [sp, #8]
 800798a:	1beb      	subs	r3, r5, r7
 800798c:	3b15      	subs	r3, #21
 800798e:	f023 0303 	bic.w	r3, r3, #3
 8007992:	3304      	adds	r3, #4
 8007994:	3715      	adds	r7, #21
 8007996:	42bd      	cmp	r5, r7
 8007998:	bf38      	it	cc
 800799a:	2304      	movcc	r3, #4
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	9103      	str	r1, [sp, #12]
 80079a2:	428b      	cmp	r3, r1
 80079a4:	d80c      	bhi.n	80079c0 <__multiply+0x98>
 80079a6:	2e00      	cmp	r6, #0
 80079a8:	dd03      	ble.n	80079b2 <__multiply+0x8a>
 80079aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d055      	beq.n	8007a5e <__multiply+0x136>
 80079b2:	6106      	str	r6, [r0, #16]
 80079b4:	b005      	add	sp, #20
 80079b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ba:	f843 2b04 	str.w	r2, [r3], #4
 80079be:	e7d9      	b.n	8007974 <__multiply+0x4c>
 80079c0:	f8b1 a000 	ldrh.w	sl, [r1]
 80079c4:	f1ba 0f00 	cmp.w	sl, #0
 80079c8:	d01f      	beq.n	8007a0a <__multiply+0xe2>
 80079ca:	46c4      	mov	ip, r8
 80079cc:	46a1      	mov	r9, r4
 80079ce:	2700      	movs	r7, #0
 80079d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80079d4:	f8d9 3000 	ldr.w	r3, [r9]
 80079d8:	fa1f fb82 	uxth.w	fp, r2
 80079dc:	b29b      	uxth	r3, r3
 80079de:	fb0a 330b 	mla	r3, sl, fp, r3
 80079e2:	443b      	add	r3, r7
 80079e4:	f8d9 7000 	ldr.w	r7, [r9]
 80079e8:	0c12      	lsrs	r2, r2, #16
 80079ea:	0c3f      	lsrs	r7, r7, #16
 80079ec:	fb0a 7202 	mla	r2, sl, r2, r7
 80079f0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079fa:	4565      	cmp	r5, ip
 80079fc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007a00:	f849 3b04 	str.w	r3, [r9], #4
 8007a04:	d8e4      	bhi.n	80079d0 <__multiply+0xa8>
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	50e7      	str	r7, [r4, r3]
 8007a0a:	9b03      	ldr	r3, [sp, #12]
 8007a0c:	3104      	adds	r1, #4
 8007a0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007a12:	f1b9 0f00 	cmp.w	r9, #0
 8007a16:	d020      	beq.n	8007a5a <__multiply+0x132>
 8007a18:	4647      	mov	r7, r8
 8007a1a:	46a4      	mov	ip, r4
 8007a1c:	f04f 0a00 	mov.w	sl, #0
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	f8b7 b000 	ldrh.w	fp, [r7]
 8007a26:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	fb09 220b 	mla	r2, r9, fp, r2
 8007a30:	4452      	add	r2, sl
 8007a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a36:	f84c 3b04 	str.w	r3, [ip], #4
 8007a3a:	f857 3b04 	ldr.w	r3, [r7], #4
 8007a3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a42:	f8bc 3000 	ldrh.w	r3, [ip]
 8007a46:	42bd      	cmp	r5, r7
 8007a48:	fb09 330a 	mla	r3, r9, sl, r3
 8007a4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007a50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a54:	d8e5      	bhi.n	8007a22 <__multiply+0xfa>
 8007a56:	9a01      	ldr	r2, [sp, #4]
 8007a58:	50a3      	str	r3, [r4, r2]
 8007a5a:	3404      	adds	r4, #4
 8007a5c:	e79f      	b.n	800799e <__multiply+0x76>
 8007a5e:	3e01      	subs	r6, #1
 8007a60:	e7a1      	b.n	80079a6 <__multiply+0x7e>
 8007a62:	bf00      	nop
 8007a64:	08008e80 	.word	0x08008e80
 8007a68:	08008ea2 	.word	0x08008ea2

08007a6c <__pow5mult>:
 8007a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a70:	4615      	mov	r5, r2
 8007a72:	f012 0203 	ands.w	r2, r2, #3
 8007a76:	4607      	mov	r7, r0
 8007a78:	460e      	mov	r6, r1
 8007a7a:	d007      	beq.n	8007a8c <__pow5mult+0x20>
 8007a7c:	4c25      	ldr	r4, [pc, #148]	@ (8007b14 <__pow5mult+0xa8>)
 8007a7e:	3a01      	subs	r2, #1
 8007a80:	2300      	movs	r3, #0
 8007a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a86:	f7ff fea7 	bl	80077d8 <__multadd>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	10ad      	asrs	r5, r5, #2
 8007a8e:	d03d      	beq.n	8007b0c <__pow5mult+0xa0>
 8007a90:	69fc      	ldr	r4, [r7, #28]
 8007a92:	b97c      	cbnz	r4, 8007ab4 <__pow5mult+0x48>
 8007a94:	2010      	movs	r0, #16
 8007a96:	f7ff fcdf 	bl	8007458 <malloc>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	61f8      	str	r0, [r7, #28]
 8007a9e:	b928      	cbnz	r0, 8007aac <__pow5mult+0x40>
 8007aa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8007b18 <__pow5mult+0xac>)
 8007aa6:	481d      	ldr	r0, [pc, #116]	@ (8007b1c <__pow5mult+0xb0>)
 8007aa8:	f000 fb6e 	bl	8008188 <__assert_func>
 8007aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ab0:	6004      	str	r4, [r0, #0]
 8007ab2:	60c4      	str	r4, [r0, #12]
 8007ab4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007abc:	b94c      	cbnz	r4, 8007ad2 <__pow5mult+0x66>
 8007abe:	f240 2171 	movw	r1, #625	@ 0x271
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	f7ff ff1a 	bl	80078fc <__i2b>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	4604      	mov	r4, r0
 8007acc:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ad0:	6003      	str	r3, [r0, #0]
 8007ad2:	f04f 0900 	mov.w	r9, #0
 8007ad6:	07eb      	lsls	r3, r5, #31
 8007ad8:	d50a      	bpl.n	8007af0 <__pow5mult+0x84>
 8007ada:	4631      	mov	r1, r6
 8007adc:	4622      	mov	r2, r4
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f7ff ff22 	bl	8007928 <__multiply>
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7ff fe53 	bl	8007794 <_Bfree>
 8007aee:	4646      	mov	r6, r8
 8007af0:	106d      	asrs	r5, r5, #1
 8007af2:	d00b      	beq.n	8007b0c <__pow5mult+0xa0>
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	b938      	cbnz	r0, 8007b08 <__pow5mult+0x9c>
 8007af8:	4622      	mov	r2, r4
 8007afa:	4621      	mov	r1, r4
 8007afc:	4638      	mov	r0, r7
 8007afe:	f7ff ff13 	bl	8007928 <__multiply>
 8007b02:	6020      	str	r0, [r4, #0]
 8007b04:	f8c0 9000 	str.w	r9, [r0]
 8007b08:	4604      	mov	r4, r0
 8007b0a:	e7e4      	b.n	8007ad6 <__pow5mult+0x6a>
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b12:	bf00      	nop
 8007b14:	08008f44 	.word	0x08008f44
 8007b18:	08008e11 	.word	0x08008e11
 8007b1c:	08008ea2 	.word	0x08008ea2

08007b20 <__lshift>:
 8007b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b24:	460c      	mov	r4, r1
 8007b26:	4607      	mov	r7, r0
 8007b28:	4691      	mov	r9, r2
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	6849      	ldr	r1, [r1, #4]
 8007b2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b32:	68a3      	ldr	r3, [r4, #8]
 8007b34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b38:	f108 0601 	add.w	r6, r8, #1
 8007b3c:	42b3      	cmp	r3, r6
 8007b3e:	db0b      	blt.n	8007b58 <__lshift+0x38>
 8007b40:	4638      	mov	r0, r7
 8007b42:	f7ff fde7 	bl	8007714 <_Balloc>
 8007b46:	4605      	mov	r5, r0
 8007b48:	b948      	cbnz	r0, 8007b5e <__lshift+0x3e>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b50:	4b27      	ldr	r3, [pc, #156]	@ (8007bf0 <__lshift+0xd0>)
 8007b52:	4828      	ldr	r0, [pc, #160]	@ (8007bf4 <__lshift+0xd4>)
 8007b54:	f000 fb18 	bl	8008188 <__assert_func>
 8007b58:	3101      	adds	r1, #1
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	e7ee      	b.n	8007b3c <__lshift+0x1c>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f100 0114 	add.w	r1, r0, #20
 8007b64:	f100 0210 	add.w	r2, r0, #16
 8007b68:	4618      	mov	r0, r3
 8007b6a:	4553      	cmp	r3, sl
 8007b6c:	db33      	blt.n	8007bd6 <__lshift+0xb6>
 8007b6e:	6920      	ldr	r0, [r4, #16]
 8007b70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b74:	f104 0314 	add.w	r3, r4, #20
 8007b78:	f019 091f 	ands.w	r9, r9, #31
 8007b7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b84:	d02b      	beq.n	8007bde <__lshift+0xbe>
 8007b86:	468a      	mov	sl, r1
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	fa00 f009 	lsl.w	r0, r0, r9
 8007b94:	4310      	orrs	r0, r2
 8007b96:	f84a 0b04 	str.w	r0, [sl], #4
 8007b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b9e:	459c      	cmp	ip, r3
 8007ba0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ba4:	d8f3      	bhi.n	8007b8e <__lshift+0x6e>
 8007ba6:	ebac 0304 	sub.w	r3, ip, r4
 8007baa:	3b15      	subs	r3, #21
 8007bac:	f023 0303 	bic.w	r3, r3, #3
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	f104 0015 	add.w	r0, r4, #21
 8007bb6:	4560      	cmp	r0, ip
 8007bb8:	bf88      	it	hi
 8007bba:	2304      	movhi	r3, #4
 8007bbc:	50ca      	str	r2, [r1, r3]
 8007bbe:	b10a      	cbz	r2, 8007bc4 <__lshift+0xa4>
 8007bc0:	f108 0602 	add.w	r6, r8, #2
 8007bc4:	3e01      	subs	r6, #1
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	4621      	mov	r1, r4
 8007bca:	612e      	str	r6, [r5, #16]
 8007bcc:	f7ff fde2 	bl	8007794 <_Bfree>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bda:	3301      	adds	r3, #1
 8007bdc:	e7c5      	b.n	8007b6a <__lshift+0x4a>
 8007bde:	3904      	subs	r1, #4
 8007be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007be4:	459c      	cmp	ip, r3
 8007be6:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bea:	d8f9      	bhi.n	8007be0 <__lshift+0xc0>
 8007bec:	e7ea      	b.n	8007bc4 <__lshift+0xa4>
 8007bee:	bf00      	nop
 8007bf0:	08008e80 	.word	0x08008e80
 8007bf4:	08008ea2 	.word	0x08008ea2

08007bf8 <__mcmp>:
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	690a      	ldr	r2, [r1, #16]
 8007bfc:	6900      	ldr	r0, [r0, #16]
 8007bfe:	b530      	push	{r4, r5, lr}
 8007c00:	1a80      	subs	r0, r0, r2
 8007c02:	d10e      	bne.n	8007c22 <__mcmp+0x2a>
 8007c04:	3314      	adds	r3, #20
 8007c06:	3114      	adds	r1, #20
 8007c08:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c0c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c10:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c14:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c18:	4295      	cmp	r5, r2
 8007c1a:	d003      	beq.n	8007c24 <__mcmp+0x2c>
 8007c1c:	d205      	bcs.n	8007c2a <__mcmp+0x32>
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c22:	bd30      	pop	{r4, r5, pc}
 8007c24:	42a3      	cmp	r3, r4
 8007c26:	d3f3      	bcc.n	8007c10 <__mcmp+0x18>
 8007c28:	e7fb      	b.n	8007c22 <__mcmp+0x2a>
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	e7f9      	b.n	8007c22 <__mcmp+0x2a>
	...

08007c30 <__mdiff>:
 8007c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	4689      	mov	r9, r1
 8007c36:	4606      	mov	r6, r0
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4648      	mov	r0, r9
 8007c3c:	4614      	mov	r4, r2
 8007c3e:	f7ff ffdb 	bl	8007bf8 <__mcmp>
 8007c42:	1e05      	subs	r5, r0, #0
 8007c44:	d112      	bne.n	8007c6c <__mdiff+0x3c>
 8007c46:	4629      	mov	r1, r5
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f7ff fd63 	bl	8007714 <_Balloc>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	b928      	cbnz	r0, 8007c5e <__mdiff+0x2e>
 8007c52:	f240 2137 	movw	r1, #567	@ 0x237
 8007c56:	4b3e      	ldr	r3, [pc, #248]	@ (8007d50 <__mdiff+0x120>)
 8007c58:	483e      	ldr	r0, [pc, #248]	@ (8007d54 <__mdiff+0x124>)
 8007c5a:	f000 fa95 	bl	8008188 <__assert_func>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c64:	4610      	mov	r0, r2
 8007c66:	b003      	add	sp, #12
 8007c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6c:	bfbc      	itt	lt
 8007c6e:	464b      	movlt	r3, r9
 8007c70:	46a1      	movlt	r9, r4
 8007c72:	4630      	mov	r0, r6
 8007c74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c78:	bfba      	itte	lt
 8007c7a:	461c      	movlt	r4, r3
 8007c7c:	2501      	movlt	r5, #1
 8007c7e:	2500      	movge	r5, #0
 8007c80:	f7ff fd48 	bl	8007714 <_Balloc>
 8007c84:	4602      	mov	r2, r0
 8007c86:	b918      	cbnz	r0, 8007c90 <__mdiff+0x60>
 8007c88:	f240 2145 	movw	r1, #581	@ 0x245
 8007c8c:	4b30      	ldr	r3, [pc, #192]	@ (8007d50 <__mdiff+0x120>)
 8007c8e:	e7e3      	b.n	8007c58 <__mdiff+0x28>
 8007c90:	f100 0b14 	add.w	fp, r0, #20
 8007c94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c98:	f109 0310 	add.w	r3, r9, #16
 8007c9c:	60c5      	str	r5, [r0, #12]
 8007c9e:	f04f 0c00 	mov.w	ip, #0
 8007ca2:	f109 0514 	add.w	r5, r9, #20
 8007ca6:	46d9      	mov	r9, fp
 8007ca8:	6926      	ldr	r6, [r4, #16]
 8007caa:	f104 0e14 	add.w	lr, r4, #20
 8007cae:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007cb2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007cb6:	9301      	str	r3, [sp, #4]
 8007cb8:	9b01      	ldr	r3, [sp, #4]
 8007cba:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007cbe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007cc2:	b281      	uxth	r1, r0
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	fa1f f38a 	uxth.w	r3, sl
 8007cca:	1a5b      	subs	r3, r3, r1
 8007ccc:	0c00      	lsrs	r0, r0, #16
 8007cce:	4463      	add	r3, ip
 8007cd0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007cd4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cde:	4576      	cmp	r6, lr
 8007ce0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ce4:	f849 3b04 	str.w	r3, [r9], #4
 8007ce8:	d8e6      	bhi.n	8007cb8 <__mdiff+0x88>
 8007cea:	1b33      	subs	r3, r6, r4
 8007cec:	3b15      	subs	r3, #21
 8007cee:	f023 0303 	bic.w	r3, r3, #3
 8007cf2:	3415      	adds	r4, #21
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	42a6      	cmp	r6, r4
 8007cf8:	bf38      	it	cc
 8007cfa:	2304      	movcc	r3, #4
 8007cfc:	441d      	add	r5, r3
 8007cfe:	445b      	add	r3, fp
 8007d00:	461e      	mov	r6, r3
 8007d02:	462c      	mov	r4, r5
 8007d04:	4544      	cmp	r4, r8
 8007d06:	d30e      	bcc.n	8007d26 <__mdiff+0xf6>
 8007d08:	f108 0103 	add.w	r1, r8, #3
 8007d0c:	1b49      	subs	r1, r1, r5
 8007d0e:	f021 0103 	bic.w	r1, r1, #3
 8007d12:	3d03      	subs	r5, #3
 8007d14:	45a8      	cmp	r8, r5
 8007d16:	bf38      	it	cc
 8007d18:	2100      	movcc	r1, #0
 8007d1a:	440b      	add	r3, r1
 8007d1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d20:	b199      	cbz	r1, 8007d4a <__mdiff+0x11a>
 8007d22:	6117      	str	r7, [r2, #16]
 8007d24:	e79e      	b.n	8007c64 <__mdiff+0x34>
 8007d26:	46e6      	mov	lr, ip
 8007d28:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d2c:	fa1f fc81 	uxth.w	ip, r1
 8007d30:	44f4      	add	ip, lr
 8007d32:	0c08      	lsrs	r0, r1, #16
 8007d34:	4471      	add	r1, lr
 8007d36:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d3a:	b289      	uxth	r1, r1
 8007d3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d44:	f846 1b04 	str.w	r1, [r6], #4
 8007d48:	e7dc      	b.n	8007d04 <__mdiff+0xd4>
 8007d4a:	3f01      	subs	r7, #1
 8007d4c:	e7e6      	b.n	8007d1c <__mdiff+0xec>
 8007d4e:	bf00      	nop
 8007d50:	08008e80 	.word	0x08008e80
 8007d54:	08008ea2 	.word	0x08008ea2

08007d58 <__d2b>:
 8007d58:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	4690      	mov	r8, r2
 8007d60:	4699      	mov	r9, r3
 8007d62:	9e08      	ldr	r6, [sp, #32]
 8007d64:	f7ff fcd6 	bl	8007714 <_Balloc>
 8007d68:	4604      	mov	r4, r0
 8007d6a:	b930      	cbnz	r0, 8007d7a <__d2b+0x22>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d72:	4b23      	ldr	r3, [pc, #140]	@ (8007e00 <__d2b+0xa8>)
 8007d74:	4823      	ldr	r0, [pc, #140]	@ (8007e04 <__d2b+0xac>)
 8007d76:	f000 fa07 	bl	8008188 <__assert_func>
 8007d7a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d82:	b10d      	cbz	r5, 8007d88 <__d2b+0x30>
 8007d84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	f1b8 0300 	subs.w	r3, r8, #0
 8007d8e:	d024      	beq.n	8007dda <__d2b+0x82>
 8007d90:	4668      	mov	r0, sp
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	f7ff fd85 	bl	80078a2 <__lo0bits>
 8007d98:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d9c:	b1d8      	cbz	r0, 8007dd6 <__d2b+0x7e>
 8007d9e:	f1c0 0320 	rsb	r3, r0, #32
 8007da2:	fa02 f303 	lsl.w	r3, r2, r3
 8007da6:	430b      	orrs	r3, r1
 8007da8:	40c2      	lsrs	r2, r0
 8007daa:	6163      	str	r3, [r4, #20]
 8007dac:	9201      	str	r2, [sp, #4]
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	bf0c      	ite	eq
 8007db4:	2201      	moveq	r2, #1
 8007db6:	2202      	movne	r2, #2
 8007db8:	61a3      	str	r3, [r4, #24]
 8007dba:	6122      	str	r2, [r4, #16]
 8007dbc:	b1ad      	cbz	r5, 8007dea <__d2b+0x92>
 8007dbe:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007dc2:	4405      	add	r5, r0
 8007dc4:	6035      	str	r5, [r6, #0]
 8007dc6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007dca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dcc:	6018      	str	r0, [r3, #0]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	b002      	add	sp, #8
 8007dd2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007dd6:	6161      	str	r1, [r4, #20]
 8007dd8:	e7e9      	b.n	8007dae <__d2b+0x56>
 8007dda:	a801      	add	r0, sp, #4
 8007ddc:	f7ff fd61 	bl	80078a2 <__lo0bits>
 8007de0:	9b01      	ldr	r3, [sp, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	6163      	str	r3, [r4, #20]
 8007de6:	3020      	adds	r0, #32
 8007de8:	e7e7      	b.n	8007dba <__d2b+0x62>
 8007dea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007dee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007df2:	6030      	str	r0, [r6, #0]
 8007df4:	6918      	ldr	r0, [r3, #16]
 8007df6:	f7ff fd35 	bl	8007864 <__hi0bits>
 8007dfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dfe:	e7e4      	b.n	8007dca <__d2b+0x72>
 8007e00:	08008e80 	.word	0x08008e80
 8007e04:	08008ea2 	.word	0x08008ea2

08007e08 <__sread>:
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e10:	f000 f956 	bl	80080c0 <_read_r>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	bfab      	itete	ge
 8007e18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8007e1c:	181b      	addge	r3, r3, r0
 8007e1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e22:	bfac      	ite	ge
 8007e24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e26:	81a3      	strhlt	r3, [r4, #12]
 8007e28:	bd10      	pop	{r4, pc}

08007e2a <__swrite>:
 8007e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2e:	461f      	mov	r7, r3
 8007e30:	898b      	ldrh	r3, [r1, #12]
 8007e32:	4605      	mov	r5, r0
 8007e34:	05db      	lsls	r3, r3, #23
 8007e36:	460c      	mov	r4, r1
 8007e38:	4616      	mov	r6, r2
 8007e3a:	d505      	bpl.n	8007e48 <__swrite+0x1e>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	f000 f92a 	bl	800809c <_lseek_r>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	4632      	mov	r2, r6
 8007e4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e50:	81a3      	strh	r3, [r4, #12]
 8007e52:	4628      	mov	r0, r5
 8007e54:	463b      	mov	r3, r7
 8007e56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5e:	f000 b951 	b.w	8008104 <_write_r>

08007e62 <__sseek>:
 8007e62:	b510      	push	{r4, lr}
 8007e64:	460c      	mov	r4, r1
 8007e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6a:	f000 f917 	bl	800809c <_lseek_r>
 8007e6e:	1c43      	adds	r3, r0, #1
 8007e70:	89a3      	ldrh	r3, [r4, #12]
 8007e72:	bf15      	itete	ne
 8007e74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e7e:	81a3      	strheq	r3, [r4, #12]
 8007e80:	bf18      	it	ne
 8007e82:	81a3      	strhne	r3, [r4, #12]
 8007e84:	bd10      	pop	{r4, pc}

08007e86 <__sclose>:
 8007e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8a:	f000 b94d 	b.w	8008128 <_close_r>

08007e8e <__swbuf_r>:
 8007e8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e90:	460e      	mov	r6, r1
 8007e92:	4614      	mov	r4, r2
 8007e94:	4605      	mov	r5, r0
 8007e96:	b118      	cbz	r0, 8007ea0 <__swbuf_r+0x12>
 8007e98:	6a03      	ldr	r3, [r0, #32]
 8007e9a:	b90b      	cbnz	r3, 8007ea0 <__swbuf_r+0x12>
 8007e9c:	f7fe fa50 	bl	8006340 <__sinit>
 8007ea0:	69a3      	ldr	r3, [r4, #24]
 8007ea2:	60a3      	str	r3, [r4, #8]
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	071a      	lsls	r2, r3, #28
 8007ea8:	d501      	bpl.n	8007eae <__swbuf_r+0x20>
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	b943      	cbnz	r3, 8007ec0 <__swbuf_r+0x32>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f000 f82b 	bl	8007f0c <__swsetup_r>
 8007eb6:	b118      	cbz	r0, 8007ec0 <__swbuf_r+0x32>
 8007eb8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	6922      	ldr	r2, [r4, #16]
 8007ec4:	b2f6      	uxtb	r6, r6
 8007ec6:	1a98      	subs	r0, r3, r2
 8007ec8:	6963      	ldr	r3, [r4, #20]
 8007eca:	4637      	mov	r7, r6
 8007ecc:	4283      	cmp	r3, r0
 8007ece:	dc05      	bgt.n	8007edc <__swbuf_r+0x4e>
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7ff fbea 	bl	80076ac <_fflush_r>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	d1ed      	bne.n	8007eb8 <__swbuf_r+0x2a>
 8007edc:	68a3      	ldr	r3, [r4, #8]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	60a3      	str	r3, [r4, #8]
 8007ee2:	6823      	ldr	r3, [r4, #0]
 8007ee4:	1c5a      	adds	r2, r3, #1
 8007ee6:	6022      	str	r2, [r4, #0]
 8007ee8:	701e      	strb	r6, [r3, #0]
 8007eea:	6962      	ldr	r2, [r4, #20]
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d004      	beq.n	8007efc <__swbuf_r+0x6e>
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	07db      	lsls	r3, r3, #31
 8007ef6:	d5e1      	bpl.n	8007ebc <__swbuf_r+0x2e>
 8007ef8:	2e0a      	cmp	r6, #10
 8007efa:	d1df      	bne.n	8007ebc <__swbuf_r+0x2e>
 8007efc:	4621      	mov	r1, r4
 8007efe:	4628      	mov	r0, r5
 8007f00:	f7ff fbd4 	bl	80076ac <_fflush_r>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d0d9      	beq.n	8007ebc <__swbuf_r+0x2e>
 8007f08:	e7d6      	b.n	8007eb8 <__swbuf_r+0x2a>
	...

08007f0c <__swsetup_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4b29      	ldr	r3, [pc, #164]	@ (8007fb4 <__swsetup_r+0xa8>)
 8007f10:	4605      	mov	r5, r0
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	460c      	mov	r4, r1
 8007f16:	b118      	cbz	r0, 8007f20 <__swsetup_r+0x14>
 8007f18:	6a03      	ldr	r3, [r0, #32]
 8007f1a:	b90b      	cbnz	r3, 8007f20 <__swsetup_r+0x14>
 8007f1c:	f7fe fa10 	bl	8006340 <__sinit>
 8007f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f24:	0719      	lsls	r1, r3, #28
 8007f26:	d422      	bmi.n	8007f6e <__swsetup_r+0x62>
 8007f28:	06da      	lsls	r2, r3, #27
 8007f2a:	d407      	bmi.n	8007f3c <__swsetup_r+0x30>
 8007f2c:	2209      	movs	r2, #9
 8007f2e:	602a      	str	r2, [r5, #0]
 8007f30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f38:	81a3      	strh	r3, [r4, #12]
 8007f3a:	e033      	b.n	8007fa4 <__swsetup_r+0x98>
 8007f3c:	0758      	lsls	r0, r3, #29
 8007f3e:	d512      	bpl.n	8007f66 <__swsetup_r+0x5a>
 8007f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f42:	b141      	cbz	r1, 8007f56 <__swsetup_r+0x4a>
 8007f44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f48:	4299      	cmp	r1, r3
 8007f4a:	d002      	beq.n	8007f52 <__swsetup_r+0x46>
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f000 f94d 	bl	80081ec <_free_r>
 8007f52:	2300      	movs	r3, #0
 8007f54:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	6063      	str	r3, [r4, #4]
 8007f62:	6923      	ldr	r3, [r4, #16]
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	f043 0308 	orr.w	r3, r3, #8
 8007f6c:	81a3      	strh	r3, [r4, #12]
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	b94b      	cbnz	r3, 8007f86 <__swsetup_r+0x7a>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f7c:	d003      	beq.n	8007f86 <__swsetup_r+0x7a>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 f83e 	bl	8008002 <__smakebuf_r>
 8007f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8a:	f013 0201 	ands.w	r2, r3, #1
 8007f8e:	d00a      	beq.n	8007fa6 <__swsetup_r+0x9a>
 8007f90:	2200      	movs	r2, #0
 8007f92:	60a2      	str	r2, [r4, #8]
 8007f94:	6962      	ldr	r2, [r4, #20]
 8007f96:	4252      	negs	r2, r2
 8007f98:	61a2      	str	r2, [r4, #24]
 8007f9a:	6922      	ldr	r2, [r4, #16]
 8007f9c:	b942      	cbnz	r2, 8007fb0 <__swsetup_r+0xa4>
 8007f9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fa2:	d1c5      	bne.n	8007f30 <__swsetup_r+0x24>
 8007fa4:	bd38      	pop	{r3, r4, r5, pc}
 8007fa6:	0799      	lsls	r1, r3, #30
 8007fa8:	bf58      	it	pl
 8007faa:	6962      	ldrpl	r2, [r4, #20]
 8007fac:	60a2      	str	r2, [r4, #8]
 8007fae:	e7f4      	b.n	8007f9a <__swsetup_r+0x8e>
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	e7f7      	b.n	8007fa4 <__swsetup_r+0x98>
 8007fb4:	20000018 	.word	0x20000018

08007fb8 <__swhatbuf_r>:
 8007fb8:	b570      	push	{r4, r5, r6, lr}
 8007fba:	460c      	mov	r4, r1
 8007fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc0:	4615      	mov	r5, r2
 8007fc2:	2900      	cmp	r1, #0
 8007fc4:	461e      	mov	r6, r3
 8007fc6:	b096      	sub	sp, #88	@ 0x58
 8007fc8:	da0c      	bge.n	8007fe4 <__swhatbuf_r+0x2c>
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	2100      	movs	r1, #0
 8007fce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fd2:	bf14      	ite	ne
 8007fd4:	2340      	movne	r3, #64	@ 0x40
 8007fd6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fda:	2000      	movs	r0, #0
 8007fdc:	6031      	str	r1, [r6, #0]
 8007fde:	602b      	str	r3, [r5, #0]
 8007fe0:	b016      	add	sp, #88	@ 0x58
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	466a      	mov	r2, sp
 8007fe6:	f000 f8af 	bl	8008148 <_fstat_r>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	dbed      	blt.n	8007fca <__swhatbuf_r+0x12>
 8007fee:	9901      	ldr	r1, [sp, #4]
 8007ff0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ff4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ff8:	4259      	negs	r1, r3
 8007ffa:	4159      	adcs	r1, r3
 8007ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008000:	e7eb      	b.n	8007fda <__swhatbuf_r+0x22>

08008002 <__smakebuf_r>:
 8008002:	898b      	ldrh	r3, [r1, #12]
 8008004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008006:	079d      	lsls	r5, r3, #30
 8008008:	4606      	mov	r6, r0
 800800a:	460c      	mov	r4, r1
 800800c:	d507      	bpl.n	800801e <__smakebuf_r+0x1c>
 800800e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	6123      	str	r3, [r4, #16]
 8008016:	2301      	movs	r3, #1
 8008018:	6163      	str	r3, [r4, #20]
 800801a:	b003      	add	sp, #12
 800801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800801e:	466a      	mov	r2, sp
 8008020:	ab01      	add	r3, sp, #4
 8008022:	f7ff ffc9 	bl	8007fb8 <__swhatbuf_r>
 8008026:	9f00      	ldr	r7, [sp, #0]
 8008028:	4605      	mov	r5, r0
 800802a:	4639      	mov	r1, r7
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff fa3d 	bl	80074ac <_malloc_r>
 8008032:	b948      	cbnz	r0, 8008048 <__smakebuf_r+0x46>
 8008034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008038:	059a      	lsls	r2, r3, #22
 800803a:	d4ee      	bmi.n	800801a <__smakebuf_r+0x18>
 800803c:	f023 0303 	bic.w	r3, r3, #3
 8008040:	f043 0302 	orr.w	r3, r3, #2
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	e7e2      	b.n	800800e <__smakebuf_r+0xc>
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800804e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008052:	81a3      	strh	r3, [r4, #12]
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	6020      	str	r0, [r4, #0]
 8008058:	b15b      	cbz	r3, 8008072 <__smakebuf_r+0x70>
 800805a:	4630      	mov	r0, r6
 800805c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008060:	f000 f80c 	bl	800807c <_isatty_r>
 8008064:	b128      	cbz	r0, 8008072 <__smakebuf_r+0x70>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	f023 0303 	bic.w	r3, r3, #3
 800806c:	f043 0301 	orr.w	r3, r3, #1
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	431d      	orrs	r5, r3
 8008076:	81a5      	strh	r5, [r4, #12]
 8008078:	e7cf      	b.n	800801a <__smakebuf_r+0x18>
	...

0800807c <_isatty_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	2300      	movs	r3, #0
 8008080:	4d05      	ldr	r5, [pc, #20]	@ (8008098 <_isatty_r+0x1c>)
 8008082:	4604      	mov	r4, r0
 8008084:	4608      	mov	r0, r1
 8008086:	602b      	str	r3, [r5, #0]
 8008088:	f7f9 feaf 	bl	8001dea <_isatty>
 800808c:	1c43      	adds	r3, r0, #1
 800808e:	d102      	bne.n	8008096 <_isatty_r+0x1a>
 8008090:	682b      	ldr	r3, [r5, #0]
 8008092:	b103      	cbz	r3, 8008096 <_isatty_r+0x1a>
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	20000474 	.word	0x20000474

0800809c <_lseek_r>:
 800809c:	b538      	push	{r3, r4, r5, lr}
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	2200      	movs	r2, #0
 80080a6:	4d05      	ldr	r5, [pc, #20]	@ (80080bc <_lseek_r+0x20>)
 80080a8:	602a      	str	r2, [r5, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f7f9 fea7 	bl	8001dfe <_lseek>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <_lseek_r+0x1e>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b103      	cbz	r3, 80080ba <_lseek_r+0x1e>
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	20000474 	.word	0x20000474

080080c0 <_read_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	4611      	mov	r1, r2
 80080c8:	2200      	movs	r2, #0
 80080ca:	4d05      	ldr	r5, [pc, #20]	@ (80080e0 <_read_r+0x20>)
 80080cc:	602a      	str	r2, [r5, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f7f9 fe38 	bl	8001d44 <_read>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_read_r+0x1e>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_read_r+0x1e>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	20000474 	.word	0x20000474

080080e4 <_sbrk_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	2300      	movs	r3, #0
 80080e8:	4d05      	ldr	r5, [pc, #20]	@ (8008100 <_sbrk_r+0x1c>)
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	f7f9 fe92 	bl	8001e18 <_sbrk>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_sbrk_r+0x1a>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_sbrk_r+0x1a>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	20000474 	.word	0x20000474

08008104 <_write_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	2200      	movs	r2, #0
 800810e:	4d05      	ldr	r5, [pc, #20]	@ (8008124 <_write_r+0x20>)
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7f9 fe33 	bl	8001d7e <_write>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_write_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_write_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	20000474 	.word	0x20000474

08008128 <_close_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	2300      	movs	r3, #0
 800812c:	4d05      	ldr	r5, [pc, #20]	@ (8008144 <_close_r+0x1c>)
 800812e:	4604      	mov	r4, r0
 8008130:	4608      	mov	r0, r1
 8008132:	602b      	str	r3, [r5, #0]
 8008134:	f7f9 fe3f 	bl	8001db6 <_close>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	d102      	bne.n	8008142 <_close_r+0x1a>
 800813c:	682b      	ldr	r3, [r5, #0]
 800813e:	b103      	cbz	r3, 8008142 <_close_r+0x1a>
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	20000474 	.word	0x20000474

08008148 <_fstat_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	2300      	movs	r3, #0
 800814c:	4d06      	ldr	r5, [pc, #24]	@ (8008168 <_fstat_r+0x20>)
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	4611      	mov	r1, r2
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	f7f9 fe39 	bl	8001dcc <_fstat>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d102      	bne.n	8008164 <_fstat_r+0x1c>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	b103      	cbz	r3, 8008164 <_fstat_r+0x1c>
 8008162:	6023      	str	r3, [r4, #0]
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	bf00      	nop
 8008168:	20000474 	.word	0x20000474

0800816c <memcpy>:
 800816c:	440a      	add	r2, r1
 800816e:	4291      	cmp	r1, r2
 8008170:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008174:	d100      	bne.n	8008178 <memcpy+0xc>
 8008176:	4770      	bx	lr
 8008178:	b510      	push	{r4, lr}
 800817a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800817e:	4291      	cmp	r1, r2
 8008180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008184:	d1f9      	bne.n	800817a <memcpy+0xe>
 8008186:	bd10      	pop	{r4, pc}

08008188 <__assert_func>:
 8008188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800818a:	4614      	mov	r4, r2
 800818c:	461a      	mov	r2, r3
 800818e:	4b09      	ldr	r3, [pc, #36]	@ (80081b4 <__assert_func+0x2c>)
 8008190:	4605      	mov	r5, r0
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68d8      	ldr	r0, [r3, #12]
 8008196:	b14c      	cbz	r4, 80081ac <__assert_func+0x24>
 8008198:	4b07      	ldr	r3, [pc, #28]	@ (80081b8 <__assert_func+0x30>)
 800819a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800819e:	9100      	str	r1, [sp, #0]
 80081a0:	462b      	mov	r3, r5
 80081a2:	4906      	ldr	r1, [pc, #24]	@ (80081bc <__assert_func+0x34>)
 80081a4:	f000 f87c 	bl	80082a0 <fiprintf>
 80081a8:	f000 f899 	bl	80082de <abort>
 80081ac:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <__assert_func+0x38>)
 80081ae:	461c      	mov	r4, r3
 80081b0:	e7f3      	b.n	800819a <__assert_func+0x12>
 80081b2:	bf00      	nop
 80081b4:	20000018 	.word	0x20000018
 80081b8:	08008f05 	.word	0x08008f05
 80081bc:	08008f12 	.word	0x08008f12
 80081c0:	08008f40 	.word	0x08008f40

080081c4 <_calloc_r>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	fba1 5402 	umull	r5, r4, r1, r2
 80081ca:	b934      	cbnz	r4, 80081da <_calloc_r+0x16>
 80081cc:	4629      	mov	r1, r5
 80081ce:	f7ff f96d 	bl	80074ac <_malloc_r>
 80081d2:	4606      	mov	r6, r0
 80081d4:	b928      	cbnz	r0, 80081e2 <_calloc_r+0x1e>
 80081d6:	4630      	mov	r0, r6
 80081d8:	bd70      	pop	{r4, r5, r6, pc}
 80081da:	220c      	movs	r2, #12
 80081dc:	2600      	movs	r6, #0
 80081de:	6002      	str	r2, [r0, #0]
 80081e0:	e7f9      	b.n	80081d6 <_calloc_r+0x12>
 80081e2:	462a      	mov	r2, r5
 80081e4:	4621      	mov	r1, r4
 80081e6:	f7fe f951 	bl	800648c <memset>
 80081ea:	e7f4      	b.n	80081d6 <_calloc_r+0x12>

080081ec <_free_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4605      	mov	r5, r0
 80081f0:	2900      	cmp	r1, #0
 80081f2:	d040      	beq.n	8008276 <_free_r+0x8a>
 80081f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081f8:	1f0c      	subs	r4, r1, #4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bfb8      	it	lt
 80081fe:	18e4      	addlt	r4, r4, r3
 8008200:	f7ff fa7c 	bl	80076fc <__malloc_lock>
 8008204:	4a1c      	ldr	r2, [pc, #112]	@ (8008278 <_free_r+0x8c>)
 8008206:	6813      	ldr	r3, [r2, #0]
 8008208:	b933      	cbnz	r3, 8008218 <_free_r+0x2c>
 800820a:	6063      	str	r3, [r4, #4]
 800820c:	6014      	str	r4, [r2, #0]
 800820e:	4628      	mov	r0, r5
 8008210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008214:	f7ff ba78 	b.w	8007708 <__malloc_unlock>
 8008218:	42a3      	cmp	r3, r4
 800821a:	d908      	bls.n	800822e <_free_r+0x42>
 800821c:	6820      	ldr	r0, [r4, #0]
 800821e:	1821      	adds	r1, r4, r0
 8008220:	428b      	cmp	r3, r1
 8008222:	bf01      	itttt	eq
 8008224:	6819      	ldreq	r1, [r3, #0]
 8008226:	685b      	ldreq	r3, [r3, #4]
 8008228:	1809      	addeq	r1, r1, r0
 800822a:	6021      	streq	r1, [r4, #0]
 800822c:	e7ed      	b.n	800820a <_free_r+0x1e>
 800822e:	461a      	mov	r2, r3
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	b10b      	cbz	r3, 8008238 <_free_r+0x4c>
 8008234:	42a3      	cmp	r3, r4
 8008236:	d9fa      	bls.n	800822e <_free_r+0x42>
 8008238:	6811      	ldr	r1, [r2, #0]
 800823a:	1850      	adds	r0, r2, r1
 800823c:	42a0      	cmp	r0, r4
 800823e:	d10b      	bne.n	8008258 <_free_r+0x6c>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	4401      	add	r1, r0
 8008244:	1850      	adds	r0, r2, r1
 8008246:	4283      	cmp	r3, r0
 8008248:	6011      	str	r1, [r2, #0]
 800824a:	d1e0      	bne.n	800820e <_free_r+0x22>
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4408      	add	r0, r1
 8008252:	6010      	str	r0, [r2, #0]
 8008254:	6053      	str	r3, [r2, #4]
 8008256:	e7da      	b.n	800820e <_free_r+0x22>
 8008258:	d902      	bls.n	8008260 <_free_r+0x74>
 800825a:	230c      	movs	r3, #12
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	e7d6      	b.n	800820e <_free_r+0x22>
 8008260:	6820      	ldr	r0, [r4, #0]
 8008262:	1821      	adds	r1, r4, r0
 8008264:	428b      	cmp	r3, r1
 8008266:	bf01      	itttt	eq
 8008268:	6819      	ldreq	r1, [r3, #0]
 800826a:	685b      	ldreq	r3, [r3, #4]
 800826c:	1809      	addeq	r1, r1, r0
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	6063      	str	r3, [r4, #4]
 8008272:	6054      	str	r4, [r2, #4]
 8008274:	e7cb      	b.n	800820e <_free_r+0x22>
 8008276:	bd38      	pop	{r3, r4, r5, pc}
 8008278:	20000470 	.word	0x20000470

0800827c <__ascii_mbtowc>:
 800827c:	b082      	sub	sp, #8
 800827e:	b901      	cbnz	r1, 8008282 <__ascii_mbtowc+0x6>
 8008280:	a901      	add	r1, sp, #4
 8008282:	b142      	cbz	r2, 8008296 <__ascii_mbtowc+0x1a>
 8008284:	b14b      	cbz	r3, 800829a <__ascii_mbtowc+0x1e>
 8008286:	7813      	ldrb	r3, [r2, #0]
 8008288:	600b      	str	r3, [r1, #0]
 800828a:	7812      	ldrb	r2, [r2, #0]
 800828c:	1e10      	subs	r0, r2, #0
 800828e:	bf18      	it	ne
 8008290:	2001      	movne	r0, #1
 8008292:	b002      	add	sp, #8
 8008294:	4770      	bx	lr
 8008296:	4610      	mov	r0, r2
 8008298:	e7fb      	b.n	8008292 <__ascii_mbtowc+0x16>
 800829a:	f06f 0001 	mvn.w	r0, #1
 800829e:	e7f8      	b.n	8008292 <__ascii_mbtowc+0x16>

080082a0 <fiprintf>:
 80082a0:	b40e      	push	{r1, r2, r3}
 80082a2:	b503      	push	{r0, r1, lr}
 80082a4:	4601      	mov	r1, r0
 80082a6:	ab03      	add	r3, sp, #12
 80082a8:	4805      	ldr	r0, [pc, #20]	@ (80082c0 <fiprintf+0x20>)
 80082aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ae:	6800      	ldr	r0, [r0, #0]
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	f7fe ffb9 	bl	8007228 <_vfiprintf_r>
 80082b6:	b002      	add	sp, #8
 80082b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082bc:	b003      	add	sp, #12
 80082be:	4770      	bx	lr
 80082c0:	20000018 	.word	0x20000018

080082c4 <__ascii_wctomb>:
 80082c4:	4603      	mov	r3, r0
 80082c6:	4608      	mov	r0, r1
 80082c8:	b141      	cbz	r1, 80082dc <__ascii_wctomb+0x18>
 80082ca:	2aff      	cmp	r2, #255	@ 0xff
 80082cc:	d904      	bls.n	80082d8 <__ascii_wctomb+0x14>
 80082ce:	228a      	movs	r2, #138	@ 0x8a
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	4770      	bx	lr
 80082d8:	2001      	movs	r0, #1
 80082da:	700a      	strb	r2, [r1, #0]
 80082dc:	4770      	bx	lr

080082de <abort>:
 80082de:	2006      	movs	r0, #6
 80082e0:	b508      	push	{r3, lr}
 80082e2:	f000 f82b 	bl	800833c <raise>
 80082e6:	2001      	movs	r0, #1
 80082e8:	f7f9 fd21 	bl	8001d2e <_exit>

080082ec <_raise_r>:
 80082ec:	291f      	cmp	r1, #31
 80082ee:	b538      	push	{r3, r4, r5, lr}
 80082f0:	4605      	mov	r5, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	d904      	bls.n	8008300 <_raise_r+0x14>
 80082f6:	2316      	movs	r3, #22
 80082f8:	6003      	str	r3, [r0, #0]
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008302:	b112      	cbz	r2, 800830a <_raise_r+0x1e>
 8008304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008308:	b94b      	cbnz	r3, 800831e <_raise_r+0x32>
 800830a:	4628      	mov	r0, r5
 800830c:	f000 f830 	bl	8008370 <_getpid_r>
 8008310:	4622      	mov	r2, r4
 8008312:	4601      	mov	r1, r0
 8008314:	4628      	mov	r0, r5
 8008316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800831a:	f000 b817 	b.w	800834c <_kill_r>
 800831e:	2b01      	cmp	r3, #1
 8008320:	d00a      	beq.n	8008338 <_raise_r+0x4c>
 8008322:	1c59      	adds	r1, r3, #1
 8008324:	d103      	bne.n	800832e <_raise_r+0x42>
 8008326:	2316      	movs	r3, #22
 8008328:	6003      	str	r3, [r0, #0]
 800832a:	2001      	movs	r0, #1
 800832c:	e7e7      	b.n	80082fe <_raise_r+0x12>
 800832e:	2100      	movs	r1, #0
 8008330:	4620      	mov	r0, r4
 8008332:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008336:	4798      	blx	r3
 8008338:	2000      	movs	r0, #0
 800833a:	e7e0      	b.n	80082fe <_raise_r+0x12>

0800833c <raise>:
 800833c:	4b02      	ldr	r3, [pc, #8]	@ (8008348 <raise+0xc>)
 800833e:	4601      	mov	r1, r0
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	f7ff bfd3 	b.w	80082ec <_raise_r>
 8008346:	bf00      	nop
 8008348:	20000018 	.word	0x20000018

0800834c <_kill_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	2300      	movs	r3, #0
 8008350:	4d06      	ldr	r5, [pc, #24]	@ (800836c <_kill_r+0x20>)
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	602b      	str	r3, [r5, #0]
 800835a:	f7f9 fcd8 	bl	8001d0e <_kill>
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d102      	bne.n	8008368 <_kill_r+0x1c>
 8008362:	682b      	ldr	r3, [r5, #0]
 8008364:	b103      	cbz	r3, 8008368 <_kill_r+0x1c>
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	bd38      	pop	{r3, r4, r5, pc}
 800836a:	bf00      	nop
 800836c:	20000474 	.word	0x20000474

08008370 <_getpid_r>:
 8008370:	f7f9 bcc6 	b.w	8001d00 <_getpid>

08008374 <powf>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	460c      	mov	r4, r1
 8008378:	4606      	mov	r6, r0
 800837a:	f000 f851 	bl	8008420 <__ieee754_powf>
 800837e:	4621      	mov	r1, r4
 8008380:	4605      	mov	r5, r0
 8008382:	4620      	mov	r0, r4
 8008384:	f7f8 fe6c 	bl	8001060 <__aeabi_fcmpun>
 8008388:	bb68      	cbnz	r0, 80083e6 <powf+0x72>
 800838a:	2100      	movs	r1, #0
 800838c:	4630      	mov	r0, r6
 800838e:	f7f8 fe35 	bl	8000ffc <__aeabi_fcmpeq>
 8008392:	b190      	cbz	r0, 80083ba <powf+0x46>
 8008394:	2100      	movs	r1, #0
 8008396:	4620      	mov	r0, r4
 8008398:	f7f8 fe30 	bl	8000ffc <__aeabi_fcmpeq>
 800839c:	2800      	cmp	r0, #0
 800839e:	d133      	bne.n	8008408 <powf+0x94>
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 f834 	bl	800840e <finitef>
 80083a6:	b1f0      	cbz	r0, 80083e6 <powf+0x72>
 80083a8:	2100      	movs	r1, #0
 80083aa:	4620      	mov	r0, r4
 80083ac:	f7f8 fe30 	bl	8001010 <__aeabi_fcmplt>
 80083b0:	b1c8      	cbz	r0, 80083e6 <powf+0x72>
 80083b2:	f7fe f873 	bl	800649c <__errno>
 80083b6:	2322      	movs	r3, #34	@ 0x22
 80083b8:	e014      	b.n	80083e4 <powf+0x70>
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 f827 	bl	800840e <finitef>
 80083c0:	b998      	cbnz	r0, 80083ea <powf+0x76>
 80083c2:	4630      	mov	r0, r6
 80083c4:	f000 f823 	bl	800840e <finitef>
 80083c8:	b178      	cbz	r0, 80083ea <powf+0x76>
 80083ca:	4620      	mov	r0, r4
 80083cc:	f000 f81f 	bl	800840e <finitef>
 80083d0:	b158      	cbz	r0, 80083ea <powf+0x76>
 80083d2:	4629      	mov	r1, r5
 80083d4:	4628      	mov	r0, r5
 80083d6:	f7f8 fe43 	bl	8001060 <__aeabi_fcmpun>
 80083da:	2800      	cmp	r0, #0
 80083dc:	d0e9      	beq.n	80083b2 <powf+0x3e>
 80083de:	f7fe f85d 	bl	800649c <__errno>
 80083e2:	2321      	movs	r3, #33	@ 0x21
 80083e4:	6003      	str	r3, [r0, #0]
 80083e6:	4628      	mov	r0, r5
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
 80083ea:	2100      	movs	r1, #0
 80083ec:	4628      	mov	r0, r5
 80083ee:	f7f8 fe05 	bl	8000ffc <__aeabi_fcmpeq>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d0f7      	beq.n	80083e6 <powf+0x72>
 80083f6:	4630      	mov	r0, r6
 80083f8:	f000 f809 	bl	800840e <finitef>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d0f2      	beq.n	80083e6 <powf+0x72>
 8008400:	4620      	mov	r0, r4
 8008402:	f000 f804 	bl	800840e <finitef>
 8008406:	e7d3      	b.n	80083b0 <powf+0x3c>
 8008408:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 800840c:	e7eb      	b.n	80083e6 <powf+0x72>

0800840e <finitef>:
 800840e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008412:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8008416:	bfac      	ite	ge
 8008418:	2000      	movge	r0, #0
 800841a:	2001      	movlt	r0, #1
 800841c:	4770      	bx	lr
	...

08008420 <__ieee754_powf>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8008428:	4681      	mov	r9, r0
 800842a:	460f      	mov	r7, r1
 800842c:	4606      	mov	r6, r0
 800842e:	460c      	mov	r4, r1
 8008430:	b087      	sub	sp, #28
 8008432:	d10c      	bne.n	800844e <__ieee754_powf+0x2e>
 8008434:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8008438:	0076      	lsls	r6, r6, #1
 800843a:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800843e:	f240 8310 	bls.w	8008a62 <__ieee754_powf+0x642>
 8008442:	4639      	mov	r1, r7
 8008444:	4648      	mov	r0, r9
 8008446:	f7f8 fb3d 	bl	8000ac4 <__addsf3>
 800844a:	4601      	mov	r1, r0
 800844c:	e043      	b.n	80084d6 <__ieee754_powf+0xb6>
 800844e:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8008452:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8008456:	d802      	bhi.n	800845e <__ieee754_powf+0x3e>
 8008458:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 800845c:	d908      	bls.n	8008470 <__ieee754_powf+0x50>
 800845e:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8008462:	d1ee      	bne.n	8008442 <__ieee754_powf+0x22>
 8008464:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8008468:	0064      	lsls	r4, r4, #1
 800846a:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800846e:	e7e6      	b.n	800843e <__ieee754_powf+0x1e>
 8008470:	2800      	cmp	r0, #0
 8008472:	da1f      	bge.n	80084b4 <__ieee754_powf+0x94>
 8008474:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8008478:	f080 82f8 	bcs.w	8008a6c <__ieee754_powf+0x64c>
 800847c:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8008480:	d32f      	bcc.n	80084e2 <__ieee754_powf+0xc2>
 8008482:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8008486:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800848a:	fa4b f503 	asr.w	r5, fp, r3
 800848e:	fa05 f303 	lsl.w	r3, r5, r3
 8008492:	455b      	cmp	r3, fp
 8008494:	d123      	bne.n	80084de <__ieee754_powf+0xbe>
 8008496:	f005 0501 	and.w	r5, r5, #1
 800849a:	f1c5 0502 	rsb	r5, r5, #2
 800849e:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80084a2:	d11f      	bne.n	80084e4 <__ieee754_powf+0xc4>
 80084a4:	2c00      	cmp	r4, #0
 80084a6:	4649      	mov	r1, r9
 80084a8:	da15      	bge.n	80084d6 <__ieee754_powf+0xb6>
 80084aa:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80084ae:	f7f8 fcc5 	bl	8000e3c <__aeabi_fdiv>
 80084b2:	e7ca      	b.n	800844a <__ieee754_powf+0x2a>
 80084b4:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80084b8:	d111      	bne.n	80084de <__ieee754_powf+0xbe>
 80084ba:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80084be:	f000 82d0 	beq.w	8008a62 <__ieee754_powf+0x642>
 80084c2:	d904      	bls.n	80084ce <__ieee754_powf+0xae>
 80084c4:	2c00      	cmp	r4, #0
 80084c6:	f280 82cf 	bge.w	8008a68 <__ieee754_powf+0x648>
 80084ca:	2100      	movs	r1, #0
 80084cc:	e003      	b.n	80084d6 <__ieee754_powf+0xb6>
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	dafb      	bge.n	80084ca <__ieee754_powf+0xaa>
 80084d2:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80084d6:	4608      	mov	r0, r1
 80084d8:	b007      	add	sp, #28
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	2500      	movs	r5, #0
 80084e0:	e7dd      	b.n	800849e <__ieee754_powf+0x7e>
 80084e2:	2500      	movs	r5, #0
 80084e4:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80084e8:	d104      	bne.n	80084f4 <__ieee754_powf+0xd4>
 80084ea:	4649      	mov	r1, r9
 80084ec:	4648      	mov	r0, r9
 80084ee:	f7f8 fbf1 	bl	8000cd4 <__aeabi_fmul>
 80084f2:	e7aa      	b.n	800844a <__ieee754_powf+0x2a>
 80084f4:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80084f8:	f040 82bd 	bne.w	8008a76 <__ieee754_powf+0x656>
 80084fc:	2e00      	cmp	r6, #0
 80084fe:	f2c0 82ba 	blt.w	8008a76 <__ieee754_powf+0x656>
 8008502:	4648      	mov	r0, r9
 8008504:	b007      	add	sp, #28
 8008506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850a:	f000 bb57 	b.w	8008bbc <__ieee754_sqrtf>
 800850e:	2d01      	cmp	r5, #1
 8008510:	d1e1      	bne.n	80084d6 <__ieee754_powf+0xb6>
 8008512:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8008516:	e798      	b.n	800844a <__ieee754_powf+0x2a>
 8008518:	0ff3      	lsrs	r3, r6, #31
 800851a:	3b01      	subs	r3, #1
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	432b      	orrs	r3, r5
 8008520:	d101      	bne.n	8008526 <__ieee754_powf+0x106>
 8008522:	4649      	mov	r1, r9
 8008524:	e2c5      	b.n	8008ab2 <__ieee754_powf+0x692>
 8008526:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800852a:	f240 809b 	bls.w	8008664 <__ieee754_powf+0x244>
 800852e:	4b46      	ldr	r3, [pc, #280]	@ (8008648 <__ieee754_powf+0x228>)
 8008530:	4598      	cmp	r8, r3
 8008532:	d807      	bhi.n	8008544 <__ieee754_powf+0x124>
 8008534:	2c00      	cmp	r4, #0
 8008536:	da0a      	bge.n	800854e <__ieee754_powf+0x12e>
 8008538:	2000      	movs	r0, #0
 800853a:	b007      	add	sp, #28
 800853c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	f000 bae7 	b.w	8008b12 <__math_oflowf>
 8008544:	4b41      	ldr	r3, [pc, #260]	@ (800864c <__ieee754_powf+0x22c>)
 8008546:	4598      	cmp	r8, r3
 8008548:	d907      	bls.n	800855a <__ieee754_powf+0x13a>
 800854a:	2c00      	cmp	r4, #0
 800854c:	dcf4      	bgt.n	8008538 <__ieee754_powf+0x118>
 800854e:	2000      	movs	r0, #0
 8008550:	b007      	add	sp, #28
 8008552:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008556:	f000 bad8 	b.w	8008b0a <__math_uflowf>
 800855a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800855e:	f7f8 faaf 	bl	8000ac0 <__aeabi_fsub>
 8008562:	493b      	ldr	r1, [pc, #236]	@ (8008650 <__ieee754_powf+0x230>)
 8008564:	4606      	mov	r6, r0
 8008566:	f7f8 fbb5 	bl	8000cd4 <__aeabi_fmul>
 800856a:	493a      	ldr	r1, [pc, #232]	@ (8008654 <__ieee754_powf+0x234>)
 800856c:	4680      	mov	r8, r0
 800856e:	4630      	mov	r0, r6
 8008570:	f7f8 fbb0 	bl	8000cd4 <__aeabi_fmul>
 8008574:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8008578:	4681      	mov	r9, r0
 800857a:	4630      	mov	r0, r6
 800857c:	f7f8 fbaa 	bl	8000cd4 <__aeabi_fmul>
 8008580:	4601      	mov	r1, r0
 8008582:	4835      	ldr	r0, [pc, #212]	@ (8008658 <__ieee754_powf+0x238>)
 8008584:	f7f8 fa9c 	bl	8000ac0 <__aeabi_fsub>
 8008588:	4631      	mov	r1, r6
 800858a:	f7f8 fba3 	bl	8000cd4 <__aeabi_fmul>
 800858e:	4601      	mov	r1, r0
 8008590:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8008594:	f7f8 fa94 	bl	8000ac0 <__aeabi_fsub>
 8008598:	4631      	mov	r1, r6
 800859a:	4682      	mov	sl, r0
 800859c:	4630      	mov	r0, r6
 800859e:	f7f8 fb99 	bl	8000cd4 <__aeabi_fmul>
 80085a2:	4601      	mov	r1, r0
 80085a4:	4650      	mov	r0, sl
 80085a6:	f7f8 fb95 	bl	8000cd4 <__aeabi_fmul>
 80085aa:	492c      	ldr	r1, [pc, #176]	@ (800865c <__ieee754_powf+0x23c>)
 80085ac:	f7f8 fb92 	bl	8000cd4 <__aeabi_fmul>
 80085b0:	4601      	mov	r1, r0
 80085b2:	4648      	mov	r0, r9
 80085b4:	f7f8 fa84 	bl	8000ac0 <__aeabi_fsub>
 80085b8:	4601      	mov	r1, r0
 80085ba:	4606      	mov	r6, r0
 80085bc:	4640      	mov	r0, r8
 80085be:	f7f8 fa81 	bl	8000ac4 <__addsf3>
 80085c2:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80085c6:	f02b 0b0f 	bic.w	fp, fp, #15
 80085ca:	4641      	mov	r1, r8
 80085cc:	4658      	mov	r0, fp
 80085ce:	f7f8 fa77 	bl	8000ac0 <__aeabi_fsub>
 80085d2:	4601      	mov	r1, r0
 80085d4:	4630      	mov	r0, r6
 80085d6:	f7f8 fa73 	bl	8000ac0 <__aeabi_fsub>
 80085da:	9b03      	ldr	r3, [sp, #12]
 80085dc:	3d01      	subs	r5, #1
 80085de:	f36f 040b 	bfc	r4, #0, #12
 80085e2:	431d      	orrs	r5, r3
 80085e4:	4606      	mov	r6, r0
 80085e6:	4621      	mov	r1, r4
 80085e8:	4638      	mov	r0, r7
 80085ea:	bf14      	ite	ne
 80085ec:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80085f0:	4d1b      	ldreq	r5, [pc, #108]	@ (8008660 <__ieee754_powf+0x240>)
 80085f2:	f7f8 fa65 	bl	8000ac0 <__aeabi_fsub>
 80085f6:	4659      	mov	r1, fp
 80085f8:	f7f8 fb6c 	bl	8000cd4 <__aeabi_fmul>
 80085fc:	4639      	mov	r1, r7
 80085fe:	4680      	mov	r8, r0
 8008600:	4630      	mov	r0, r6
 8008602:	f7f8 fb67 	bl	8000cd4 <__aeabi_fmul>
 8008606:	4601      	mov	r1, r0
 8008608:	4640      	mov	r0, r8
 800860a:	f7f8 fa5b 	bl	8000ac4 <__addsf3>
 800860e:	4621      	mov	r1, r4
 8008610:	4606      	mov	r6, r0
 8008612:	4658      	mov	r0, fp
 8008614:	f7f8 fb5e 	bl	8000cd4 <__aeabi_fmul>
 8008618:	4601      	mov	r1, r0
 800861a:	4607      	mov	r7, r0
 800861c:	4630      	mov	r0, r6
 800861e:	f7f8 fa51 	bl	8000ac4 <__addsf3>
 8008622:	2800      	cmp	r0, #0
 8008624:	4604      	mov	r4, r0
 8008626:	4680      	mov	r8, r0
 8008628:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800862c:	f340 813f 	ble.w	80088ae <__ieee754_powf+0x48e>
 8008630:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8008634:	f240 8128 	bls.w	8008888 <__ieee754_powf+0x468>
 8008638:	2100      	movs	r1, #0
 800863a:	4628      	mov	r0, r5
 800863c:	f7f8 fce8 	bl	8001010 <__aeabi_fcmplt>
 8008640:	3800      	subs	r0, #0
 8008642:	bf18      	it	ne
 8008644:	2001      	movne	r0, #1
 8008646:	e778      	b.n	800853a <__ieee754_powf+0x11a>
 8008648:	3f7ffff3 	.word	0x3f7ffff3
 800864c:	3f800007 	.word	0x3f800007
 8008650:	3fb8aa00 	.word	0x3fb8aa00
 8008654:	36eca570 	.word	0x36eca570
 8008658:	3eaaaaab 	.word	0x3eaaaaab
 800865c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008660:	bf800000 	.word	0xbf800000
 8008664:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8008668:	f040 810a 	bne.w	8008880 <__ieee754_powf+0x460>
 800866c:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8008670:	f7f8 fb30 	bl	8000cd4 <__aeabi_fmul>
 8008674:	f06f 0217 	mvn.w	r2, #23
 8008678:	4682      	mov	sl, r0
 800867a:	ea4f 53ea 	mov.w	r3, sl, asr #23
 800867e:	3b7f      	subs	r3, #127	@ 0x7f
 8008680:	441a      	add	r2, r3
 8008682:	4b95      	ldr	r3, [pc, #596]	@ (80088d8 <__ieee754_powf+0x4b8>)
 8008684:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8008688:	459a      	cmp	sl, r3
 800868a:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 800868e:	dd06      	ble.n	800869e <__ieee754_powf+0x27e>
 8008690:	4b92      	ldr	r3, [pc, #584]	@ (80088dc <__ieee754_powf+0x4bc>)
 8008692:	459a      	cmp	sl, r3
 8008694:	f340 80f6 	ble.w	8008884 <__ieee754_powf+0x464>
 8008698:	3201      	adds	r2, #1
 800869a:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 800869e:	2300      	movs	r3, #0
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	9205      	str	r2, [sp, #20]
 80086a4:	4b8e      	ldr	r3, [pc, #568]	@ (80088e0 <__ieee754_powf+0x4c0>)
 80086a6:	9a01      	ldr	r2, [sp, #4]
 80086a8:	4630      	mov	r0, r6
 80086aa:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80086ae:	46b2      	mov	sl, r6
 80086b0:	4659      	mov	r1, fp
 80086b2:	f7f8 fa05 	bl	8000ac0 <__aeabi_fsub>
 80086b6:	4631      	mov	r1, r6
 80086b8:	4681      	mov	r9, r0
 80086ba:	4658      	mov	r0, fp
 80086bc:	f7f8 fa02 	bl	8000ac4 <__addsf3>
 80086c0:	4601      	mov	r1, r0
 80086c2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80086c6:	f7f8 fbb9 	bl	8000e3c <__aeabi_fdiv>
 80086ca:	4601      	mov	r1, r0
 80086cc:	9004      	str	r0, [sp, #16]
 80086ce:	4648      	mov	r0, r9
 80086d0:	f7f8 fb00 	bl	8000cd4 <__aeabi_fmul>
 80086d4:	9002      	str	r0, [sp, #8]
 80086d6:	9b02      	ldr	r3, [sp, #8]
 80086d8:	1076      	asrs	r6, r6, #1
 80086da:	f36f 030b 	bfc	r3, #0, #12
 80086de:	4698      	mov	r8, r3
 80086e0:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80086ea:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80086ee:	4631      	mov	r1, r6
 80086f0:	4640      	mov	r0, r8
 80086f2:	f7f8 faef 	bl	8000cd4 <__aeabi_fmul>
 80086f6:	4601      	mov	r1, r0
 80086f8:	4648      	mov	r0, r9
 80086fa:	f7f8 f9e1 	bl	8000ac0 <__aeabi_fsub>
 80086fe:	4659      	mov	r1, fp
 8008700:	4681      	mov	r9, r0
 8008702:	4630      	mov	r0, r6
 8008704:	f7f8 f9dc 	bl	8000ac0 <__aeabi_fsub>
 8008708:	4601      	mov	r1, r0
 800870a:	4650      	mov	r0, sl
 800870c:	f7f8 f9d8 	bl	8000ac0 <__aeabi_fsub>
 8008710:	4641      	mov	r1, r8
 8008712:	f7f8 fadf 	bl	8000cd4 <__aeabi_fmul>
 8008716:	4601      	mov	r1, r0
 8008718:	4648      	mov	r0, r9
 800871a:	f7f8 f9d1 	bl	8000ac0 <__aeabi_fsub>
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	4619      	mov	r1, r3
 8008722:	f7f8 fad7 	bl	8000cd4 <__aeabi_fmul>
 8008726:	9902      	ldr	r1, [sp, #8]
 8008728:	4683      	mov	fp, r0
 800872a:	4608      	mov	r0, r1
 800872c:	f7f8 fad2 	bl	8000cd4 <__aeabi_fmul>
 8008730:	4606      	mov	r6, r0
 8008732:	496c      	ldr	r1, [pc, #432]	@ (80088e4 <__ieee754_powf+0x4c4>)
 8008734:	f7f8 face 	bl	8000cd4 <__aeabi_fmul>
 8008738:	496b      	ldr	r1, [pc, #428]	@ (80088e8 <__ieee754_powf+0x4c8>)
 800873a:	f7f8 f9c3 	bl	8000ac4 <__addsf3>
 800873e:	4631      	mov	r1, r6
 8008740:	f7f8 fac8 	bl	8000cd4 <__aeabi_fmul>
 8008744:	4969      	ldr	r1, [pc, #420]	@ (80088ec <__ieee754_powf+0x4cc>)
 8008746:	f7f8 f9bd 	bl	8000ac4 <__addsf3>
 800874a:	4631      	mov	r1, r6
 800874c:	f7f8 fac2 	bl	8000cd4 <__aeabi_fmul>
 8008750:	4967      	ldr	r1, [pc, #412]	@ (80088f0 <__ieee754_powf+0x4d0>)
 8008752:	f7f8 f9b7 	bl	8000ac4 <__addsf3>
 8008756:	4631      	mov	r1, r6
 8008758:	f7f8 fabc 	bl	8000cd4 <__aeabi_fmul>
 800875c:	4965      	ldr	r1, [pc, #404]	@ (80088f4 <__ieee754_powf+0x4d4>)
 800875e:	f7f8 f9b1 	bl	8000ac4 <__addsf3>
 8008762:	4631      	mov	r1, r6
 8008764:	f7f8 fab6 	bl	8000cd4 <__aeabi_fmul>
 8008768:	4963      	ldr	r1, [pc, #396]	@ (80088f8 <__ieee754_powf+0x4d8>)
 800876a:	f7f8 f9ab 	bl	8000ac4 <__addsf3>
 800876e:	4631      	mov	r1, r6
 8008770:	4681      	mov	r9, r0
 8008772:	4630      	mov	r0, r6
 8008774:	f7f8 faae 	bl	8000cd4 <__aeabi_fmul>
 8008778:	4601      	mov	r1, r0
 800877a:	4648      	mov	r0, r9
 800877c:	f7f8 faaa 	bl	8000cd4 <__aeabi_fmul>
 8008780:	4606      	mov	r6, r0
 8008782:	4641      	mov	r1, r8
 8008784:	9802      	ldr	r0, [sp, #8]
 8008786:	f7f8 f99d 	bl	8000ac4 <__addsf3>
 800878a:	4659      	mov	r1, fp
 800878c:	f7f8 faa2 	bl	8000cd4 <__aeabi_fmul>
 8008790:	4631      	mov	r1, r6
 8008792:	f7f8 f997 	bl	8000ac4 <__addsf3>
 8008796:	4641      	mov	r1, r8
 8008798:	4681      	mov	r9, r0
 800879a:	4640      	mov	r0, r8
 800879c:	f7f8 fa9a 	bl	8000cd4 <__aeabi_fmul>
 80087a0:	4956      	ldr	r1, [pc, #344]	@ (80088fc <__ieee754_powf+0x4dc>)
 80087a2:	4682      	mov	sl, r0
 80087a4:	f7f8 f98e 	bl	8000ac4 <__addsf3>
 80087a8:	4649      	mov	r1, r9
 80087aa:	f7f8 f98b 	bl	8000ac4 <__addsf3>
 80087ae:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80087b2:	f026 060f 	bic.w	r6, r6, #15
 80087b6:	4631      	mov	r1, r6
 80087b8:	4640      	mov	r0, r8
 80087ba:	f7f8 fa8b 	bl	8000cd4 <__aeabi_fmul>
 80087be:	494f      	ldr	r1, [pc, #316]	@ (80088fc <__ieee754_powf+0x4dc>)
 80087c0:	4680      	mov	r8, r0
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7f8 f97c 	bl	8000ac0 <__aeabi_fsub>
 80087c8:	4651      	mov	r1, sl
 80087ca:	f7f8 f979 	bl	8000ac0 <__aeabi_fsub>
 80087ce:	4601      	mov	r1, r0
 80087d0:	4648      	mov	r0, r9
 80087d2:	f7f8 f975 	bl	8000ac0 <__aeabi_fsub>
 80087d6:	9902      	ldr	r1, [sp, #8]
 80087d8:	f7f8 fa7c 	bl	8000cd4 <__aeabi_fmul>
 80087dc:	4631      	mov	r1, r6
 80087de:	4681      	mov	r9, r0
 80087e0:	4658      	mov	r0, fp
 80087e2:	f7f8 fa77 	bl	8000cd4 <__aeabi_fmul>
 80087e6:	4601      	mov	r1, r0
 80087e8:	4648      	mov	r0, r9
 80087ea:	f7f8 f96b 	bl	8000ac4 <__addsf3>
 80087ee:	4682      	mov	sl, r0
 80087f0:	4601      	mov	r1, r0
 80087f2:	4640      	mov	r0, r8
 80087f4:	f7f8 f966 	bl	8000ac4 <__addsf3>
 80087f8:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80087fc:	f026 060f 	bic.w	r6, r6, #15
 8008800:	4630      	mov	r0, r6
 8008802:	493f      	ldr	r1, [pc, #252]	@ (8008900 <__ieee754_powf+0x4e0>)
 8008804:	f7f8 fa66 	bl	8000cd4 <__aeabi_fmul>
 8008808:	4641      	mov	r1, r8
 800880a:	4681      	mov	r9, r0
 800880c:	4630      	mov	r0, r6
 800880e:	f7f8 f957 	bl	8000ac0 <__aeabi_fsub>
 8008812:	4601      	mov	r1, r0
 8008814:	4650      	mov	r0, sl
 8008816:	f7f8 f953 	bl	8000ac0 <__aeabi_fsub>
 800881a:	493a      	ldr	r1, [pc, #232]	@ (8008904 <__ieee754_powf+0x4e4>)
 800881c:	f7f8 fa5a 	bl	8000cd4 <__aeabi_fmul>
 8008820:	4939      	ldr	r1, [pc, #228]	@ (8008908 <__ieee754_powf+0x4e8>)
 8008822:	4680      	mov	r8, r0
 8008824:	4630      	mov	r0, r6
 8008826:	f7f8 fa55 	bl	8000cd4 <__aeabi_fmul>
 800882a:	4601      	mov	r1, r0
 800882c:	4640      	mov	r0, r8
 800882e:	f7f8 f949 	bl	8000ac4 <__addsf3>
 8008832:	4b36      	ldr	r3, [pc, #216]	@ (800890c <__ieee754_powf+0x4ec>)
 8008834:	9a01      	ldr	r2, [sp, #4]
 8008836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800883a:	f7f8 f943 	bl	8000ac4 <__addsf3>
 800883e:	9a05      	ldr	r2, [sp, #20]
 8008840:	4606      	mov	r6, r0
 8008842:	4610      	mov	r0, r2
 8008844:	f7f8 f9f2 	bl	8000c2c <__aeabi_i2f>
 8008848:	4680      	mov	r8, r0
 800884a:	4b31      	ldr	r3, [pc, #196]	@ (8008910 <__ieee754_powf+0x4f0>)
 800884c:	9a01      	ldr	r2, [sp, #4]
 800884e:	4631      	mov	r1, r6
 8008850:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8008854:	4648      	mov	r0, r9
 8008856:	f7f8 f935 	bl	8000ac4 <__addsf3>
 800885a:	4651      	mov	r1, sl
 800885c:	f7f8 f932 	bl	8000ac4 <__addsf3>
 8008860:	4641      	mov	r1, r8
 8008862:	f7f8 f92f 	bl	8000ac4 <__addsf3>
 8008866:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800886a:	f02b 0b0f 	bic.w	fp, fp, #15
 800886e:	4641      	mov	r1, r8
 8008870:	4658      	mov	r0, fp
 8008872:	f7f8 f925 	bl	8000ac0 <__aeabi_fsub>
 8008876:	4651      	mov	r1, sl
 8008878:	f7f8 f922 	bl	8000ac0 <__aeabi_fsub>
 800887c:	4649      	mov	r1, r9
 800887e:	e6a6      	b.n	80085ce <__ieee754_powf+0x1ae>
 8008880:	2200      	movs	r2, #0
 8008882:	e6fa      	b.n	800867a <__ieee754_powf+0x25a>
 8008884:	2301      	movs	r3, #1
 8008886:	e70b      	b.n	80086a0 <__ieee754_powf+0x280>
 8008888:	d148      	bne.n	800891c <__ieee754_powf+0x4fc>
 800888a:	4922      	ldr	r1, [pc, #136]	@ (8008914 <__ieee754_powf+0x4f4>)
 800888c:	4630      	mov	r0, r6
 800888e:	f7f8 f919 	bl	8000ac4 <__addsf3>
 8008892:	4639      	mov	r1, r7
 8008894:	4681      	mov	r9, r0
 8008896:	4620      	mov	r0, r4
 8008898:	f7f8 f912 	bl	8000ac0 <__aeabi_fsub>
 800889c:	4601      	mov	r1, r0
 800889e:	4648      	mov	r0, r9
 80088a0:	f7f8 fbd4 	bl	800104c <__aeabi_fcmpgt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f47f aec7 	bne.w	8008638 <__ieee754_powf+0x218>
 80088aa:	2386      	movs	r3, #134	@ 0x86
 80088ac:	e03b      	b.n	8008926 <__ieee754_powf+0x506>
 80088ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008918 <__ieee754_powf+0x4f8>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d907      	bls.n	80088c4 <__ieee754_powf+0x4a4>
 80088b4:	2100      	movs	r1, #0
 80088b6:	4628      	mov	r0, r5
 80088b8:	f7f8 fbaa 	bl	8001010 <__aeabi_fcmplt>
 80088bc:	3800      	subs	r0, #0
 80088be:	bf18      	it	ne
 80088c0:	2001      	movne	r0, #1
 80088c2:	e645      	b.n	8008550 <__ieee754_powf+0x130>
 80088c4:	d12a      	bne.n	800891c <__ieee754_powf+0x4fc>
 80088c6:	4639      	mov	r1, r7
 80088c8:	f7f8 f8fa 	bl	8000ac0 <__aeabi_fsub>
 80088cc:	4631      	mov	r1, r6
 80088ce:	f7f8 fbb3 	bl	8001038 <__aeabi_fcmpge>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d0e9      	beq.n	80088aa <__ieee754_powf+0x48a>
 80088d6:	e7ed      	b.n	80088b4 <__ieee754_powf+0x494>
 80088d8:	001cc471 	.word	0x001cc471
 80088dc:	005db3d6 	.word	0x005db3d6
 80088e0:	08009154 	.word	0x08009154
 80088e4:	3e53f142 	.word	0x3e53f142
 80088e8:	3e6c3255 	.word	0x3e6c3255
 80088ec:	3e8ba305 	.word	0x3e8ba305
 80088f0:	3eaaaaab 	.word	0x3eaaaaab
 80088f4:	3edb6db7 	.word	0x3edb6db7
 80088f8:	3f19999a 	.word	0x3f19999a
 80088fc:	40400000 	.word	0x40400000
 8008900:	3f763800 	.word	0x3f763800
 8008904:	3f76384f 	.word	0x3f76384f
 8008908:	369dc3a0 	.word	0x369dc3a0
 800890c:	08009144 	.word	0x08009144
 8008910:	0800914c 	.word	0x0800914c
 8008914:	3338aa3c 	.word	0x3338aa3c
 8008918:	43160000 	.word	0x43160000
 800891c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8008920:	f240 809b 	bls.w	8008a5a <__ieee754_powf+0x63a>
 8008924:	15db      	asrs	r3, r3, #23
 8008926:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 800892a:	3b7e      	subs	r3, #126	@ 0x7e
 800892c:	411c      	asrs	r4, r3
 800892e:	4444      	add	r4, r8
 8008930:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8008934:	4961      	ldr	r1, [pc, #388]	@ (8008abc <__ieee754_powf+0x69c>)
 8008936:	3b7f      	subs	r3, #127	@ 0x7f
 8008938:	4119      	asrs	r1, r3
 800893a:	4021      	ands	r1, r4
 800893c:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008940:	f1c3 0317 	rsb	r3, r3, #23
 8008944:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8008948:	4638      	mov	r0, r7
 800894a:	411c      	asrs	r4, r3
 800894c:	f1b8 0f00 	cmp.w	r8, #0
 8008950:	bfb8      	it	lt
 8008952:	4264      	neglt	r4, r4
 8008954:	f7f8 f8b4 	bl	8000ac0 <__aeabi_fsub>
 8008958:	4607      	mov	r7, r0
 800895a:	4631      	mov	r1, r6
 800895c:	4638      	mov	r0, r7
 800895e:	f7f8 f8b1 	bl	8000ac4 <__addsf3>
 8008962:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8008966:	f028 080f 	bic.w	r8, r8, #15
 800896a:	4640      	mov	r0, r8
 800896c:	4954      	ldr	r1, [pc, #336]	@ (8008ac0 <__ieee754_powf+0x6a0>)
 800896e:	f7f8 f9b1 	bl	8000cd4 <__aeabi_fmul>
 8008972:	4639      	mov	r1, r7
 8008974:	4681      	mov	r9, r0
 8008976:	4640      	mov	r0, r8
 8008978:	f7f8 f8a2 	bl	8000ac0 <__aeabi_fsub>
 800897c:	4601      	mov	r1, r0
 800897e:	4630      	mov	r0, r6
 8008980:	f7f8 f89e 	bl	8000ac0 <__aeabi_fsub>
 8008984:	494f      	ldr	r1, [pc, #316]	@ (8008ac4 <__ieee754_powf+0x6a4>)
 8008986:	f7f8 f9a5 	bl	8000cd4 <__aeabi_fmul>
 800898a:	494f      	ldr	r1, [pc, #316]	@ (8008ac8 <__ieee754_powf+0x6a8>)
 800898c:	4606      	mov	r6, r0
 800898e:	4640      	mov	r0, r8
 8008990:	f7f8 f9a0 	bl	8000cd4 <__aeabi_fmul>
 8008994:	4601      	mov	r1, r0
 8008996:	4630      	mov	r0, r6
 8008998:	f7f8 f894 	bl	8000ac4 <__addsf3>
 800899c:	4607      	mov	r7, r0
 800899e:	4601      	mov	r1, r0
 80089a0:	4648      	mov	r0, r9
 80089a2:	f7f8 f88f 	bl	8000ac4 <__addsf3>
 80089a6:	4649      	mov	r1, r9
 80089a8:	4606      	mov	r6, r0
 80089aa:	f7f8 f889 	bl	8000ac0 <__aeabi_fsub>
 80089ae:	4601      	mov	r1, r0
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7f8 f885 	bl	8000ac0 <__aeabi_fsub>
 80089b6:	4631      	mov	r1, r6
 80089b8:	4680      	mov	r8, r0
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7f8 f98a 	bl	8000cd4 <__aeabi_fmul>
 80089c0:	4607      	mov	r7, r0
 80089c2:	4942      	ldr	r1, [pc, #264]	@ (8008acc <__ieee754_powf+0x6ac>)
 80089c4:	f7f8 f986 	bl	8000cd4 <__aeabi_fmul>
 80089c8:	4941      	ldr	r1, [pc, #260]	@ (8008ad0 <__ieee754_powf+0x6b0>)
 80089ca:	f7f8 f879 	bl	8000ac0 <__aeabi_fsub>
 80089ce:	4639      	mov	r1, r7
 80089d0:	f7f8 f980 	bl	8000cd4 <__aeabi_fmul>
 80089d4:	493f      	ldr	r1, [pc, #252]	@ (8008ad4 <__ieee754_powf+0x6b4>)
 80089d6:	f7f8 f875 	bl	8000ac4 <__addsf3>
 80089da:	4639      	mov	r1, r7
 80089dc:	f7f8 f97a 	bl	8000cd4 <__aeabi_fmul>
 80089e0:	493d      	ldr	r1, [pc, #244]	@ (8008ad8 <__ieee754_powf+0x6b8>)
 80089e2:	f7f8 f86d 	bl	8000ac0 <__aeabi_fsub>
 80089e6:	4639      	mov	r1, r7
 80089e8:	f7f8 f974 	bl	8000cd4 <__aeabi_fmul>
 80089ec:	493b      	ldr	r1, [pc, #236]	@ (8008adc <__ieee754_powf+0x6bc>)
 80089ee:	f7f8 f869 	bl	8000ac4 <__addsf3>
 80089f2:	4639      	mov	r1, r7
 80089f4:	f7f8 f96e 	bl	8000cd4 <__aeabi_fmul>
 80089f8:	4601      	mov	r1, r0
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7f8 f860 	bl	8000ac0 <__aeabi_fsub>
 8008a00:	4607      	mov	r7, r0
 8008a02:	4601      	mov	r1, r0
 8008a04:	4630      	mov	r0, r6
 8008a06:	f7f8 f965 	bl	8000cd4 <__aeabi_fmul>
 8008a0a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008a0e:	4681      	mov	r9, r0
 8008a10:	4638      	mov	r0, r7
 8008a12:	f7f8 f855 	bl	8000ac0 <__aeabi_fsub>
 8008a16:	4601      	mov	r1, r0
 8008a18:	4648      	mov	r0, r9
 8008a1a:	f7f8 fa0f 	bl	8000e3c <__aeabi_fdiv>
 8008a1e:	4641      	mov	r1, r8
 8008a20:	4607      	mov	r7, r0
 8008a22:	4630      	mov	r0, r6
 8008a24:	f7f8 f956 	bl	8000cd4 <__aeabi_fmul>
 8008a28:	4641      	mov	r1, r8
 8008a2a:	f7f8 f84b 	bl	8000ac4 <__addsf3>
 8008a2e:	4601      	mov	r1, r0
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7f8 f845 	bl	8000ac0 <__aeabi_fsub>
 8008a36:	4631      	mov	r1, r6
 8008a38:	f7f8 f842 	bl	8000ac0 <__aeabi_fsub>
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008a42:	f7f8 f83d 	bl	8000ac0 <__aeabi_fsub>
 8008a46:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008a4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a4e:	da06      	bge.n	8008a5e <__ieee754_powf+0x63e>
 8008a50:	4621      	mov	r1, r4
 8008a52:	f000 f863 	bl	8008b1c <scalbnf>
 8008a56:	4629      	mov	r1, r5
 8008a58:	e549      	b.n	80084ee <__ieee754_powf+0xce>
 8008a5a:	2400      	movs	r4, #0
 8008a5c:	e77d      	b.n	800895a <__ieee754_powf+0x53a>
 8008a5e:	4618      	mov	r0, r3
 8008a60:	e7f9      	b.n	8008a56 <__ieee754_powf+0x636>
 8008a62:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008a66:	e536      	b.n	80084d6 <__ieee754_powf+0xb6>
 8008a68:	4639      	mov	r1, r7
 8008a6a:	e534      	b.n	80084d6 <__ieee754_powf+0xb6>
 8008a6c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8008a70:	f43f ad23 	beq.w	80084ba <__ieee754_powf+0x9a>
 8008a74:	2502      	movs	r5, #2
 8008a76:	4648      	mov	r0, r9
 8008a78:	f000 f89c 	bl	8008bb4 <fabsf>
 8008a7c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008a80:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008a84:	46c2      	mov	sl, r8
 8008a86:	4601      	mov	r1, r0
 8008a88:	d003      	beq.n	8008a92 <__ieee754_powf+0x672>
 8008a8a:	f1b8 0f00 	cmp.w	r8, #0
 8008a8e:	f47f ad43 	bne.w	8008518 <__ieee754_powf+0xf8>
 8008a92:	2c00      	cmp	r4, #0
 8008a94:	da04      	bge.n	8008aa0 <__ieee754_powf+0x680>
 8008a96:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008a9a:	f7f8 f9cf 	bl	8000e3c <__aeabi_fdiv>
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	2e00      	cmp	r6, #0
 8008aa2:	f6bf ad18 	bge.w	80084d6 <__ieee754_powf+0xb6>
 8008aa6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8008aaa:	ea58 0805 	orrs.w	r8, r8, r5
 8008aae:	f47f ad2e 	bne.w	800850e <__ieee754_powf+0xee>
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	f7f8 f804 	bl	8000ac0 <__aeabi_fsub>
 8008ab8:	4601      	mov	r1, r0
 8008aba:	e4f8      	b.n	80084ae <__ieee754_powf+0x8e>
 8008abc:	ff800000 	.word	0xff800000
 8008ac0:	3f317200 	.word	0x3f317200
 8008ac4:	3f317218 	.word	0x3f317218
 8008ac8:	35bfbe8c 	.word	0x35bfbe8c
 8008acc:	3331bb4c 	.word	0x3331bb4c
 8008ad0:	35ddea0e 	.word	0x35ddea0e
 8008ad4:	388ab355 	.word	0x388ab355
 8008ad8:	3b360b61 	.word	0x3b360b61
 8008adc:	3e2aaaab 	.word	0x3e2aaaab

08008ae0 <with_errnof>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	460d      	mov	r5, r1
 8008ae6:	f7fd fcd9 	bl	800649c <__errno>
 8008aea:	6005      	str	r5, [r0, #0]
 8008aec:	4620      	mov	r0, r4
 8008aee:	bd38      	pop	{r3, r4, r5, pc}

08008af0 <xflowf>:
 8008af0:	b508      	push	{r3, lr}
 8008af2:	b140      	cbz	r0, 8008b06 <xflowf+0x16>
 8008af4:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8008af8:	f7f8 f8ec 	bl	8000cd4 <__aeabi_fmul>
 8008afc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b00:	2122      	movs	r1, #34	@ 0x22
 8008b02:	f7ff bfed 	b.w	8008ae0 <with_errnof>
 8008b06:	4608      	mov	r0, r1
 8008b08:	e7f6      	b.n	8008af8 <xflowf+0x8>

08008b0a <__math_uflowf>:
 8008b0a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8008b0e:	f7ff bfef 	b.w	8008af0 <xflowf>

08008b12 <__math_oflowf>:
 8008b12:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8008b16:	f7ff bfeb 	b.w	8008af0 <xflowf>
	...

08008b1c <scalbnf>:
 8008b1c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8008b20:	b538      	push	{r3, r4, r5, lr}
 8008b22:	4603      	mov	r3, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	4604      	mov	r4, r0
 8008b28:	d02e      	beq.n	8008b88 <scalbnf+0x6c>
 8008b2a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008b2e:	d304      	bcc.n	8008b3a <scalbnf+0x1e>
 8008b30:	4601      	mov	r1, r0
 8008b32:	f7f7 ffc7 	bl	8000ac4 <__addsf3>
 8008b36:	4603      	mov	r3, r0
 8008b38:	e026      	b.n	8008b88 <scalbnf+0x6c>
 8008b3a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8008b3e:	d118      	bne.n	8008b72 <scalbnf+0x56>
 8008b40:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8008b44:	f7f8 f8c6 	bl	8000cd4 <__aeabi_fmul>
 8008b48:	4a17      	ldr	r2, [pc, #92]	@ (8008ba8 <scalbnf+0x8c>)
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	4295      	cmp	r5, r2
 8008b4e:	db0c      	blt.n	8008b6a <scalbnf+0x4e>
 8008b50:	4604      	mov	r4, r0
 8008b52:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008b56:	3a19      	subs	r2, #25
 8008b58:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008b5c:	428d      	cmp	r5, r1
 8008b5e:	dd0a      	ble.n	8008b76 <scalbnf+0x5a>
 8008b60:	4912      	ldr	r1, [pc, #72]	@ (8008bac <scalbnf+0x90>)
 8008b62:	4618      	mov	r0, r3
 8008b64:	f361 001e 	bfi	r0, r1, #0, #31
 8008b68:	e000      	b.n	8008b6c <scalbnf+0x50>
 8008b6a:	4911      	ldr	r1, [pc, #68]	@ (8008bb0 <scalbnf+0x94>)
 8008b6c:	f7f8 f8b2 	bl	8000cd4 <__aeabi_fmul>
 8008b70:	e7e1      	b.n	8008b36 <scalbnf+0x1a>
 8008b72:	0dd2      	lsrs	r2, r2, #23
 8008b74:	e7f0      	b.n	8008b58 <scalbnf+0x3c>
 8008b76:	1951      	adds	r1, r2, r5
 8008b78:	29fe      	cmp	r1, #254	@ 0xfe
 8008b7a:	dcf1      	bgt.n	8008b60 <scalbnf+0x44>
 8008b7c:	2900      	cmp	r1, #0
 8008b7e:	dd05      	ble.n	8008b8c <scalbnf+0x70>
 8008b80:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008b84:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8008b88:	4618      	mov	r0, r3
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	f111 0f16 	cmn.w	r1, #22
 8008b90:	da01      	bge.n	8008b96 <scalbnf+0x7a>
 8008b92:	4907      	ldr	r1, [pc, #28]	@ (8008bb0 <scalbnf+0x94>)
 8008b94:	e7e5      	b.n	8008b62 <scalbnf+0x46>
 8008b96:	f101 0019 	add.w	r0, r1, #25
 8008b9a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008b9e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8008ba2:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8008ba6:	e7e1      	b.n	8008b6c <scalbnf+0x50>
 8008ba8:	ffff3cb0 	.word	0xffff3cb0
 8008bac:	7149f2ca 	.word	0x7149f2ca
 8008bb0:	0da24260 	.word	0x0da24260

08008bb4 <fabsf>:
 8008bb4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008bb8:	4770      	bx	lr
	...

08008bbc <__ieee754_sqrtf>:
 8008bbc:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008bc0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc8:	4603      	mov	r3, r0
 8008bca:	4604      	mov	r4, r0
 8008bcc:	d30a      	bcc.n	8008be4 <__ieee754_sqrtf+0x28>
 8008bce:	4601      	mov	r1, r0
 8008bd0:	f7f8 f880 	bl	8000cd4 <__aeabi_fmul>
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f7f7 ff74 	bl	8000ac4 <__addsf3>
 8008bdc:	4604      	mov	r4, r0
 8008bde:	4620      	mov	r0, r4
 8008be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	d0fa      	beq.n	8008bde <__ieee754_sqrtf+0x22>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	da06      	bge.n	8008bfa <__ieee754_sqrtf+0x3e>
 8008bec:	4601      	mov	r1, r0
 8008bee:	f7f7 ff67 	bl	8000ac0 <__aeabi_fsub>
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	f7f8 f922 	bl	8000e3c <__aeabi_fdiv>
 8008bf8:	e7f0      	b.n	8008bdc <__ieee754_sqrtf+0x20>
 8008bfa:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8008bfe:	d03c      	beq.n	8008c7a <__ieee754_sqrtf+0xbe>
 8008c00:	15c2      	asrs	r2, r0, #23
 8008c02:	2400      	movs	r4, #0
 8008c04:	2019      	movs	r0, #25
 8008c06:	4626      	mov	r6, r4
 8008c08:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8008c0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008c10:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8008c14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008c18:	07d2      	lsls	r2, r2, #31
 8008c1a:	bf58      	it	pl
 8008c1c:	005b      	lslpl	r3, r3, #1
 8008c1e:	106d      	asrs	r5, r5, #1
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	1872      	adds	r2, r6, r1
 8008c24:	429a      	cmp	r2, r3
 8008c26:	bfcf      	iteee	gt
 8008c28:	461a      	movgt	r2, r3
 8008c2a:	1856      	addle	r6, r2, r1
 8008c2c:	1864      	addle	r4, r4, r1
 8008c2e:	1a9a      	suble	r2, r3, r2
 8008c30:	3801      	subs	r0, #1
 8008c32:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008c36:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008c3a:	d1f2      	bne.n	8008c22 <__ieee754_sqrtf+0x66>
 8008c3c:	b1ba      	cbz	r2, 8008c6e <__ieee754_sqrtf+0xb2>
 8008c3e:	4e15      	ldr	r6, [pc, #84]	@ (8008c94 <__ieee754_sqrtf+0xd8>)
 8008c40:	4f15      	ldr	r7, [pc, #84]	@ (8008c98 <__ieee754_sqrtf+0xdc>)
 8008c42:	6830      	ldr	r0, [r6, #0]
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	f7f7 ff3b 	bl	8000ac0 <__aeabi_fsub>
 8008c4a:	f8d6 8000 	ldr.w	r8, [r6]
 8008c4e:	4601      	mov	r1, r0
 8008c50:	4640      	mov	r0, r8
 8008c52:	f7f8 f9e7 	bl	8001024 <__aeabi_fcmple>
 8008c56:	b150      	cbz	r0, 8008c6e <__ieee754_sqrtf+0xb2>
 8008c58:	6830      	ldr	r0, [r6, #0]
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	f7f7 ff32 	bl	8000ac4 <__addsf3>
 8008c60:	6836      	ldr	r6, [r6, #0]
 8008c62:	4601      	mov	r1, r0
 8008c64:	4630      	mov	r0, r6
 8008c66:	f7f8 f9d3 	bl	8001010 <__aeabi_fcmplt>
 8008c6a:	b170      	cbz	r0, 8008c8a <__ieee754_sqrtf+0xce>
 8008c6c:	3402      	adds	r4, #2
 8008c6e:	1064      	asrs	r4, r4, #1
 8008c70:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8008c74:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008c78:	e7b1      	b.n	8008bde <__ieee754_sqrtf+0x22>
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	0218      	lsls	r0, r3, #8
 8008c7e:	460a      	mov	r2, r1
 8008c80:	f101 0101 	add.w	r1, r1, #1
 8008c84:	d5f9      	bpl.n	8008c7a <__ieee754_sqrtf+0xbe>
 8008c86:	4252      	negs	r2, r2
 8008c88:	e7bb      	b.n	8008c02 <__ieee754_sqrtf+0x46>
 8008c8a:	3401      	adds	r4, #1
 8008c8c:	f024 0401 	bic.w	r4, r4, #1
 8008c90:	e7ed      	b.n	8008c6e <__ieee754_sqrtf+0xb2>
 8008c92:	bf00      	nop
 8008c94:	08009160 	.word	0x08009160
 8008c98:	0800915c 	.word	0x0800915c

08008c9c <_init>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	bf00      	nop
 8008ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca2:	bc08      	pop	{r3}
 8008ca4:	469e      	mov	lr, r3
 8008ca6:	4770      	bx	lr

08008ca8 <_fini>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	bf00      	nop
 8008cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cae:	bc08      	pop	{r3}
 8008cb0:	469e      	mov	lr, r3
 8008cb2:	4770      	bx	lr
